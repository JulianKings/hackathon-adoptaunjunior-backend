
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Challenge
 * 
 */
export type Challenge = $Result.DefaultSelection<Prisma.$ChallengePayload>
/**
 * Model Resource
 * 
 */
export type Resource = $Result.DefaultSelection<Prisma.$ResourcePayload>
/**
 * Model HelpIssue
 * 
 */
export type HelpIssue = $Result.DefaultSelection<Prisma.$HelpIssuePayload>
/**
 * Model Solution
 * 
 */
export type Solution = $Result.DefaultSelection<Prisma.$SolutionPayload>
/**
 * Model Tag
 * 
 */
export type Tag = $Result.DefaultSelection<Prisma.$TagPayload>
/**
 * Model TagsByChallenges
 * 
 */
export type TagsByChallenges = $Result.DefaultSelection<Prisma.$TagsByChallengesPayload>
/**
 * Model TagsByIssues
 * 
 */
export type TagsByIssues = $Result.DefaultSelection<Prisma.$TagsByIssuesPayload>
/**
 * Model TagsByResources
 * 
 */
export type TagsByResources = $Result.DefaultSelection<Prisma.$TagsByResourcesPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  user: 'user',
  moderator: 'moderator',
  admin: 'admin'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Knowledge: {
  student: 'student',
  junior: 'junior',
  senior: 'senior',
  manager: 'manager'
};

export type Knowledge = (typeof Knowledge)[keyof typeof Knowledge]


export const Difficulty: {
  basic: 'basic',
  easy: 'easy',
  medium: 'medium',
  hard: 'hard',
  expert: 'expert'
};

export type Difficulty = (typeof Difficulty)[keyof typeof Difficulty]


export const ResourceType: {
  video: 'video',
  course: 'course'
};

export type ResourceType = (typeof ResourceType)[keyof typeof ResourceType]


export const IssueStatus: {
  open: 'open',
  in_progress: 'in_progress',
  solved: 'solved',
  closed: 'closed'
};

export type IssueStatus = (typeof IssueStatus)[keyof typeof IssueStatus]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Knowledge = $Enums.Knowledge

export const Knowledge: typeof $Enums.Knowledge

export type Difficulty = $Enums.Difficulty

export const Difficulty: typeof $Enums.Difficulty

export type ResourceType = $Enums.ResourceType

export const ResourceType: typeof $Enums.ResourceType

export type IssueStatus = $Enums.IssueStatus

export const IssueStatus: typeof $Enums.IssueStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.challenge`: Exposes CRUD operations for the **Challenge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Challenges
    * const challenges = await prisma.challenge.findMany()
    * ```
    */
  get challenge(): Prisma.ChallengeDelegate<ExtArgs>;

  /**
   * `prisma.resource`: Exposes CRUD operations for the **Resource** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Resources
    * const resources = await prisma.resource.findMany()
    * ```
    */
  get resource(): Prisma.ResourceDelegate<ExtArgs>;

  /**
   * `prisma.helpIssue`: Exposes CRUD operations for the **HelpIssue** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HelpIssues
    * const helpIssues = await prisma.helpIssue.findMany()
    * ```
    */
  get helpIssue(): Prisma.HelpIssueDelegate<ExtArgs>;

  /**
   * `prisma.solution`: Exposes CRUD operations for the **Solution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Solutions
    * const solutions = await prisma.solution.findMany()
    * ```
    */
  get solution(): Prisma.SolutionDelegate<ExtArgs>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<ExtArgs>;

  /**
   * `prisma.tagsByChallenges`: Exposes CRUD operations for the **TagsByChallenges** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TagsByChallenges
    * const tagsByChallenges = await prisma.tagsByChallenges.findMany()
    * ```
    */
  get tagsByChallenges(): Prisma.TagsByChallengesDelegate<ExtArgs>;

  /**
   * `prisma.tagsByIssues`: Exposes CRUD operations for the **TagsByIssues** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TagsByIssues
    * const tagsByIssues = await prisma.tagsByIssues.findMany()
    * ```
    */
  get tagsByIssues(): Prisma.TagsByIssuesDelegate<ExtArgs>;

  /**
   * `prisma.tagsByResources`: Exposes CRUD operations for the **TagsByResources** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TagsByResources
    * const tagsByResources = await prisma.tagsByResources.findMany()
    * ```
    */
  get tagsByResources(): Prisma.TagsByResourcesDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.1
   * Query Engine version: bf0e5e8a04cada8225617067eaa03d041e2bba36
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Challenge: 'Challenge',
    Resource: 'Resource',
    HelpIssue: 'HelpIssue',
    Solution: 'Solution',
    Tag: 'Tag',
    TagsByChallenges: 'TagsByChallenges',
    TagsByIssues: 'TagsByIssues',
    TagsByResources: 'TagsByResources'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "challenge" | "resource" | "helpIssue" | "solution" | "tag" | "tagsByChallenges" | "tagsByIssues" | "tagsByResources"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Challenge: {
        payload: Prisma.$ChallengePayload<ExtArgs>
        fields: Prisma.ChallengeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChallengeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChallengeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengePayload>
          }
          findFirst: {
            args: Prisma.ChallengeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChallengeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengePayload>
          }
          findMany: {
            args: Prisma.ChallengeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengePayload>[]
          }
          create: {
            args: Prisma.ChallengeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengePayload>
          }
          createMany: {
            args: Prisma.ChallengeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ChallengeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengePayload>
          }
          update: {
            args: Prisma.ChallengeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengePayload>
          }
          deleteMany: {
            args: Prisma.ChallengeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChallengeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChallengeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChallengePayload>
          }
          aggregate: {
            args: Prisma.ChallengeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChallenge>
          }
          groupBy: {
            args: Prisma.ChallengeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChallengeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChallengeCountArgs<ExtArgs>
            result: $Utils.Optional<ChallengeCountAggregateOutputType> | number
          }
        }
      }
      Resource: {
        payload: Prisma.$ResourcePayload<ExtArgs>
        fields: Prisma.ResourceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResourceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResourceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload>
          }
          findFirst: {
            args: Prisma.ResourceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResourceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload>
          }
          findMany: {
            args: Prisma.ResourceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload>[]
          }
          create: {
            args: Prisma.ResourceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload>
          }
          createMany: {
            args: Prisma.ResourceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ResourceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload>
          }
          update: {
            args: Prisma.ResourceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload>
          }
          deleteMany: {
            args: Prisma.ResourceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResourceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ResourceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload>
          }
          aggregate: {
            args: Prisma.ResourceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResource>
          }
          groupBy: {
            args: Prisma.ResourceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResourceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResourceCountArgs<ExtArgs>
            result: $Utils.Optional<ResourceCountAggregateOutputType> | number
          }
        }
      }
      HelpIssue: {
        payload: Prisma.$HelpIssuePayload<ExtArgs>
        fields: Prisma.HelpIssueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HelpIssueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HelpIssuePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HelpIssueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HelpIssuePayload>
          }
          findFirst: {
            args: Prisma.HelpIssueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HelpIssuePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HelpIssueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HelpIssuePayload>
          }
          findMany: {
            args: Prisma.HelpIssueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HelpIssuePayload>[]
          }
          create: {
            args: Prisma.HelpIssueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HelpIssuePayload>
          }
          createMany: {
            args: Prisma.HelpIssueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.HelpIssueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HelpIssuePayload>
          }
          update: {
            args: Prisma.HelpIssueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HelpIssuePayload>
          }
          deleteMany: {
            args: Prisma.HelpIssueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HelpIssueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HelpIssueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HelpIssuePayload>
          }
          aggregate: {
            args: Prisma.HelpIssueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHelpIssue>
          }
          groupBy: {
            args: Prisma.HelpIssueGroupByArgs<ExtArgs>
            result: $Utils.Optional<HelpIssueGroupByOutputType>[]
          }
          count: {
            args: Prisma.HelpIssueCountArgs<ExtArgs>
            result: $Utils.Optional<HelpIssueCountAggregateOutputType> | number
          }
        }
      }
      Solution: {
        payload: Prisma.$SolutionPayload<ExtArgs>
        fields: Prisma.SolutionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SolutionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolutionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SolutionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolutionPayload>
          }
          findFirst: {
            args: Prisma.SolutionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolutionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SolutionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolutionPayload>
          }
          findMany: {
            args: Prisma.SolutionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolutionPayload>[]
          }
          create: {
            args: Prisma.SolutionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolutionPayload>
          }
          createMany: {
            args: Prisma.SolutionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SolutionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolutionPayload>
          }
          update: {
            args: Prisma.SolutionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolutionPayload>
          }
          deleteMany: {
            args: Prisma.SolutionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SolutionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SolutionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolutionPayload>
          }
          aggregate: {
            args: Prisma.SolutionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSolution>
          }
          groupBy: {
            args: Prisma.SolutionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SolutionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SolutionCountArgs<ExtArgs>
            result: $Utils.Optional<SolutionCountAggregateOutputType> | number
          }
        }
      }
      Tag: {
        payload: Prisma.$TagPayload<ExtArgs>
        fields: Prisma.TagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTag>
          }
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagCountArgs<ExtArgs>
            result: $Utils.Optional<TagCountAggregateOutputType> | number
          }
        }
      }
      TagsByChallenges: {
        payload: Prisma.$TagsByChallengesPayload<ExtArgs>
        fields: Prisma.TagsByChallengesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagsByChallengesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByChallengesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagsByChallengesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByChallengesPayload>
          }
          findFirst: {
            args: Prisma.TagsByChallengesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByChallengesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagsByChallengesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByChallengesPayload>
          }
          findMany: {
            args: Prisma.TagsByChallengesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByChallengesPayload>[]
          }
          create: {
            args: Prisma.TagsByChallengesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByChallengesPayload>
          }
          createMany: {
            args: Prisma.TagsByChallengesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TagsByChallengesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByChallengesPayload>
          }
          update: {
            args: Prisma.TagsByChallengesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByChallengesPayload>
          }
          deleteMany: {
            args: Prisma.TagsByChallengesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagsByChallengesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TagsByChallengesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByChallengesPayload>
          }
          aggregate: {
            args: Prisma.TagsByChallengesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTagsByChallenges>
          }
          groupBy: {
            args: Prisma.TagsByChallengesGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagsByChallengesGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagsByChallengesCountArgs<ExtArgs>
            result: $Utils.Optional<TagsByChallengesCountAggregateOutputType> | number
          }
        }
      }
      TagsByIssues: {
        payload: Prisma.$TagsByIssuesPayload<ExtArgs>
        fields: Prisma.TagsByIssuesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagsByIssuesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByIssuesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagsByIssuesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByIssuesPayload>
          }
          findFirst: {
            args: Prisma.TagsByIssuesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByIssuesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagsByIssuesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByIssuesPayload>
          }
          findMany: {
            args: Prisma.TagsByIssuesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByIssuesPayload>[]
          }
          create: {
            args: Prisma.TagsByIssuesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByIssuesPayload>
          }
          createMany: {
            args: Prisma.TagsByIssuesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TagsByIssuesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByIssuesPayload>
          }
          update: {
            args: Prisma.TagsByIssuesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByIssuesPayload>
          }
          deleteMany: {
            args: Prisma.TagsByIssuesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagsByIssuesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TagsByIssuesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByIssuesPayload>
          }
          aggregate: {
            args: Prisma.TagsByIssuesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTagsByIssues>
          }
          groupBy: {
            args: Prisma.TagsByIssuesGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagsByIssuesGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagsByIssuesCountArgs<ExtArgs>
            result: $Utils.Optional<TagsByIssuesCountAggregateOutputType> | number
          }
        }
      }
      TagsByResources: {
        payload: Prisma.$TagsByResourcesPayload<ExtArgs>
        fields: Prisma.TagsByResourcesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagsByResourcesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByResourcesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagsByResourcesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByResourcesPayload>
          }
          findFirst: {
            args: Prisma.TagsByResourcesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByResourcesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagsByResourcesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByResourcesPayload>
          }
          findMany: {
            args: Prisma.TagsByResourcesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByResourcesPayload>[]
          }
          create: {
            args: Prisma.TagsByResourcesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByResourcesPayload>
          }
          createMany: {
            args: Prisma.TagsByResourcesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TagsByResourcesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByResourcesPayload>
          }
          update: {
            args: Prisma.TagsByResourcesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByResourcesPayload>
          }
          deleteMany: {
            args: Prisma.TagsByResourcesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagsByResourcesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TagsByResourcesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsByResourcesPayload>
          }
          aggregate: {
            args: Prisma.TagsByResourcesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTagsByResources>
          }
          groupBy: {
            args: Prisma.TagsByResourcesGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagsByResourcesGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagsByResourcesCountArgs<ExtArgs>
            result: $Utils.Optional<TagsByResourcesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    issues: number
    solutions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    issues?: boolean | UserCountOutputTypeCountIssuesArgs
    solutions?: boolean | UserCountOutputTypeCountSolutionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountIssuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HelpIssueWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSolutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SolutionWhereInput
  }


  /**
   * Count Type ChallengeCountOutputType
   */

  export type ChallengeCountOutputType = {
    tags: number
    solutions: number
  }

  export type ChallengeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tags?: boolean | ChallengeCountOutputTypeCountTagsArgs
    solutions?: boolean | ChallengeCountOutputTypeCountSolutionsArgs
  }

  // Custom InputTypes
  /**
   * ChallengeCountOutputType without action
   */
  export type ChallengeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChallengeCountOutputType
     */
    select?: ChallengeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChallengeCountOutputType without action
   */
  export type ChallengeCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagsByChallengesWhereInput
  }

  /**
   * ChallengeCountOutputType without action
   */
  export type ChallengeCountOutputTypeCountSolutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SolutionWhereInput
  }


  /**
   * Count Type ResourceCountOutputType
   */

  export type ResourceCountOutputType = {
    tags: number
  }

  export type ResourceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tags?: boolean | ResourceCountOutputTypeCountTagsArgs
  }

  // Custom InputTypes
  /**
   * ResourceCountOutputType without action
   */
  export type ResourceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResourceCountOutputType
     */
    select?: ResourceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ResourceCountOutputType without action
   */
  export type ResourceCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagsByResourcesWhereInput
  }


  /**
   * Count Type HelpIssueCountOutputType
   */

  export type HelpIssueCountOutputType = {
    tags: number
  }

  export type HelpIssueCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tags?: boolean | HelpIssueCountOutputTypeCountTagsArgs
  }

  // Custom InputTypes
  /**
   * HelpIssueCountOutputType without action
   */
  export type HelpIssueCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HelpIssueCountOutputType
     */
    select?: HelpIssueCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HelpIssueCountOutputType without action
   */
  export type HelpIssueCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagsByIssuesWhereInput
  }


  /**
   * Count Type TagCountOutputType
   */

  export type TagCountOutputType = {
    challenges: number
    issues: number
    resources: number
  }

  export type TagCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    challenges?: boolean | TagCountOutputTypeCountChallengesArgs
    issues?: boolean | TagCountOutputTypeCountIssuesArgs
    resources?: boolean | TagCountOutputTypeCountResourcesArgs
  }

  // Custom InputTypes
  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     */
    select?: TagCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountChallengesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagsByChallengesWhereInput
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountIssuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagsByIssuesWhereInput
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountResourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagsByResourcesWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    likes: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    likes: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    profile_picture: string | null
    role: $Enums.Role | null
    level: $Enums.Knowledge | null
    likes: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    profile_picture: string | null
    role: $Enums.Role | null
    level: $Enums.Knowledge | null
    likes: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    profile_picture: number
    role: number
    level: number
    likes: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    likes?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    likes?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    profile_picture?: true
    role?: true
    level?: true
    likes?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    profile_picture?: true
    role?: true
    level?: true
    likes?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    profile_picture?: true
    role?: true
    level?: true
    likes?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    name: string
    profile_picture: string
    role: $Enums.Role
    level: $Enums.Knowledge
    likes: number
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    profile_picture?: boolean
    role?: boolean
    level?: boolean
    likes?: boolean
    issues?: boolean | User$issuesArgs<ExtArgs>
    solutions?: boolean | User$solutionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    profile_picture?: boolean
    role?: boolean
    level?: boolean
    likes?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    issues?: boolean | User$issuesArgs<ExtArgs>
    solutions?: boolean | User$solutionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      issues: Prisma.$HelpIssuePayload<ExtArgs>[]
      solutions: Prisma.$SolutionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      name: string
      profile_picture: string
      role: $Enums.Role
      level: $Enums.Knowledge
      likes: number
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    issues<T extends User$issuesArgs<ExtArgs> = {}>(args?: Subset<T, User$issuesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HelpIssuePayload<ExtArgs>, T, "findMany"> | Null>
    solutions<T extends User$solutionsArgs<ExtArgs> = {}>(args?: Subset<T, User$solutionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SolutionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly profile_picture: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly level: FieldRef<"User", 'Knowledge'>
    readonly likes: FieldRef<"User", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.issues
   */
  export type User$issuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HelpIssue
     */
    select?: HelpIssueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HelpIssueInclude<ExtArgs> | null
    where?: HelpIssueWhereInput
    orderBy?: HelpIssueOrderByWithRelationInput | HelpIssueOrderByWithRelationInput[]
    cursor?: HelpIssueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HelpIssueScalarFieldEnum | HelpIssueScalarFieldEnum[]
  }

  /**
   * User.solutions
   */
  export type User$solutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solution
     */
    select?: SolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolutionInclude<ExtArgs> | null
    where?: SolutionWhereInput
    orderBy?: SolutionOrderByWithRelationInput | SolutionOrderByWithRelationInput[]
    cursor?: SolutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SolutionScalarFieldEnum | SolutionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Challenge
   */

  export type AggregateChallenge = {
    _count: ChallengeCountAggregateOutputType | null
    _avg: ChallengeAvgAggregateOutputType | null
    _sum: ChallengeSumAggregateOutputType | null
    _min: ChallengeMinAggregateOutputType | null
    _max: ChallengeMaxAggregateOutputType | null
  }

  export type ChallengeAvgAggregateOutputType = {
    id: number | null
  }

  export type ChallengeSumAggregateOutputType = {
    id: number | null
  }

  export type ChallengeMinAggregateOutputType = {
    id: number | null
    created_at: Date | null
    updated_at: Date | null
    title: string | null
    description: string | null
    content: string | null
    published: boolean | null
    difficulty: $Enums.Difficulty | null
  }

  export type ChallengeMaxAggregateOutputType = {
    id: number | null
    created_at: Date | null
    updated_at: Date | null
    title: string | null
    description: string | null
    content: string | null
    published: boolean | null
    difficulty: $Enums.Difficulty | null
  }

  export type ChallengeCountAggregateOutputType = {
    id: number
    created_at: number
    updated_at: number
    title: number
    description: number
    content: number
    published: number
    difficulty: number
    _all: number
  }


  export type ChallengeAvgAggregateInputType = {
    id?: true
  }

  export type ChallengeSumAggregateInputType = {
    id?: true
  }

  export type ChallengeMinAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    title?: true
    description?: true
    content?: true
    published?: true
    difficulty?: true
  }

  export type ChallengeMaxAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    title?: true
    description?: true
    content?: true
    published?: true
    difficulty?: true
  }

  export type ChallengeCountAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    title?: true
    description?: true
    content?: true
    published?: true
    difficulty?: true
    _all?: true
  }

  export type ChallengeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Challenge to aggregate.
     */
    where?: ChallengeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Challenges to fetch.
     */
    orderBy?: ChallengeOrderByWithRelationInput | ChallengeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChallengeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Challenges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Challenges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Challenges
    **/
    _count?: true | ChallengeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChallengeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChallengeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChallengeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChallengeMaxAggregateInputType
  }

  export type GetChallengeAggregateType<T extends ChallengeAggregateArgs> = {
        [P in keyof T & keyof AggregateChallenge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChallenge[P]>
      : GetScalarType<T[P], AggregateChallenge[P]>
  }




  export type ChallengeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChallengeWhereInput
    orderBy?: ChallengeOrderByWithAggregationInput | ChallengeOrderByWithAggregationInput[]
    by: ChallengeScalarFieldEnum[] | ChallengeScalarFieldEnum
    having?: ChallengeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChallengeCountAggregateInputType | true
    _avg?: ChallengeAvgAggregateInputType
    _sum?: ChallengeSumAggregateInputType
    _min?: ChallengeMinAggregateInputType
    _max?: ChallengeMaxAggregateInputType
  }

  export type ChallengeGroupByOutputType = {
    id: number
    created_at: Date
    updated_at: Date
    title: string
    description: string
    content: string
    published: boolean
    difficulty: $Enums.Difficulty
    _count: ChallengeCountAggregateOutputType | null
    _avg: ChallengeAvgAggregateOutputType | null
    _sum: ChallengeSumAggregateOutputType | null
    _min: ChallengeMinAggregateOutputType | null
    _max: ChallengeMaxAggregateOutputType | null
  }

  type GetChallengeGroupByPayload<T extends ChallengeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChallengeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChallengeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChallengeGroupByOutputType[P]>
            : GetScalarType<T[P], ChallengeGroupByOutputType[P]>
        }
      >
    >


  export type ChallengeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    title?: boolean
    description?: boolean
    content?: boolean
    published?: boolean
    difficulty?: boolean
    tags?: boolean | Challenge$tagsArgs<ExtArgs>
    solutions?: boolean | Challenge$solutionsArgs<ExtArgs>
    _count?: boolean | ChallengeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["challenge"]>


  export type ChallengeSelectScalar = {
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    title?: boolean
    description?: boolean
    content?: boolean
    published?: boolean
    difficulty?: boolean
  }

  export type ChallengeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tags?: boolean | Challenge$tagsArgs<ExtArgs>
    solutions?: boolean | Challenge$solutionsArgs<ExtArgs>
    _count?: boolean | ChallengeCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ChallengePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Challenge"
    objects: {
      tags: Prisma.$TagsByChallengesPayload<ExtArgs>[]
      solutions: Prisma.$SolutionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      created_at: Date
      updated_at: Date
      title: string
      description: string
      content: string
      published: boolean
      difficulty: $Enums.Difficulty
    }, ExtArgs["result"]["challenge"]>
    composites: {}
  }

  type ChallengeGetPayload<S extends boolean | null | undefined | ChallengeDefaultArgs> = $Result.GetResult<Prisma.$ChallengePayload, S>

  type ChallengeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChallengeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChallengeCountAggregateInputType | true
    }

  export interface ChallengeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Challenge'], meta: { name: 'Challenge' } }
    /**
     * Find zero or one Challenge that matches the filter.
     * @param {ChallengeFindUniqueArgs} args - Arguments to find a Challenge
     * @example
     * // Get one Challenge
     * const challenge = await prisma.challenge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChallengeFindUniqueArgs>(args: SelectSubset<T, ChallengeFindUniqueArgs<ExtArgs>>): Prisma__ChallengeClient<$Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Challenge that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChallengeFindUniqueOrThrowArgs} args - Arguments to find a Challenge
     * @example
     * // Get one Challenge
     * const challenge = await prisma.challenge.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChallengeFindUniqueOrThrowArgs>(args: SelectSubset<T, ChallengeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChallengeClient<$Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Challenge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeFindFirstArgs} args - Arguments to find a Challenge
     * @example
     * // Get one Challenge
     * const challenge = await prisma.challenge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChallengeFindFirstArgs>(args?: SelectSubset<T, ChallengeFindFirstArgs<ExtArgs>>): Prisma__ChallengeClient<$Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Challenge that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeFindFirstOrThrowArgs} args - Arguments to find a Challenge
     * @example
     * // Get one Challenge
     * const challenge = await prisma.challenge.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChallengeFindFirstOrThrowArgs>(args?: SelectSubset<T, ChallengeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChallengeClient<$Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Challenges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Challenges
     * const challenges = await prisma.challenge.findMany()
     * 
     * // Get first 10 Challenges
     * const challenges = await prisma.challenge.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const challengeWithIdOnly = await prisma.challenge.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChallengeFindManyArgs>(args?: SelectSubset<T, ChallengeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Challenge.
     * @param {ChallengeCreateArgs} args - Arguments to create a Challenge.
     * @example
     * // Create one Challenge
     * const Challenge = await prisma.challenge.create({
     *   data: {
     *     // ... data to create a Challenge
     *   }
     * })
     * 
     */
    create<T extends ChallengeCreateArgs>(args: SelectSubset<T, ChallengeCreateArgs<ExtArgs>>): Prisma__ChallengeClient<$Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Challenges.
     * @param {ChallengeCreateManyArgs} args - Arguments to create many Challenges.
     * @example
     * // Create many Challenges
     * const challenge = await prisma.challenge.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChallengeCreateManyArgs>(args?: SelectSubset<T, ChallengeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Challenge.
     * @param {ChallengeDeleteArgs} args - Arguments to delete one Challenge.
     * @example
     * // Delete one Challenge
     * const Challenge = await prisma.challenge.delete({
     *   where: {
     *     // ... filter to delete one Challenge
     *   }
     * })
     * 
     */
    delete<T extends ChallengeDeleteArgs>(args: SelectSubset<T, ChallengeDeleteArgs<ExtArgs>>): Prisma__ChallengeClient<$Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Challenge.
     * @param {ChallengeUpdateArgs} args - Arguments to update one Challenge.
     * @example
     * // Update one Challenge
     * const challenge = await prisma.challenge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChallengeUpdateArgs>(args: SelectSubset<T, ChallengeUpdateArgs<ExtArgs>>): Prisma__ChallengeClient<$Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Challenges.
     * @param {ChallengeDeleteManyArgs} args - Arguments to filter Challenges to delete.
     * @example
     * // Delete a few Challenges
     * const { count } = await prisma.challenge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChallengeDeleteManyArgs>(args?: SelectSubset<T, ChallengeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Challenges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Challenges
     * const challenge = await prisma.challenge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChallengeUpdateManyArgs>(args: SelectSubset<T, ChallengeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Challenge.
     * @param {ChallengeUpsertArgs} args - Arguments to update or create a Challenge.
     * @example
     * // Update or create a Challenge
     * const challenge = await prisma.challenge.upsert({
     *   create: {
     *     // ... data to create a Challenge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Challenge we want to update
     *   }
     * })
     */
    upsert<T extends ChallengeUpsertArgs>(args: SelectSubset<T, ChallengeUpsertArgs<ExtArgs>>): Prisma__ChallengeClient<$Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Challenges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeCountArgs} args - Arguments to filter Challenges to count.
     * @example
     * // Count the number of Challenges
     * const count = await prisma.challenge.count({
     *   where: {
     *     // ... the filter for the Challenges we want to count
     *   }
     * })
    **/
    count<T extends ChallengeCountArgs>(
      args?: Subset<T, ChallengeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChallengeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Challenge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChallengeAggregateArgs>(args: Subset<T, ChallengeAggregateArgs>): Prisma.PrismaPromise<GetChallengeAggregateType<T>>

    /**
     * Group by Challenge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChallengeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChallengeGroupByArgs['orderBy'] }
        : { orderBy?: ChallengeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChallengeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChallengeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Challenge model
   */
  readonly fields: ChallengeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Challenge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChallengeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tags<T extends Challenge$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Challenge$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagsByChallengesPayload<ExtArgs>, T, "findMany"> | Null>
    solutions<T extends Challenge$solutionsArgs<ExtArgs> = {}>(args?: Subset<T, Challenge$solutionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SolutionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Challenge model
   */ 
  interface ChallengeFieldRefs {
    readonly id: FieldRef<"Challenge", 'Int'>
    readonly created_at: FieldRef<"Challenge", 'DateTime'>
    readonly updated_at: FieldRef<"Challenge", 'DateTime'>
    readonly title: FieldRef<"Challenge", 'String'>
    readonly description: FieldRef<"Challenge", 'String'>
    readonly content: FieldRef<"Challenge", 'String'>
    readonly published: FieldRef<"Challenge", 'Boolean'>
    readonly difficulty: FieldRef<"Challenge", 'Difficulty'>
  }
    

  // Custom InputTypes
  /**
   * Challenge findUnique
   */
  export type ChallengeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * Filter, which Challenge to fetch.
     */
    where: ChallengeWhereUniqueInput
  }

  /**
   * Challenge findUniqueOrThrow
   */
  export type ChallengeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * Filter, which Challenge to fetch.
     */
    where: ChallengeWhereUniqueInput
  }

  /**
   * Challenge findFirst
   */
  export type ChallengeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * Filter, which Challenge to fetch.
     */
    where?: ChallengeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Challenges to fetch.
     */
    orderBy?: ChallengeOrderByWithRelationInput | ChallengeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Challenges.
     */
    cursor?: ChallengeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Challenges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Challenges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Challenges.
     */
    distinct?: ChallengeScalarFieldEnum | ChallengeScalarFieldEnum[]
  }

  /**
   * Challenge findFirstOrThrow
   */
  export type ChallengeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * Filter, which Challenge to fetch.
     */
    where?: ChallengeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Challenges to fetch.
     */
    orderBy?: ChallengeOrderByWithRelationInput | ChallengeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Challenges.
     */
    cursor?: ChallengeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Challenges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Challenges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Challenges.
     */
    distinct?: ChallengeScalarFieldEnum | ChallengeScalarFieldEnum[]
  }

  /**
   * Challenge findMany
   */
  export type ChallengeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * Filter, which Challenges to fetch.
     */
    where?: ChallengeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Challenges to fetch.
     */
    orderBy?: ChallengeOrderByWithRelationInput | ChallengeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Challenges.
     */
    cursor?: ChallengeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Challenges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Challenges.
     */
    skip?: number
    distinct?: ChallengeScalarFieldEnum | ChallengeScalarFieldEnum[]
  }

  /**
   * Challenge create
   */
  export type ChallengeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * The data needed to create a Challenge.
     */
    data: XOR<ChallengeCreateInput, ChallengeUncheckedCreateInput>
  }

  /**
   * Challenge createMany
   */
  export type ChallengeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Challenges.
     */
    data: ChallengeCreateManyInput | ChallengeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Challenge update
   */
  export type ChallengeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * The data needed to update a Challenge.
     */
    data: XOR<ChallengeUpdateInput, ChallengeUncheckedUpdateInput>
    /**
     * Choose, which Challenge to update.
     */
    where: ChallengeWhereUniqueInput
  }

  /**
   * Challenge updateMany
   */
  export type ChallengeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Challenges.
     */
    data: XOR<ChallengeUpdateManyMutationInput, ChallengeUncheckedUpdateManyInput>
    /**
     * Filter which Challenges to update
     */
    where?: ChallengeWhereInput
  }

  /**
   * Challenge upsert
   */
  export type ChallengeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * The filter to search for the Challenge to update in case it exists.
     */
    where: ChallengeWhereUniqueInput
    /**
     * In case the Challenge found by the `where` argument doesn't exist, create a new Challenge with this data.
     */
    create: XOR<ChallengeCreateInput, ChallengeUncheckedCreateInput>
    /**
     * In case the Challenge was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChallengeUpdateInput, ChallengeUncheckedUpdateInput>
  }

  /**
   * Challenge delete
   */
  export type ChallengeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * Filter which Challenge to delete.
     */
    where: ChallengeWhereUniqueInput
  }

  /**
   * Challenge deleteMany
   */
  export type ChallengeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Challenges to delete
     */
    where?: ChallengeWhereInput
  }

  /**
   * Challenge.tags
   */
  export type Challenge$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByChallenges
     */
    select?: TagsByChallengesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByChallengesInclude<ExtArgs> | null
    where?: TagsByChallengesWhereInput
    orderBy?: TagsByChallengesOrderByWithRelationInput | TagsByChallengesOrderByWithRelationInput[]
    cursor?: TagsByChallengesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagsByChallengesScalarFieldEnum | TagsByChallengesScalarFieldEnum[]
  }

  /**
   * Challenge.solutions
   */
  export type Challenge$solutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solution
     */
    select?: SolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolutionInclude<ExtArgs> | null
    where?: SolutionWhereInput
    orderBy?: SolutionOrderByWithRelationInput | SolutionOrderByWithRelationInput[]
    cursor?: SolutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SolutionScalarFieldEnum | SolutionScalarFieldEnum[]
  }

  /**
   * Challenge without action
   */
  export type ChallengeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChallengeInclude<ExtArgs> | null
  }


  /**
   * Model Resource
   */

  export type AggregateResource = {
    _count: ResourceCountAggregateOutputType | null
    _avg: ResourceAvgAggregateOutputType | null
    _sum: ResourceSumAggregateOutputType | null
    _min: ResourceMinAggregateOutputType | null
    _max: ResourceMaxAggregateOutputType | null
  }

  export type ResourceAvgAggregateOutputType = {
    id: number | null
  }

  export type ResourceSumAggregateOutputType = {
    id: number | null
  }

  export type ResourceMinAggregateOutputType = {
    id: number | null
    created_at: Date | null
    updated_at: Date | null
    title: string | null
    description: string | null
    content: string | null
    published: boolean | null
    type: $Enums.ResourceType | null
    url: string | null
  }

  export type ResourceMaxAggregateOutputType = {
    id: number | null
    created_at: Date | null
    updated_at: Date | null
    title: string | null
    description: string | null
    content: string | null
    published: boolean | null
    type: $Enums.ResourceType | null
    url: string | null
  }

  export type ResourceCountAggregateOutputType = {
    id: number
    created_at: number
    updated_at: number
    title: number
    description: number
    content: number
    published: number
    type: number
    url: number
    _all: number
  }


  export type ResourceAvgAggregateInputType = {
    id?: true
  }

  export type ResourceSumAggregateInputType = {
    id?: true
  }

  export type ResourceMinAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    title?: true
    description?: true
    content?: true
    published?: true
    type?: true
    url?: true
  }

  export type ResourceMaxAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    title?: true
    description?: true
    content?: true
    published?: true
    type?: true
    url?: true
  }

  export type ResourceCountAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    title?: true
    description?: true
    content?: true
    published?: true
    type?: true
    url?: true
    _all?: true
  }

  export type ResourceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Resource to aggregate.
     */
    where?: ResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resources to fetch.
     */
    orderBy?: ResourceOrderByWithRelationInput | ResourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Resources
    **/
    _count?: true | ResourceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResourceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResourceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResourceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResourceMaxAggregateInputType
  }

  export type GetResourceAggregateType<T extends ResourceAggregateArgs> = {
        [P in keyof T & keyof AggregateResource]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResource[P]>
      : GetScalarType<T[P], AggregateResource[P]>
  }




  export type ResourceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResourceWhereInput
    orderBy?: ResourceOrderByWithAggregationInput | ResourceOrderByWithAggregationInput[]
    by: ResourceScalarFieldEnum[] | ResourceScalarFieldEnum
    having?: ResourceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResourceCountAggregateInputType | true
    _avg?: ResourceAvgAggregateInputType
    _sum?: ResourceSumAggregateInputType
    _min?: ResourceMinAggregateInputType
    _max?: ResourceMaxAggregateInputType
  }

  export type ResourceGroupByOutputType = {
    id: number
    created_at: Date
    updated_at: Date
    title: string
    description: string
    content: string
    published: boolean
    type: $Enums.ResourceType
    url: string
    _count: ResourceCountAggregateOutputType | null
    _avg: ResourceAvgAggregateOutputType | null
    _sum: ResourceSumAggregateOutputType | null
    _min: ResourceMinAggregateOutputType | null
    _max: ResourceMaxAggregateOutputType | null
  }

  type GetResourceGroupByPayload<T extends ResourceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResourceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResourceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResourceGroupByOutputType[P]>
            : GetScalarType<T[P], ResourceGroupByOutputType[P]>
        }
      >
    >


  export type ResourceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    title?: boolean
    description?: boolean
    content?: boolean
    published?: boolean
    type?: boolean
    url?: boolean
    tags?: boolean | Resource$tagsArgs<ExtArgs>
    _count?: boolean | ResourceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resource"]>


  export type ResourceSelectScalar = {
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    title?: boolean
    description?: boolean
    content?: boolean
    published?: boolean
    type?: boolean
    url?: boolean
  }

  export type ResourceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tags?: boolean | Resource$tagsArgs<ExtArgs>
    _count?: boolean | ResourceCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ResourcePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Resource"
    objects: {
      tags: Prisma.$TagsByResourcesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      created_at: Date
      updated_at: Date
      title: string
      description: string
      content: string
      published: boolean
      type: $Enums.ResourceType
      url: string
    }, ExtArgs["result"]["resource"]>
    composites: {}
  }

  type ResourceGetPayload<S extends boolean | null | undefined | ResourceDefaultArgs> = $Result.GetResult<Prisma.$ResourcePayload, S>

  type ResourceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ResourceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ResourceCountAggregateInputType | true
    }

  export interface ResourceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Resource'], meta: { name: 'Resource' } }
    /**
     * Find zero or one Resource that matches the filter.
     * @param {ResourceFindUniqueArgs} args - Arguments to find a Resource
     * @example
     * // Get one Resource
     * const resource = await prisma.resource.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResourceFindUniqueArgs>(args: SelectSubset<T, ResourceFindUniqueArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Resource that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ResourceFindUniqueOrThrowArgs} args - Arguments to find a Resource
     * @example
     * // Get one Resource
     * const resource = await prisma.resource.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResourceFindUniqueOrThrowArgs>(args: SelectSubset<T, ResourceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Resource that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceFindFirstArgs} args - Arguments to find a Resource
     * @example
     * // Get one Resource
     * const resource = await prisma.resource.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResourceFindFirstArgs>(args?: SelectSubset<T, ResourceFindFirstArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Resource that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceFindFirstOrThrowArgs} args - Arguments to find a Resource
     * @example
     * // Get one Resource
     * const resource = await prisma.resource.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResourceFindFirstOrThrowArgs>(args?: SelectSubset<T, ResourceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Resources that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Resources
     * const resources = await prisma.resource.findMany()
     * 
     * // Get first 10 Resources
     * const resources = await prisma.resource.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resourceWithIdOnly = await prisma.resource.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ResourceFindManyArgs>(args?: SelectSubset<T, ResourceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Resource.
     * @param {ResourceCreateArgs} args - Arguments to create a Resource.
     * @example
     * // Create one Resource
     * const Resource = await prisma.resource.create({
     *   data: {
     *     // ... data to create a Resource
     *   }
     * })
     * 
     */
    create<T extends ResourceCreateArgs>(args: SelectSubset<T, ResourceCreateArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Resources.
     * @param {ResourceCreateManyArgs} args - Arguments to create many Resources.
     * @example
     * // Create many Resources
     * const resource = await prisma.resource.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResourceCreateManyArgs>(args?: SelectSubset<T, ResourceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Resource.
     * @param {ResourceDeleteArgs} args - Arguments to delete one Resource.
     * @example
     * // Delete one Resource
     * const Resource = await prisma.resource.delete({
     *   where: {
     *     // ... filter to delete one Resource
     *   }
     * })
     * 
     */
    delete<T extends ResourceDeleteArgs>(args: SelectSubset<T, ResourceDeleteArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Resource.
     * @param {ResourceUpdateArgs} args - Arguments to update one Resource.
     * @example
     * // Update one Resource
     * const resource = await prisma.resource.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResourceUpdateArgs>(args: SelectSubset<T, ResourceUpdateArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Resources.
     * @param {ResourceDeleteManyArgs} args - Arguments to filter Resources to delete.
     * @example
     * // Delete a few Resources
     * const { count } = await prisma.resource.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResourceDeleteManyArgs>(args?: SelectSubset<T, ResourceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Resources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Resources
     * const resource = await prisma.resource.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResourceUpdateManyArgs>(args: SelectSubset<T, ResourceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Resource.
     * @param {ResourceUpsertArgs} args - Arguments to update or create a Resource.
     * @example
     * // Update or create a Resource
     * const resource = await prisma.resource.upsert({
     *   create: {
     *     // ... data to create a Resource
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Resource we want to update
     *   }
     * })
     */
    upsert<T extends ResourceUpsertArgs>(args: SelectSubset<T, ResourceUpsertArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Resources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceCountArgs} args - Arguments to filter Resources to count.
     * @example
     * // Count the number of Resources
     * const count = await prisma.resource.count({
     *   where: {
     *     // ... the filter for the Resources we want to count
     *   }
     * })
    **/
    count<T extends ResourceCountArgs>(
      args?: Subset<T, ResourceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResourceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Resource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResourceAggregateArgs>(args: Subset<T, ResourceAggregateArgs>): Prisma.PrismaPromise<GetResourceAggregateType<T>>

    /**
     * Group by Resource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResourceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResourceGroupByArgs['orderBy'] }
        : { orderBy?: ResourceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResourceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResourceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Resource model
   */
  readonly fields: ResourceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Resource.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResourceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tags<T extends Resource$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Resource$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagsByResourcesPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Resource model
   */ 
  interface ResourceFieldRefs {
    readonly id: FieldRef<"Resource", 'Int'>
    readonly created_at: FieldRef<"Resource", 'DateTime'>
    readonly updated_at: FieldRef<"Resource", 'DateTime'>
    readonly title: FieldRef<"Resource", 'String'>
    readonly description: FieldRef<"Resource", 'String'>
    readonly content: FieldRef<"Resource", 'String'>
    readonly published: FieldRef<"Resource", 'Boolean'>
    readonly type: FieldRef<"Resource", 'ResourceType'>
    readonly url: FieldRef<"Resource", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Resource findUnique
   */
  export type ResourceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * Filter, which Resource to fetch.
     */
    where: ResourceWhereUniqueInput
  }

  /**
   * Resource findUniqueOrThrow
   */
  export type ResourceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * Filter, which Resource to fetch.
     */
    where: ResourceWhereUniqueInput
  }

  /**
   * Resource findFirst
   */
  export type ResourceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * Filter, which Resource to fetch.
     */
    where?: ResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resources to fetch.
     */
    orderBy?: ResourceOrderByWithRelationInput | ResourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Resources.
     */
    cursor?: ResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Resources.
     */
    distinct?: ResourceScalarFieldEnum | ResourceScalarFieldEnum[]
  }

  /**
   * Resource findFirstOrThrow
   */
  export type ResourceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * Filter, which Resource to fetch.
     */
    where?: ResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resources to fetch.
     */
    orderBy?: ResourceOrderByWithRelationInput | ResourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Resources.
     */
    cursor?: ResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Resources.
     */
    distinct?: ResourceScalarFieldEnum | ResourceScalarFieldEnum[]
  }

  /**
   * Resource findMany
   */
  export type ResourceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * Filter, which Resources to fetch.
     */
    where?: ResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resources to fetch.
     */
    orderBy?: ResourceOrderByWithRelationInput | ResourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Resources.
     */
    cursor?: ResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resources.
     */
    skip?: number
    distinct?: ResourceScalarFieldEnum | ResourceScalarFieldEnum[]
  }

  /**
   * Resource create
   */
  export type ResourceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * The data needed to create a Resource.
     */
    data: XOR<ResourceCreateInput, ResourceUncheckedCreateInput>
  }

  /**
   * Resource createMany
   */
  export type ResourceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Resources.
     */
    data: ResourceCreateManyInput | ResourceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Resource update
   */
  export type ResourceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * The data needed to update a Resource.
     */
    data: XOR<ResourceUpdateInput, ResourceUncheckedUpdateInput>
    /**
     * Choose, which Resource to update.
     */
    where: ResourceWhereUniqueInput
  }

  /**
   * Resource updateMany
   */
  export type ResourceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Resources.
     */
    data: XOR<ResourceUpdateManyMutationInput, ResourceUncheckedUpdateManyInput>
    /**
     * Filter which Resources to update
     */
    where?: ResourceWhereInput
  }

  /**
   * Resource upsert
   */
  export type ResourceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * The filter to search for the Resource to update in case it exists.
     */
    where: ResourceWhereUniqueInput
    /**
     * In case the Resource found by the `where` argument doesn't exist, create a new Resource with this data.
     */
    create: XOR<ResourceCreateInput, ResourceUncheckedCreateInput>
    /**
     * In case the Resource was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResourceUpdateInput, ResourceUncheckedUpdateInput>
  }

  /**
   * Resource delete
   */
  export type ResourceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * Filter which Resource to delete.
     */
    where: ResourceWhereUniqueInput
  }

  /**
   * Resource deleteMany
   */
  export type ResourceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Resources to delete
     */
    where?: ResourceWhereInput
  }

  /**
   * Resource.tags
   */
  export type Resource$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByResources
     */
    select?: TagsByResourcesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByResourcesInclude<ExtArgs> | null
    where?: TagsByResourcesWhereInput
    orderBy?: TagsByResourcesOrderByWithRelationInput | TagsByResourcesOrderByWithRelationInput[]
    cursor?: TagsByResourcesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagsByResourcesScalarFieldEnum | TagsByResourcesScalarFieldEnum[]
  }

  /**
   * Resource without action
   */
  export type ResourceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
  }


  /**
   * Model HelpIssue
   */

  export type AggregateHelpIssue = {
    _count: HelpIssueCountAggregateOutputType | null
    _avg: HelpIssueAvgAggregateOutputType | null
    _sum: HelpIssueSumAggregateOutputType | null
    _min: HelpIssueMinAggregateOutputType | null
    _max: HelpIssueMaxAggregateOutputType | null
  }

  export type HelpIssueAvgAggregateOutputType = {
    id: number | null
    author_id: number | null
    votes: number | null
    views: number | null
  }

  export type HelpIssueSumAggregateOutputType = {
    id: number | null
    author_id: number | null
    votes: number | null
    views: number | null
  }

  export type HelpIssueMinAggregateOutputType = {
    id: number | null
    created_at: Date | null
    updated_at: Date | null
    author_id: number | null
    votes: number | null
    views: number | null
    subject: string | null
    content: string | null
    status: $Enums.IssueStatus | null
  }

  export type HelpIssueMaxAggregateOutputType = {
    id: number | null
    created_at: Date | null
    updated_at: Date | null
    author_id: number | null
    votes: number | null
    views: number | null
    subject: string | null
    content: string | null
    status: $Enums.IssueStatus | null
  }

  export type HelpIssueCountAggregateOutputType = {
    id: number
    created_at: number
    updated_at: number
    author_id: number
    votes: number
    views: number
    subject: number
    content: number
    status: number
    _all: number
  }


  export type HelpIssueAvgAggregateInputType = {
    id?: true
    author_id?: true
    votes?: true
    views?: true
  }

  export type HelpIssueSumAggregateInputType = {
    id?: true
    author_id?: true
    votes?: true
    views?: true
  }

  export type HelpIssueMinAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    author_id?: true
    votes?: true
    views?: true
    subject?: true
    content?: true
    status?: true
  }

  export type HelpIssueMaxAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    author_id?: true
    votes?: true
    views?: true
    subject?: true
    content?: true
    status?: true
  }

  export type HelpIssueCountAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    author_id?: true
    votes?: true
    views?: true
    subject?: true
    content?: true
    status?: true
    _all?: true
  }

  export type HelpIssueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HelpIssue to aggregate.
     */
    where?: HelpIssueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HelpIssues to fetch.
     */
    orderBy?: HelpIssueOrderByWithRelationInput | HelpIssueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HelpIssueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HelpIssues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HelpIssues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HelpIssues
    **/
    _count?: true | HelpIssueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HelpIssueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HelpIssueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HelpIssueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HelpIssueMaxAggregateInputType
  }

  export type GetHelpIssueAggregateType<T extends HelpIssueAggregateArgs> = {
        [P in keyof T & keyof AggregateHelpIssue]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHelpIssue[P]>
      : GetScalarType<T[P], AggregateHelpIssue[P]>
  }




  export type HelpIssueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HelpIssueWhereInput
    orderBy?: HelpIssueOrderByWithAggregationInput | HelpIssueOrderByWithAggregationInput[]
    by: HelpIssueScalarFieldEnum[] | HelpIssueScalarFieldEnum
    having?: HelpIssueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HelpIssueCountAggregateInputType | true
    _avg?: HelpIssueAvgAggregateInputType
    _sum?: HelpIssueSumAggregateInputType
    _min?: HelpIssueMinAggregateInputType
    _max?: HelpIssueMaxAggregateInputType
  }

  export type HelpIssueGroupByOutputType = {
    id: number
    created_at: Date
    updated_at: Date
    author_id: number
    votes: number
    views: number
    subject: string
    content: string
    status: $Enums.IssueStatus
    _count: HelpIssueCountAggregateOutputType | null
    _avg: HelpIssueAvgAggregateOutputType | null
    _sum: HelpIssueSumAggregateOutputType | null
    _min: HelpIssueMinAggregateOutputType | null
    _max: HelpIssueMaxAggregateOutputType | null
  }

  type GetHelpIssueGroupByPayload<T extends HelpIssueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HelpIssueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HelpIssueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HelpIssueGroupByOutputType[P]>
            : GetScalarType<T[P], HelpIssueGroupByOutputType[P]>
        }
      >
    >


  export type HelpIssueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    author_id?: boolean
    votes?: boolean
    views?: boolean
    subject?: boolean
    content?: boolean
    status?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    tags?: boolean | HelpIssue$tagsArgs<ExtArgs>
    _count?: boolean | HelpIssueCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["helpIssue"]>


  export type HelpIssueSelectScalar = {
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    author_id?: boolean
    votes?: boolean
    views?: boolean
    subject?: boolean
    content?: boolean
    status?: boolean
  }

  export type HelpIssueInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    tags?: boolean | HelpIssue$tagsArgs<ExtArgs>
    _count?: boolean | HelpIssueCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $HelpIssuePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HelpIssue"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      tags: Prisma.$TagsByIssuesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      created_at: Date
      updated_at: Date
      author_id: number
      votes: number
      views: number
      subject: string
      content: string
      status: $Enums.IssueStatus
    }, ExtArgs["result"]["helpIssue"]>
    composites: {}
  }

  type HelpIssueGetPayload<S extends boolean | null | undefined | HelpIssueDefaultArgs> = $Result.GetResult<Prisma.$HelpIssuePayload, S>

  type HelpIssueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HelpIssueFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HelpIssueCountAggregateInputType | true
    }

  export interface HelpIssueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HelpIssue'], meta: { name: 'HelpIssue' } }
    /**
     * Find zero or one HelpIssue that matches the filter.
     * @param {HelpIssueFindUniqueArgs} args - Arguments to find a HelpIssue
     * @example
     * // Get one HelpIssue
     * const helpIssue = await prisma.helpIssue.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HelpIssueFindUniqueArgs>(args: SelectSubset<T, HelpIssueFindUniqueArgs<ExtArgs>>): Prisma__HelpIssueClient<$Result.GetResult<Prisma.$HelpIssuePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one HelpIssue that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HelpIssueFindUniqueOrThrowArgs} args - Arguments to find a HelpIssue
     * @example
     * // Get one HelpIssue
     * const helpIssue = await prisma.helpIssue.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HelpIssueFindUniqueOrThrowArgs>(args: SelectSubset<T, HelpIssueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HelpIssueClient<$Result.GetResult<Prisma.$HelpIssuePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first HelpIssue that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HelpIssueFindFirstArgs} args - Arguments to find a HelpIssue
     * @example
     * // Get one HelpIssue
     * const helpIssue = await prisma.helpIssue.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HelpIssueFindFirstArgs>(args?: SelectSubset<T, HelpIssueFindFirstArgs<ExtArgs>>): Prisma__HelpIssueClient<$Result.GetResult<Prisma.$HelpIssuePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first HelpIssue that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HelpIssueFindFirstOrThrowArgs} args - Arguments to find a HelpIssue
     * @example
     * // Get one HelpIssue
     * const helpIssue = await prisma.helpIssue.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HelpIssueFindFirstOrThrowArgs>(args?: SelectSubset<T, HelpIssueFindFirstOrThrowArgs<ExtArgs>>): Prisma__HelpIssueClient<$Result.GetResult<Prisma.$HelpIssuePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more HelpIssues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HelpIssueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HelpIssues
     * const helpIssues = await prisma.helpIssue.findMany()
     * 
     * // Get first 10 HelpIssues
     * const helpIssues = await prisma.helpIssue.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const helpIssueWithIdOnly = await prisma.helpIssue.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HelpIssueFindManyArgs>(args?: SelectSubset<T, HelpIssueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HelpIssuePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a HelpIssue.
     * @param {HelpIssueCreateArgs} args - Arguments to create a HelpIssue.
     * @example
     * // Create one HelpIssue
     * const HelpIssue = await prisma.helpIssue.create({
     *   data: {
     *     // ... data to create a HelpIssue
     *   }
     * })
     * 
     */
    create<T extends HelpIssueCreateArgs>(args: SelectSubset<T, HelpIssueCreateArgs<ExtArgs>>): Prisma__HelpIssueClient<$Result.GetResult<Prisma.$HelpIssuePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many HelpIssues.
     * @param {HelpIssueCreateManyArgs} args - Arguments to create many HelpIssues.
     * @example
     * // Create many HelpIssues
     * const helpIssue = await prisma.helpIssue.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HelpIssueCreateManyArgs>(args?: SelectSubset<T, HelpIssueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a HelpIssue.
     * @param {HelpIssueDeleteArgs} args - Arguments to delete one HelpIssue.
     * @example
     * // Delete one HelpIssue
     * const HelpIssue = await prisma.helpIssue.delete({
     *   where: {
     *     // ... filter to delete one HelpIssue
     *   }
     * })
     * 
     */
    delete<T extends HelpIssueDeleteArgs>(args: SelectSubset<T, HelpIssueDeleteArgs<ExtArgs>>): Prisma__HelpIssueClient<$Result.GetResult<Prisma.$HelpIssuePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one HelpIssue.
     * @param {HelpIssueUpdateArgs} args - Arguments to update one HelpIssue.
     * @example
     * // Update one HelpIssue
     * const helpIssue = await prisma.helpIssue.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HelpIssueUpdateArgs>(args: SelectSubset<T, HelpIssueUpdateArgs<ExtArgs>>): Prisma__HelpIssueClient<$Result.GetResult<Prisma.$HelpIssuePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more HelpIssues.
     * @param {HelpIssueDeleteManyArgs} args - Arguments to filter HelpIssues to delete.
     * @example
     * // Delete a few HelpIssues
     * const { count } = await prisma.helpIssue.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HelpIssueDeleteManyArgs>(args?: SelectSubset<T, HelpIssueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HelpIssues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HelpIssueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HelpIssues
     * const helpIssue = await prisma.helpIssue.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HelpIssueUpdateManyArgs>(args: SelectSubset<T, HelpIssueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HelpIssue.
     * @param {HelpIssueUpsertArgs} args - Arguments to update or create a HelpIssue.
     * @example
     * // Update or create a HelpIssue
     * const helpIssue = await prisma.helpIssue.upsert({
     *   create: {
     *     // ... data to create a HelpIssue
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HelpIssue we want to update
     *   }
     * })
     */
    upsert<T extends HelpIssueUpsertArgs>(args: SelectSubset<T, HelpIssueUpsertArgs<ExtArgs>>): Prisma__HelpIssueClient<$Result.GetResult<Prisma.$HelpIssuePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of HelpIssues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HelpIssueCountArgs} args - Arguments to filter HelpIssues to count.
     * @example
     * // Count the number of HelpIssues
     * const count = await prisma.helpIssue.count({
     *   where: {
     *     // ... the filter for the HelpIssues we want to count
     *   }
     * })
    **/
    count<T extends HelpIssueCountArgs>(
      args?: Subset<T, HelpIssueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HelpIssueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HelpIssue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HelpIssueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HelpIssueAggregateArgs>(args: Subset<T, HelpIssueAggregateArgs>): Prisma.PrismaPromise<GetHelpIssueAggregateType<T>>

    /**
     * Group by HelpIssue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HelpIssueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HelpIssueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HelpIssueGroupByArgs['orderBy'] }
        : { orderBy?: HelpIssueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HelpIssueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHelpIssueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HelpIssue model
   */
  readonly fields: HelpIssueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HelpIssue.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HelpIssueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tags<T extends HelpIssue$tagsArgs<ExtArgs> = {}>(args?: Subset<T, HelpIssue$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagsByIssuesPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HelpIssue model
   */ 
  interface HelpIssueFieldRefs {
    readonly id: FieldRef<"HelpIssue", 'Int'>
    readonly created_at: FieldRef<"HelpIssue", 'DateTime'>
    readonly updated_at: FieldRef<"HelpIssue", 'DateTime'>
    readonly author_id: FieldRef<"HelpIssue", 'Int'>
    readonly votes: FieldRef<"HelpIssue", 'Int'>
    readonly views: FieldRef<"HelpIssue", 'Int'>
    readonly subject: FieldRef<"HelpIssue", 'String'>
    readonly content: FieldRef<"HelpIssue", 'String'>
    readonly status: FieldRef<"HelpIssue", 'IssueStatus'>
  }
    

  // Custom InputTypes
  /**
   * HelpIssue findUnique
   */
  export type HelpIssueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HelpIssue
     */
    select?: HelpIssueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HelpIssueInclude<ExtArgs> | null
    /**
     * Filter, which HelpIssue to fetch.
     */
    where: HelpIssueWhereUniqueInput
  }

  /**
   * HelpIssue findUniqueOrThrow
   */
  export type HelpIssueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HelpIssue
     */
    select?: HelpIssueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HelpIssueInclude<ExtArgs> | null
    /**
     * Filter, which HelpIssue to fetch.
     */
    where: HelpIssueWhereUniqueInput
  }

  /**
   * HelpIssue findFirst
   */
  export type HelpIssueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HelpIssue
     */
    select?: HelpIssueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HelpIssueInclude<ExtArgs> | null
    /**
     * Filter, which HelpIssue to fetch.
     */
    where?: HelpIssueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HelpIssues to fetch.
     */
    orderBy?: HelpIssueOrderByWithRelationInput | HelpIssueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HelpIssues.
     */
    cursor?: HelpIssueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HelpIssues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HelpIssues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HelpIssues.
     */
    distinct?: HelpIssueScalarFieldEnum | HelpIssueScalarFieldEnum[]
  }

  /**
   * HelpIssue findFirstOrThrow
   */
  export type HelpIssueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HelpIssue
     */
    select?: HelpIssueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HelpIssueInclude<ExtArgs> | null
    /**
     * Filter, which HelpIssue to fetch.
     */
    where?: HelpIssueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HelpIssues to fetch.
     */
    orderBy?: HelpIssueOrderByWithRelationInput | HelpIssueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HelpIssues.
     */
    cursor?: HelpIssueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HelpIssues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HelpIssues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HelpIssues.
     */
    distinct?: HelpIssueScalarFieldEnum | HelpIssueScalarFieldEnum[]
  }

  /**
   * HelpIssue findMany
   */
  export type HelpIssueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HelpIssue
     */
    select?: HelpIssueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HelpIssueInclude<ExtArgs> | null
    /**
     * Filter, which HelpIssues to fetch.
     */
    where?: HelpIssueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HelpIssues to fetch.
     */
    orderBy?: HelpIssueOrderByWithRelationInput | HelpIssueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HelpIssues.
     */
    cursor?: HelpIssueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HelpIssues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HelpIssues.
     */
    skip?: number
    distinct?: HelpIssueScalarFieldEnum | HelpIssueScalarFieldEnum[]
  }

  /**
   * HelpIssue create
   */
  export type HelpIssueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HelpIssue
     */
    select?: HelpIssueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HelpIssueInclude<ExtArgs> | null
    /**
     * The data needed to create a HelpIssue.
     */
    data: XOR<HelpIssueCreateInput, HelpIssueUncheckedCreateInput>
  }

  /**
   * HelpIssue createMany
   */
  export type HelpIssueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HelpIssues.
     */
    data: HelpIssueCreateManyInput | HelpIssueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HelpIssue update
   */
  export type HelpIssueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HelpIssue
     */
    select?: HelpIssueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HelpIssueInclude<ExtArgs> | null
    /**
     * The data needed to update a HelpIssue.
     */
    data: XOR<HelpIssueUpdateInput, HelpIssueUncheckedUpdateInput>
    /**
     * Choose, which HelpIssue to update.
     */
    where: HelpIssueWhereUniqueInput
  }

  /**
   * HelpIssue updateMany
   */
  export type HelpIssueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HelpIssues.
     */
    data: XOR<HelpIssueUpdateManyMutationInput, HelpIssueUncheckedUpdateManyInput>
    /**
     * Filter which HelpIssues to update
     */
    where?: HelpIssueWhereInput
  }

  /**
   * HelpIssue upsert
   */
  export type HelpIssueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HelpIssue
     */
    select?: HelpIssueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HelpIssueInclude<ExtArgs> | null
    /**
     * The filter to search for the HelpIssue to update in case it exists.
     */
    where: HelpIssueWhereUniqueInput
    /**
     * In case the HelpIssue found by the `where` argument doesn't exist, create a new HelpIssue with this data.
     */
    create: XOR<HelpIssueCreateInput, HelpIssueUncheckedCreateInput>
    /**
     * In case the HelpIssue was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HelpIssueUpdateInput, HelpIssueUncheckedUpdateInput>
  }

  /**
   * HelpIssue delete
   */
  export type HelpIssueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HelpIssue
     */
    select?: HelpIssueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HelpIssueInclude<ExtArgs> | null
    /**
     * Filter which HelpIssue to delete.
     */
    where: HelpIssueWhereUniqueInput
  }

  /**
   * HelpIssue deleteMany
   */
  export type HelpIssueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HelpIssues to delete
     */
    where?: HelpIssueWhereInput
  }

  /**
   * HelpIssue.tags
   */
  export type HelpIssue$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByIssues
     */
    select?: TagsByIssuesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByIssuesInclude<ExtArgs> | null
    where?: TagsByIssuesWhereInput
    orderBy?: TagsByIssuesOrderByWithRelationInput | TagsByIssuesOrderByWithRelationInput[]
    cursor?: TagsByIssuesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagsByIssuesScalarFieldEnum | TagsByIssuesScalarFieldEnum[]
  }

  /**
   * HelpIssue without action
   */
  export type HelpIssueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HelpIssue
     */
    select?: HelpIssueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HelpIssueInclude<ExtArgs> | null
  }


  /**
   * Model Solution
   */

  export type AggregateSolution = {
    _count: SolutionCountAggregateOutputType | null
    _avg: SolutionAvgAggregateOutputType | null
    _sum: SolutionSumAggregateOutputType | null
    _min: SolutionMinAggregateOutputType | null
    _max: SolutionMaxAggregateOutputType | null
  }

  export type SolutionAvgAggregateOutputType = {
    id: number | null
    author_id: number | null
    challenge_id: number | null
    votes: number | null
    views: number | null
  }

  export type SolutionSumAggregateOutputType = {
    id: number | null
    author_id: number | null
    challenge_id: number | null
    votes: number | null
    views: number | null
  }

  export type SolutionMinAggregateOutputType = {
    id: number | null
    created_at: Date | null
    updated_at: Date | null
    author_id: number | null
    challenge_id: number | null
    votes: number | null
    views: number | null
    subject: string | null
    description: string | null
    code: string | null
    verified: boolean | null
  }

  export type SolutionMaxAggregateOutputType = {
    id: number | null
    created_at: Date | null
    updated_at: Date | null
    author_id: number | null
    challenge_id: number | null
    votes: number | null
    views: number | null
    subject: string | null
    description: string | null
    code: string | null
    verified: boolean | null
  }

  export type SolutionCountAggregateOutputType = {
    id: number
    created_at: number
    updated_at: number
    author_id: number
    challenge_id: number
    votes: number
    views: number
    subject: number
    description: number
    code: number
    verified: number
    _all: number
  }


  export type SolutionAvgAggregateInputType = {
    id?: true
    author_id?: true
    challenge_id?: true
    votes?: true
    views?: true
  }

  export type SolutionSumAggregateInputType = {
    id?: true
    author_id?: true
    challenge_id?: true
    votes?: true
    views?: true
  }

  export type SolutionMinAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    author_id?: true
    challenge_id?: true
    votes?: true
    views?: true
    subject?: true
    description?: true
    code?: true
    verified?: true
  }

  export type SolutionMaxAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    author_id?: true
    challenge_id?: true
    votes?: true
    views?: true
    subject?: true
    description?: true
    code?: true
    verified?: true
  }

  export type SolutionCountAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    author_id?: true
    challenge_id?: true
    votes?: true
    views?: true
    subject?: true
    description?: true
    code?: true
    verified?: true
    _all?: true
  }

  export type SolutionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Solution to aggregate.
     */
    where?: SolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Solutions to fetch.
     */
    orderBy?: SolutionOrderByWithRelationInput | SolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Solutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Solutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Solutions
    **/
    _count?: true | SolutionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SolutionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SolutionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SolutionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SolutionMaxAggregateInputType
  }

  export type GetSolutionAggregateType<T extends SolutionAggregateArgs> = {
        [P in keyof T & keyof AggregateSolution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSolution[P]>
      : GetScalarType<T[P], AggregateSolution[P]>
  }




  export type SolutionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SolutionWhereInput
    orderBy?: SolutionOrderByWithAggregationInput | SolutionOrderByWithAggregationInput[]
    by: SolutionScalarFieldEnum[] | SolutionScalarFieldEnum
    having?: SolutionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SolutionCountAggregateInputType | true
    _avg?: SolutionAvgAggregateInputType
    _sum?: SolutionSumAggregateInputType
    _min?: SolutionMinAggregateInputType
    _max?: SolutionMaxAggregateInputType
  }

  export type SolutionGroupByOutputType = {
    id: number
    created_at: Date
    updated_at: Date
    author_id: number
    challenge_id: number
    votes: number
    views: number
    subject: string
    description: string
    code: string
    verified: boolean
    _count: SolutionCountAggregateOutputType | null
    _avg: SolutionAvgAggregateOutputType | null
    _sum: SolutionSumAggregateOutputType | null
    _min: SolutionMinAggregateOutputType | null
    _max: SolutionMaxAggregateOutputType | null
  }

  type GetSolutionGroupByPayload<T extends SolutionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SolutionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SolutionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SolutionGroupByOutputType[P]>
            : GetScalarType<T[P], SolutionGroupByOutputType[P]>
        }
      >
    >


  export type SolutionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    author_id?: boolean
    challenge_id?: boolean
    votes?: boolean
    views?: boolean
    subject?: boolean
    description?: boolean
    code?: boolean
    verified?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    challenge?: boolean | ChallengeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["solution"]>


  export type SolutionSelectScalar = {
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    author_id?: boolean
    challenge_id?: boolean
    votes?: boolean
    views?: boolean
    subject?: boolean
    description?: boolean
    code?: boolean
    verified?: boolean
  }

  export type SolutionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    challenge?: boolean | ChallengeDefaultArgs<ExtArgs>
  }

  export type $SolutionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Solution"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      challenge: Prisma.$ChallengePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      created_at: Date
      updated_at: Date
      author_id: number
      challenge_id: number
      votes: number
      views: number
      subject: string
      description: string
      code: string
      verified: boolean
    }, ExtArgs["result"]["solution"]>
    composites: {}
  }

  type SolutionGetPayload<S extends boolean | null | undefined | SolutionDefaultArgs> = $Result.GetResult<Prisma.$SolutionPayload, S>

  type SolutionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SolutionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SolutionCountAggregateInputType | true
    }

  export interface SolutionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Solution'], meta: { name: 'Solution' } }
    /**
     * Find zero or one Solution that matches the filter.
     * @param {SolutionFindUniqueArgs} args - Arguments to find a Solution
     * @example
     * // Get one Solution
     * const solution = await prisma.solution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SolutionFindUniqueArgs>(args: SelectSubset<T, SolutionFindUniqueArgs<ExtArgs>>): Prisma__SolutionClient<$Result.GetResult<Prisma.$SolutionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Solution that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SolutionFindUniqueOrThrowArgs} args - Arguments to find a Solution
     * @example
     * // Get one Solution
     * const solution = await prisma.solution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SolutionFindUniqueOrThrowArgs>(args: SelectSubset<T, SolutionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SolutionClient<$Result.GetResult<Prisma.$SolutionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Solution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolutionFindFirstArgs} args - Arguments to find a Solution
     * @example
     * // Get one Solution
     * const solution = await prisma.solution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SolutionFindFirstArgs>(args?: SelectSubset<T, SolutionFindFirstArgs<ExtArgs>>): Prisma__SolutionClient<$Result.GetResult<Prisma.$SolutionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Solution that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolutionFindFirstOrThrowArgs} args - Arguments to find a Solution
     * @example
     * // Get one Solution
     * const solution = await prisma.solution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SolutionFindFirstOrThrowArgs>(args?: SelectSubset<T, SolutionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SolutionClient<$Result.GetResult<Prisma.$SolutionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Solutions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolutionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Solutions
     * const solutions = await prisma.solution.findMany()
     * 
     * // Get first 10 Solutions
     * const solutions = await prisma.solution.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const solutionWithIdOnly = await prisma.solution.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SolutionFindManyArgs>(args?: SelectSubset<T, SolutionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SolutionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Solution.
     * @param {SolutionCreateArgs} args - Arguments to create a Solution.
     * @example
     * // Create one Solution
     * const Solution = await prisma.solution.create({
     *   data: {
     *     // ... data to create a Solution
     *   }
     * })
     * 
     */
    create<T extends SolutionCreateArgs>(args: SelectSubset<T, SolutionCreateArgs<ExtArgs>>): Prisma__SolutionClient<$Result.GetResult<Prisma.$SolutionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Solutions.
     * @param {SolutionCreateManyArgs} args - Arguments to create many Solutions.
     * @example
     * // Create many Solutions
     * const solution = await prisma.solution.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SolutionCreateManyArgs>(args?: SelectSubset<T, SolutionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Solution.
     * @param {SolutionDeleteArgs} args - Arguments to delete one Solution.
     * @example
     * // Delete one Solution
     * const Solution = await prisma.solution.delete({
     *   where: {
     *     // ... filter to delete one Solution
     *   }
     * })
     * 
     */
    delete<T extends SolutionDeleteArgs>(args: SelectSubset<T, SolutionDeleteArgs<ExtArgs>>): Prisma__SolutionClient<$Result.GetResult<Prisma.$SolutionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Solution.
     * @param {SolutionUpdateArgs} args - Arguments to update one Solution.
     * @example
     * // Update one Solution
     * const solution = await prisma.solution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SolutionUpdateArgs>(args: SelectSubset<T, SolutionUpdateArgs<ExtArgs>>): Prisma__SolutionClient<$Result.GetResult<Prisma.$SolutionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Solutions.
     * @param {SolutionDeleteManyArgs} args - Arguments to filter Solutions to delete.
     * @example
     * // Delete a few Solutions
     * const { count } = await prisma.solution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SolutionDeleteManyArgs>(args?: SelectSubset<T, SolutionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Solutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolutionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Solutions
     * const solution = await prisma.solution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SolutionUpdateManyArgs>(args: SelectSubset<T, SolutionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Solution.
     * @param {SolutionUpsertArgs} args - Arguments to update or create a Solution.
     * @example
     * // Update or create a Solution
     * const solution = await prisma.solution.upsert({
     *   create: {
     *     // ... data to create a Solution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Solution we want to update
     *   }
     * })
     */
    upsert<T extends SolutionUpsertArgs>(args: SelectSubset<T, SolutionUpsertArgs<ExtArgs>>): Prisma__SolutionClient<$Result.GetResult<Prisma.$SolutionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Solutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolutionCountArgs} args - Arguments to filter Solutions to count.
     * @example
     * // Count the number of Solutions
     * const count = await prisma.solution.count({
     *   where: {
     *     // ... the filter for the Solutions we want to count
     *   }
     * })
    **/
    count<T extends SolutionCountArgs>(
      args?: Subset<T, SolutionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SolutionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Solution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolutionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SolutionAggregateArgs>(args: Subset<T, SolutionAggregateArgs>): Prisma.PrismaPromise<GetSolutionAggregateType<T>>

    /**
     * Group by Solution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolutionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SolutionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SolutionGroupByArgs['orderBy'] }
        : { orderBy?: SolutionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SolutionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSolutionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Solution model
   */
  readonly fields: SolutionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Solution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SolutionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    challenge<T extends ChallengeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChallengeDefaultArgs<ExtArgs>>): Prisma__ChallengeClient<$Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Solution model
   */ 
  interface SolutionFieldRefs {
    readonly id: FieldRef<"Solution", 'Int'>
    readonly created_at: FieldRef<"Solution", 'DateTime'>
    readonly updated_at: FieldRef<"Solution", 'DateTime'>
    readonly author_id: FieldRef<"Solution", 'Int'>
    readonly challenge_id: FieldRef<"Solution", 'Int'>
    readonly votes: FieldRef<"Solution", 'Int'>
    readonly views: FieldRef<"Solution", 'Int'>
    readonly subject: FieldRef<"Solution", 'String'>
    readonly description: FieldRef<"Solution", 'String'>
    readonly code: FieldRef<"Solution", 'String'>
    readonly verified: FieldRef<"Solution", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Solution findUnique
   */
  export type SolutionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solution
     */
    select?: SolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolutionInclude<ExtArgs> | null
    /**
     * Filter, which Solution to fetch.
     */
    where: SolutionWhereUniqueInput
  }

  /**
   * Solution findUniqueOrThrow
   */
  export type SolutionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solution
     */
    select?: SolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolutionInclude<ExtArgs> | null
    /**
     * Filter, which Solution to fetch.
     */
    where: SolutionWhereUniqueInput
  }

  /**
   * Solution findFirst
   */
  export type SolutionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solution
     */
    select?: SolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolutionInclude<ExtArgs> | null
    /**
     * Filter, which Solution to fetch.
     */
    where?: SolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Solutions to fetch.
     */
    orderBy?: SolutionOrderByWithRelationInput | SolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Solutions.
     */
    cursor?: SolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Solutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Solutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Solutions.
     */
    distinct?: SolutionScalarFieldEnum | SolutionScalarFieldEnum[]
  }

  /**
   * Solution findFirstOrThrow
   */
  export type SolutionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solution
     */
    select?: SolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolutionInclude<ExtArgs> | null
    /**
     * Filter, which Solution to fetch.
     */
    where?: SolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Solutions to fetch.
     */
    orderBy?: SolutionOrderByWithRelationInput | SolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Solutions.
     */
    cursor?: SolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Solutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Solutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Solutions.
     */
    distinct?: SolutionScalarFieldEnum | SolutionScalarFieldEnum[]
  }

  /**
   * Solution findMany
   */
  export type SolutionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solution
     */
    select?: SolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolutionInclude<ExtArgs> | null
    /**
     * Filter, which Solutions to fetch.
     */
    where?: SolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Solutions to fetch.
     */
    orderBy?: SolutionOrderByWithRelationInput | SolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Solutions.
     */
    cursor?: SolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Solutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Solutions.
     */
    skip?: number
    distinct?: SolutionScalarFieldEnum | SolutionScalarFieldEnum[]
  }

  /**
   * Solution create
   */
  export type SolutionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solution
     */
    select?: SolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolutionInclude<ExtArgs> | null
    /**
     * The data needed to create a Solution.
     */
    data: XOR<SolutionCreateInput, SolutionUncheckedCreateInput>
  }

  /**
   * Solution createMany
   */
  export type SolutionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Solutions.
     */
    data: SolutionCreateManyInput | SolutionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Solution update
   */
  export type SolutionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solution
     */
    select?: SolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolutionInclude<ExtArgs> | null
    /**
     * The data needed to update a Solution.
     */
    data: XOR<SolutionUpdateInput, SolutionUncheckedUpdateInput>
    /**
     * Choose, which Solution to update.
     */
    where: SolutionWhereUniqueInput
  }

  /**
   * Solution updateMany
   */
  export type SolutionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Solutions.
     */
    data: XOR<SolutionUpdateManyMutationInput, SolutionUncheckedUpdateManyInput>
    /**
     * Filter which Solutions to update
     */
    where?: SolutionWhereInput
  }

  /**
   * Solution upsert
   */
  export type SolutionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solution
     */
    select?: SolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolutionInclude<ExtArgs> | null
    /**
     * The filter to search for the Solution to update in case it exists.
     */
    where: SolutionWhereUniqueInput
    /**
     * In case the Solution found by the `where` argument doesn't exist, create a new Solution with this data.
     */
    create: XOR<SolutionCreateInput, SolutionUncheckedCreateInput>
    /**
     * In case the Solution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SolutionUpdateInput, SolutionUncheckedUpdateInput>
  }

  /**
   * Solution delete
   */
  export type SolutionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solution
     */
    select?: SolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolutionInclude<ExtArgs> | null
    /**
     * Filter which Solution to delete.
     */
    where: SolutionWhereUniqueInput
  }

  /**
   * Solution deleteMany
   */
  export type SolutionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Solutions to delete
     */
    where?: SolutionWhereInput
  }

  /**
   * Solution without action
   */
  export type SolutionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solution
     */
    select?: SolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolutionInclude<ExtArgs> | null
  }


  /**
   * Model Tag
   */

  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _avg: TagAvgAggregateOutputType | null
    _sum: TagSumAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagAvgAggregateOutputType = {
    id: number | null
  }

  export type TagSumAggregateOutputType = {
    id: number | null
  }

  export type TagMinAggregateOutputType = {
    id: number | null
    tag: string | null
  }

  export type TagMaxAggregateOutputType = {
    id: number | null
    tag: string | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    tag: number
    _all: number
  }


  export type TagAvgAggregateInputType = {
    id?: true
  }

  export type TagSumAggregateInputType = {
    id?: true
  }

  export type TagMinAggregateInputType = {
    id?: true
    tag?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    tag?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    tag?: true
    _all?: true
  }

  export type TagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tag to aggregate.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
    orderBy?: TagOrderByWithAggregationInput | TagOrderByWithAggregationInput[]
    by: TagScalarFieldEnum[] | TagScalarFieldEnum
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _avg?: TagAvgAggregateInputType
    _sum?: TagSumAggregateInputType
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }

  export type TagGroupByOutputType = {
    id: number
    tag: string
    _count: TagCountAggregateOutputType | null
    _avg: TagAvgAggregateOutputType | null
    _sum: TagSumAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tag?: boolean
    challenges?: boolean | Tag$challengesArgs<ExtArgs>
    issues?: boolean | Tag$issuesArgs<ExtArgs>
    resources?: boolean | Tag$resourcesArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>


  export type TagSelectScalar = {
    id?: boolean
    tag?: boolean
  }

  export type TagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    challenges?: boolean | Tag$challengesArgs<ExtArgs>
    issues?: boolean | Tag$issuesArgs<ExtArgs>
    resources?: boolean | Tag$resourcesArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tag"
    objects: {
      challenges: Prisma.$TagsByChallengesPayload<ExtArgs>[]
      issues: Prisma.$TagsByIssuesPayload<ExtArgs>[]
      resources: Prisma.$TagsByResourcesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tag: string
    }, ExtArgs["result"]["tag"]>
    composites: {}
  }

  type TagGetPayload<S extends boolean | null | undefined | TagDefaultArgs> = $Result.GetResult<Prisma.$TagPayload, S>

  type TagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TagCountAggregateInputType | true
    }

  export interface TagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag'], meta: { name: 'Tag' } }
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagFindUniqueArgs>(args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tag that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs>(args: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagFindFirstArgs>(args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs>(args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TagFindManyArgs>(args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
     */
    create<T extends TagCreateArgs>(args: SelectSubset<T, TagCreateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tags.
     * @param {TagCreateManyArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagCreateManyArgs>(args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
     */
    delete<T extends TagDeleteArgs>(args: SelectSubset<T, TagDeleteArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagUpdateArgs>(args: SelectSubset<T, TagUpdateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagDeleteManyArgs>(args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagUpdateManyArgs>(args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
     */
    upsert<T extends TagUpsertArgs>(args: SelectSubset<T, TagUpsertArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): Prisma.PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tag model
   */
  readonly fields: TagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    challenges<T extends Tag$challengesArgs<ExtArgs> = {}>(args?: Subset<T, Tag$challengesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagsByChallengesPayload<ExtArgs>, T, "findMany"> | Null>
    issues<T extends Tag$issuesArgs<ExtArgs> = {}>(args?: Subset<T, Tag$issuesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagsByIssuesPayload<ExtArgs>, T, "findMany"> | Null>
    resources<T extends Tag$resourcesArgs<ExtArgs> = {}>(args?: Subset<T, Tag$resourcesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagsByResourcesPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tag model
   */ 
  interface TagFieldRefs {
    readonly id: FieldRef<"Tag", 'Int'>
    readonly tag: FieldRef<"Tag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }

  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
  }

  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }

  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput
  }

  /**
   * Tag.challenges
   */
  export type Tag$challengesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByChallenges
     */
    select?: TagsByChallengesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByChallengesInclude<ExtArgs> | null
    where?: TagsByChallengesWhereInput
    orderBy?: TagsByChallengesOrderByWithRelationInput | TagsByChallengesOrderByWithRelationInput[]
    cursor?: TagsByChallengesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagsByChallengesScalarFieldEnum | TagsByChallengesScalarFieldEnum[]
  }

  /**
   * Tag.issues
   */
  export type Tag$issuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByIssues
     */
    select?: TagsByIssuesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByIssuesInclude<ExtArgs> | null
    where?: TagsByIssuesWhereInput
    orderBy?: TagsByIssuesOrderByWithRelationInput | TagsByIssuesOrderByWithRelationInput[]
    cursor?: TagsByIssuesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagsByIssuesScalarFieldEnum | TagsByIssuesScalarFieldEnum[]
  }

  /**
   * Tag.resources
   */
  export type Tag$resourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByResources
     */
    select?: TagsByResourcesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByResourcesInclude<ExtArgs> | null
    where?: TagsByResourcesWhereInput
    orderBy?: TagsByResourcesOrderByWithRelationInput | TagsByResourcesOrderByWithRelationInput[]
    cursor?: TagsByResourcesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagsByResourcesScalarFieldEnum | TagsByResourcesScalarFieldEnum[]
  }

  /**
   * Tag without action
   */
  export type TagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
  }


  /**
   * Model TagsByChallenges
   */

  export type AggregateTagsByChallenges = {
    _count: TagsByChallengesCountAggregateOutputType | null
    _avg: TagsByChallengesAvgAggregateOutputType | null
    _sum: TagsByChallengesSumAggregateOutputType | null
    _min: TagsByChallengesMinAggregateOutputType | null
    _max: TagsByChallengesMaxAggregateOutputType | null
  }

  export type TagsByChallengesAvgAggregateOutputType = {
    challenge_id: number | null
    tag_id: number | null
  }

  export type TagsByChallengesSumAggregateOutputType = {
    challenge_id: number | null
    tag_id: number | null
  }

  export type TagsByChallengesMinAggregateOutputType = {
    challenge_id: number | null
    tag_id: number | null
  }

  export type TagsByChallengesMaxAggregateOutputType = {
    challenge_id: number | null
    tag_id: number | null
  }

  export type TagsByChallengesCountAggregateOutputType = {
    challenge_id: number
    tag_id: number
    _all: number
  }


  export type TagsByChallengesAvgAggregateInputType = {
    challenge_id?: true
    tag_id?: true
  }

  export type TagsByChallengesSumAggregateInputType = {
    challenge_id?: true
    tag_id?: true
  }

  export type TagsByChallengesMinAggregateInputType = {
    challenge_id?: true
    tag_id?: true
  }

  export type TagsByChallengesMaxAggregateInputType = {
    challenge_id?: true
    tag_id?: true
  }

  export type TagsByChallengesCountAggregateInputType = {
    challenge_id?: true
    tag_id?: true
    _all?: true
  }

  export type TagsByChallengesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TagsByChallenges to aggregate.
     */
    where?: TagsByChallengesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagsByChallenges to fetch.
     */
    orderBy?: TagsByChallengesOrderByWithRelationInput | TagsByChallengesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagsByChallengesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagsByChallenges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagsByChallenges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TagsByChallenges
    **/
    _count?: true | TagsByChallengesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TagsByChallengesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TagsByChallengesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagsByChallengesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagsByChallengesMaxAggregateInputType
  }

  export type GetTagsByChallengesAggregateType<T extends TagsByChallengesAggregateArgs> = {
        [P in keyof T & keyof AggregateTagsByChallenges]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTagsByChallenges[P]>
      : GetScalarType<T[P], AggregateTagsByChallenges[P]>
  }




  export type TagsByChallengesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagsByChallengesWhereInput
    orderBy?: TagsByChallengesOrderByWithAggregationInput | TagsByChallengesOrderByWithAggregationInput[]
    by: TagsByChallengesScalarFieldEnum[] | TagsByChallengesScalarFieldEnum
    having?: TagsByChallengesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagsByChallengesCountAggregateInputType | true
    _avg?: TagsByChallengesAvgAggregateInputType
    _sum?: TagsByChallengesSumAggregateInputType
    _min?: TagsByChallengesMinAggregateInputType
    _max?: TagsByChallengesMaxAggregateInputType
  }

  export type TagsByChallengesGroupByOutputType = {
    challenge_id: number
    tag_id: number
    _count: TagsByChallengesCountAggregateOutputType | null
    _avg: TagsByChallengesAvgAggregateOutputType | null
    _sum: TagsByChallengesSumAggregateOutputType | null
    _min: TagsByChallengesMinAggregateOutputType | null
    _max: TagsByChallengesMaxAggregateOutputType | null
  }

  type GetTagsByChallengesGroupByPayload<T extends TagsByChallengesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagsByChallengesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagsByChallengesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagsByChallengesGroupByOutputType[P]>
            : GetScalarType<T[P], TagsByChallengesGroupByOutputType[P]>
        }
      >
    >


  export type TagsByChallengesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    challenge_id?: boolean
    tag_id?: boolean
    challenge?: boolean | ChallengeDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tagsByChallenges"]>


  export type TagsByChallengesSelectScalar = {
    challenge_id?: boolean
    tag_id?: boolean
  }

  export type TagsByChallengesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    challenge?: boolean | ChallengeDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }

  export type $TagsByChallengesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TagsByChallenges"
    objects: {
      challenge: Prisma.$ChallengePayload<ExtArgs>
      tag: Prisma.$TagPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      challenge_id: number
      tag_id: number
    }, ExtArgs["result"]["tagsByChallenges"]>
    composites: {}
  }

  type TagsByChallengesGetPayload<S extends boolean | null | undefined | TagsByChallengesDefaultArgs> = $Result.GetResult<Prisma.$TagsByChallengesPayload, S>

  type TagsByChallengesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TagsByChallengesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TagsByChallengesCountAggregateInputType | true
    }

  export interface TagsByChallengesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TagsByChallenges'], meta: { name: 'TagsByChallenges' } }
    /**
     * Find zero or one TagsByChallenges that matches the filter.
     * @param {TagsByChallengesFindUniqueArgs} args - Arguments to find a TagsByChallenges
     * @example
     * // Get one TagsByChallenges
     * const tagsByChallenges = await prisma.tagsByChallenges.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagsByChallengesFindUniqueArgs>(args: SelectSubset<T, TagsByChallengesFindUniqueArgs<ExtArgs>>): Prisma__TagsByChallengesClient<$Result.GetResult<Prisma.$TagsByChallengesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TagsByChallenges that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TagsByChallengesFindUniqueOrThrowArgs} args - Arguments to find a TagsByChallenges
     * @example
     * // Get one TagsByChallenges
     * const tagsByChallenges = await prisma.tagsByChallenges.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagsByChallengesFindUniqueOrThrowArgs>(args: SelectSubset<T, TagsByChallengesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagsByChallengesClient<$Result.GetResult<Prisma.$TagsByChallengesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TagsByChallenges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsByChallengesFindFirstArgs} args - Arguments to find a TagsByChallenges
     * @example
     * // Get one TagsByChallenges
     * const tagsByChallenges = await prisma.tagsByChallenges.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagsByChallengesFindFirstArgs>(args?: SelectSubset<T, TagsByChallengesFindFirstArgs<ExtArgs>>): Prisma__TagsByChallengesClient<$Result.GetResult<Prisma.$TagsByChallengesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TagsByChallenges that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsByChallengesFindFirstOrThrowArgs} args - Arguments to find a TagsByChallenges
     * @example
     * // Get one TagsByChallenges
     * const tagsByChallenges = await prisma.tagsByChallenges.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagsByChallengesFindFirstOrThrowArgs>(args?: SelectSubset<T, TagsByChallengesFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagsByChallengesClient<$Result.GetResult<Prisma.$TagsByChallengesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TagsByChallenges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsByChallengesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TagsByChallenges
     * const tagsByChallenges = await prisma.tagsByChallenges.findMany()
     * 
     * // Get first 10 TagsByChallenges
     * const tagsByChallenges = await prisma.tagsByChallenges.findMany({ take: 10 })
     * 
     * // Only select the `challenge_id`
     * const tagsByChallengesWithChallenge_idOnly = await prisma.tagsByChallenges.findMany({ select: { challenge_id: true } })
     * 
     */
    findMany<T extends TagsByChallengesFindManyArgs>(args?: SelectSubset<T, TagsByChallengesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagsByChallengesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TagsByChallenges.
     * @param {TagsByChallengesCreateArgs} args - Arguments to create a TagsByChallenges.
     * @example
     * // Create one TagsByChallenges
     * const TagsByChallenges = await prisma.tagsByChallenges.create({
     *   data: {
     *     // ... data to create a TagsByChallenges
     *   }
     * })
     * 
     */
    create<T extends TagsByChallengesCreateArgs>(args: SelectSubset<T, TagsByChallengesCreateArgs<ExtArgs>>): Prisma__TagsByChallengesClient<$Result.GetResult<Prisma.$TagsByChallengesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TagsByChallenges.
     * @param {TagsByChallengesCreateManyArgs} args - Arguments to create many TagsByChallenges.
     * @example
     * // Create many TagsByChallenges
     * const tagsByChallenges = await prisma.tagsByChallenges.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagsByChallengesCreateManyArgs>(args?: SelectSubset<T, TagsByChallengesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TagsByChallenges.
     * @param {TagsByChallengesDeleteArgs} args - Arguments to delete one TagsByChallenges.
     * @example
     * // Delete one TagsByChallenges
     * const TagsByChallenges = await prisma.tagsByChallenges.delete({
     *   where: {
     *     // ... filter to delete one TagsByChallenges
     *   }
     * })
     * 
     */
    delete<T extends TagsByChallengesDeleteArgs>(args: SelectSubset<T, TagsByChallengesDeleteArgs<ExtArgs>>): Prisma__TagsByChallengesClient<$Result.GetResult<Prisma.$TagsByChallengesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TagsByChallenges.
     * @param {TagsByChallengesUpdateArgs} args - Arguments to update one TagsByChallenges.
     * @example
     * // Update one TagsByChallenges
     * const tagsByChallenges = await prisma.tagsByChallenges.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagsByChallengesUpdateArgs>(args: SelectSubset<T, TagsByChallengesUpdateArgs<ExtArgs>>): Prisma__TagsByChallengesClient<$Result.GetResult<Prisma.$TagsByChallengesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TagsByChallenges.
     * @param {TagsByChallengesDeleteManyArgs} args - Arguments to filter TagsByChallenges to delete.
     * @example
     * // Delete a few TagsByChallenges
     * const { count } = await prisma.tagsByChallenges.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagsByChallengesDeleteManyArgs>(args?: SelectSubset<T, TagsByChallengesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TagsByChallenges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsByChallengesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TagsByChallenges
     * const tagsByChallenges = await prisma.tagsByChallenges.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagsByChallengesUpdateManyArgs>(args: SelectSubset<T, TagsByChallengesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TagsByChallenges.
     * @param {TagsByChallengesUpsertArgs} args - Arguments to update or create a TagsByChallenges.
     * @example
     * // Update or create a TagsByChallenges
     * const tagsByChallenges = await prisma.tagsByChallenges.upsert({
     *   create: {
     *     // ... data to create a TagsByChallenges
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TagsByChallenges we want to update
     *   }
     * })
     */
    upsert<T extends TagsByChallengesUpsertArgs>(args: SelectSubset<T, TagsByChallengesUpsertArgs<ExtArgs>>): Prisma__TagsByChallengesClient<$Result.GetResult<Prisma.$TagsByChallengesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TagsByChallenges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsByChallengesCountArgs} args - Arguments to filter TagsByChallenges to count.
     * @example
     * // Count the number of TagsByChallenges
     * const count = await prisma.tagsByChallenges.count({
     *   where: {
     *     // ... the filter for the TagsByChallenges we want to count
     *   }
     * })
    **/
    count<T extends TagsByChallengesCountArgs>(
      args?: Subset<T, TagsByChallengesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagsByChallengesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TagsByChallenges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsByChallengesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagsByChallengesAggregateArgs>(args: Subset<T, TagsByChallengesAggregateArgs>): Prisma.PrismaPromise<GetTagsByChallengesAggregateType<T>>

    /**
     * Group by TagsByChallenges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsByChallengesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagsByChallengesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagsByChallengesGroupByArgs['orderBy'] }
        : { orderBy?: TagsByChallengesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagsByChallengesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagsByChallengesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TagsByChallenges model
   */
  readonly fields: TagsByChallengesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TagsByChallenges.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagsByChallengesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    challenge<T extends ChallengeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChallengeDefaultArgs<ExtArgs>>): Prisma__ChallengeClient<$Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tag<T extends TagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagDefaultArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TagsByChallenges model
   */ 
  interface TagsByChallengesFieldRefs {
    readonly challenge_id: FieldRef<"TagsByChallenges", 'Int'>
    readonly tag_id: FieldRef<"TagsByChallenges", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TagsByChallenges findUnique
   */
  export type TagsByChallengesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByChallenges
     */
    select?: TagsByChallengesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByChallengesInclude<ExtArgs> | null
    /**
     * Filter, which TagsByChallenges to fetch.
     */
    where: TagsByChallengesWhereUniqueInput
  }

  /**
   * TagsByChallenges findUniqueOrThrow
   */
  export type TagsByChallengesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByChallenges
     */
    select?: TagsByChallengesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByChallengesInclude<ExtArgs> | null
    /**
     * Filter, which TagsByChallenges to fetch.
     */
    where: TagsByChallengesWhereUniqueInput
  }

  /**
   * TagsByChallenges findFirst
   */
  export type TagsByChallengesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByChallenges
     */
    select?: TagsByChallengesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByChallengesInclude<ExtArgs> | null
    /**
     * Filter, which TagsByChallenges to fetch.
     */
    where?: TagsByChallengesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagsByChallenges to fetch.
     */
    orderBy?: TagsByChallengesOrderByWithRelationInput | TagsByChallengesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TagsByChallenges.
     */
    cursor?: TagsByChallengesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagsByChallenges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagsByChallenges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TagsByChallenges.
     */
    distinct?: TagsByChallengesScalarFieldEnum | TagsByChallengesScalarFieldEnum[]
  }

  /**
   * TagsByChallenges findFirstOrThrow
   */
  export type TagsByChallengesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByChallenges
     */
    select?: TagsByChallengesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByChallengesInclude<ExtArgs> | null
    /**
     * Filter, which TagsByChallenges to fetch.
     */
    where?: TagsByChallengesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagsByChallenges to fetch.
     */
    orderBy?: TagsByChallengesOrderByWithRelationInput | TagsByChallengesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TagsByChallenges.
     */
    cursor?: TagsByChallengesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagsByChallenges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagsByChallenges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TagsByChallenges.
     */
    distinct?: TagsByChallengesScalarFieldEnum | TagsByChallengesScalarFieldEnum[]
  }

  /**
   * TagsByChallenges findMany
   */
  export type TagsByChallengesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByChallenges
     */
    select?: TagsByChallengesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByChallengesInclude<ExtArgs> | null
    /**
     * Filter, which TagsByChallenges to fetch.
     */
    where?: TagsByChallengesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagsByChallenges to fetch.
     */
    orderBy?: TagsByChallengesOrderByWithRelationInput | TagsByChallengesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TagsByChallenges.
     */
    cursor?: TagsByChallengesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagsByChallenges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagsByChallenges.
     */
    skip?: number
    distinct?: TagsByChallengesScalarFieldEnum | TagsByChallengesScalarFieldEnum[]
  }

  /**
   * TagsByChallenges create
   */
  export type TagsByChallengesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByChallenges
     */
    select?: TagsByChallengesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByChallengesInclude<ExtArgs> | null
    /**
     * The data needed to create a TagsByChallenges.
     */
    data: XOR<TagsByChallengesCreateInput, TagsByChallengesUncheckedCreateInput>
  }

  /**
   * TagsByChallenges createMany
   */
  export type TagsByChallengesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TagsByChallenges.
     */
    data: TagsByChallengesCreateManyInput | TagsByChallengesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TagsByChallenges update
   */
  export type TagsByChallengesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByChallenges
     */
    select?: TagsByChallengesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByChallengesInclude<ExtArgs> | null
    /**
     * The data needed to update a TagsByChallenges.
     */
    data: XOR<TagsByChallengesUpdateInput, TagsByChallengesUncheckedUpdateInput>
    /**
     * Choose, which TagsByChallenges to update.
     */
    where: TagsByChallengesWhereUniqueInput
  }

  /**
   * TagsByChallenges updateMany
   */
  export type TagsByChallengesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TagsByChallenges.
     */
    data: XOR<TagsByChallengesUpdateManyMutationInput, TagsByChallengesUncheckedUpdateManyInput>
    /**
     * Filter which TagsByChallenges to update
     */
    where?: TagsByChallengesWhereInput
  }

  /**
   * TagsByChallenges upsert
   */
  export type TagsByChallengesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByChallenges
     */
    select?: TagsByChallengesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByChallengesInclude<ExtArgs> | null
    /**
     * The filter to search for the TagsByChallenges to update in case it exists.
     */
    where: TagsByChallengesWhereUniqueInput
    /**
     * In case the TagsByChallenges found by the `where` argument doesn't exist, create a new TagsByChallenges with this data.
     */
    create: XOR<TagsByChallengesCreateInput, TagsByChallengesUncheckedCreateInput>
    /**
     * In case the TagsByChallenges was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagsByChallengesUpdateInput, TagsByChallengesUncheckedUpdateInput>
  }

  /**
   * TagsByChallenges delete
   */
  export type TagsByChallengesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByChallenges
     */
    select?: TagsByChallengesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByChallengesInclude<ExtArgs> | null
    /**
     * Filter which TagsByChallenges to delete.
     */
    where: TagsByChallengesWhereUniqueInput
  }

  /**
   * TagsByChallenges deleteMany
   */
  export type TagsByChallengesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TagsByChallenges to delete
     */
    where?: TagsByChallengesWhereInput
  }

  /**
   * TagsByChallenges without action
   */
  export type TagsByChallengesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByChallenges
     */
    select?: TagsByChallengesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByChallengesInclude<ExtArgs> | null
  }


  /**
   * Model TagsByIssues
   */

  export type AggregateTagsByIssues = {
    _count: TagsByIssuesCountAggregateOutputType | null
    _avg: TagsByIssuesAvgAggregateOutputType | null
    _sum: TagsByIssuesSumAggregateOutputType | null
    _min: TagsByIssuesMinAggregateOutputType | null
    _max: TagsByIssuesMaxAggregateOutputType | null
  }

  export type TagsByIssuesAvgAggregateOutputType = {
    issue_id: number | null
    tag_id: number | null
  }

  export type TagsByIssuesSumAggregateOutputType = {
    issue_id: number | null
    tag_id: number | null
  }

  export type TagsByIssuesMinAggregateOutputType = {
    issue_id: number | null
    tag_id: number | null
  }

  export type TagsByIssuesMaxAggregateOutputType = {
    issue_id: number | null
    tag_id: number | null
  }

  export type TagsByIssuesCountAggregateOutputType = {
    issue_id: number
    tag_id: number
    _all: number
  }


  export type TagsByIssuesAvgAggregateInputType = {
    issue_id?: true
    tag_id?: true
  }

  export type TagsByIssuesSumAggregateInputType = {
    issue_id?: true
    tag_id?: true
  }

  export type TagsByIssuesMinAggregateInputType = {
    issue_id?: true
    tag_id?: true
  }

  export type TagsByIssuesMaxAggregateInputType = {
    issue_id?: true
    tag_id?: true
  }

  export type TagsByIssuesCountAggregateInputType = {
    issue_id?: true
    tag_id?: true
    _all?: true
  }

  export type TagsByIssuesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TagsByIssues to aggregate.
     */
    where?: TagsByIssuesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagsByIssues to fetch.
     */
    orderBy?: TagsByIssuesOrderByWithRelationInput | TagsByIssuesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagsByIssuesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagsByIssues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagsByIssues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TagsByIssues
    **/
    _count?: true | TagsByIssuesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TagsByIssuesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TagsByIssuesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagsByIssuesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagsByIssuesMaxAggregateInputType
  }

  export type GetTagsByIssuesAggregateType<T extends TagsByIssuesAggregateArgs> = {
        [P in keyof T & keyof AggregateTagsByIssues]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTagsByIssues[P]>
      : GetScalarType<T[P], AggregateTagsByIssues[P]>
  }




  export type TagsByIssuesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagsByIssuesWhereInput
    orderBy?: TagsByIssuesOrderByWithAggregationInput | TagsByIssuesOrderByWithAggregationInput[]
    by: TagsByIssuesScalarFieldEnum[] | TagsByIssuesScalarFieldEnum
    having?: TagsByIssuesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagsByIssuesCountAggregateInputType | true
    _avg?: TagsByIssuesAvgAggregateInputType
    _sum?: TagsByIssuesSumAggregateInputType
    _min?: TagsByIssuesMinAggregateInputType
    _max?: TagsByIssuesMaxAggregateInputType
  }

  export type TagsByIssuesGroupByOutputType = {
    issue_id: number
    tag_id: number
    _count: TagsByIssuesCountAggregateOutputType | null
    _avg: TagsByIssuesAvgAggregateOutputType | null
    _sum: TagsByIssuesSumAggregateOutputType | null
    _min: TagsByIssuesMinAggregateOutputType | null
    _max: TagsByIssuesMaxAggregateOutputType | null
  }

  type GetTagsByIssuesGroupByPayload<T extends TagsByIssuesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagsByIssuesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagsByIssuesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagsByIssuesGroupByOutputType[P]>
            : GetScalarType<T[P], TagsByIssuesGroupByOutputType[P]>
        }
      >
    >


  export type TagsByIssuesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    issue_id?: boolean
    tag_id?: boolean
    issue?: boolean | HelpIssueDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tagsByIssues"]>


  export type TagsByIssuesSelectScalar = {
    issue_id?: boolean
    tag_id?: boolean
  }

  export type TagsByIssuesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    issue?: boolean | HelpIssueDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }

  export type $TagsByIssuesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TagsByIssues"
    objects: {
      issue: Prisma.$HelpIssuePayload<ExtArgs>
      tag: Prisma.$TagPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      issue_id: number
      tag_id: number
    }, ExtArgs["result"]["tagsByIssues"]>
    composites: {}
  }

  type TagsByIssuesGetPayload<S extends boolean | null | undefined | TagsByIssuesDefaultArgs> = $Result.GetResult<Prisma.$TagsByIssuesPayload, S>

  type TagsByIssuesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TagsByIssuesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TagsByIssuesCountAggregateInputType | true
    }

  export interface TagsByIssuesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TagsByIssues'], meta: { name: 'TagsByIssues' } }
    /**
     * Find zero or one TagsByIssues that matches the filter.
     * @param {TagsByIssuesFindUniqueArgs} args - Arguments to find a TagsByIssues
     * @example
     * // Get one TagsByIssues
     * const tagsByIssues = await prisma.tagsByIssues.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagsByIssuesFindUniqueArgs>(args: SelectSubset<T, TagsByIssuesFindUniqueArgs<ExtArgs>>): Prisma__TagsByIssuesClient<$Result.GetResult<Prisma.$TagsByIssuesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TagsByIssues that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TagsByIssuesFindUniqueOrThrowArgs} args - Arguments to find a TagsByIssues
     * @example
     * // Get one TagsByIssues
     * const tagsByIssues = await prisma.tagsByIssues.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagsByIssuesFindUniqueOrThrowArgs>(args: SelectSubset<T, TagsByIssuesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagsByIssuesClient<$Result.GetResult<Prisma.$TagsByIssuesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TagsByIssues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsByIssuesFindFirstArgs} args - Arguments to find a TagsByIssues
     * @example
     * // Get one TagsByIssues
     * const tagsByIssues = await prisma.tagsByIssues.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagsByIssuesFindFirstArgs>(args?: SelectSubset<T, TagsByIssuesFindFirstArgs<ExtArgs>>): Prisma__TagsByIssuesClient<$Result.GetResult<Prisma.$TagsByIssuesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TagsByIssues that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsByIssuesFindFirstOrThrowArgs} args - Arguments to find a TagsByIssues
     * @example
     * // Get one TagsByIssues
     * const tagsByIssues = await prisma.tagsByIssues.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagsByIssuesFindFirstOrThrowArgs>(args?: SelectSubset<T, TagsByIssuesFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagsByIssuesClient<$Result.GetResult<Prisma.$TagsByIssuesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TagsByIssues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsByIssuesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TagsByIssues
     * const tagsByIssues = await prisma.tagsByIssues.findMany()
     * 
     * // Get first 10 TagsByIssues
     * const tagsByIssues = await prisma.tagsByIssues.findMany({ take: 10 })
     * 
     * // Only select the `issue_id`
     * const tagsByIssuesWithIssue_idOnly = await prisma.tagsByIssues.findMany({ select: { issue_id: true } })
     * 
     */
    findMany<T extends TagsByIssuesFindManyArgs>(args?: SelectSubset<T, TagsByIssuesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagsByIssuesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TagsByIssues.
     * @param {TagsByIssuesCreateArgs} args - Arguments to create a TagsByIssues.
     * @example
     * // Create one TagsByIssues
     * const TagsByIssues = await prisma.tagsByIssues.create({
     *   data: {
     *     // ... data to create a TagsByIssues
     *   }
     * })
     * 
     */
    create<T extends TagsByIssuesCreateArgs>(args: SelectSubset<T, TagsByIssuesCreateArgs<ExtArgs>>): Prisma__TagsByIssuesClient<$Result.GetResult<Prisma.$TagsByIssuesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TagsByIssues.
     * @param {TagsByIssuesCreateManyArgs} args - Arguments to create many TagsByIssues.
     * @example
     * // Create many TagsByIssues
     * const tagsByIssues = await prisma.tagsByIssues.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagsByIssuesCreateManyArgs>(args?: SelectSubset<T, TagsByIssuesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TagsByIssues.
     * @param {TagsByIssuesDeleteArgs} args - Arguments to delete one TagsByIssues.
     * @example
     * // Delete one TagsByIssues
     * const TagsByIssues = await prisma.tagsByIssues.delete({
     *   where: {
     *     // ... filter to delete one TagsByIssues
     *   }
     * })
     * 
     */
    delete<T extends TagsByIssuesDeleteArgs>(args: SelectSubset<T, TagsByIssuesDeleteArgs<ExtArgs>>): Prisma__TagsByIssuesClient<$Result.GetResult<Prisma.$TagsByIssuesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TagsByIssues.
     * @param {TagsByIssuesUpdateArgs} args - Arguments to update one TagsByIssues.
     * @example
     * // Update one TagsByIssues
     * const tagsByIssues = await prisma.tagsByIssues.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagsByIssuesUpdateArgs>(args: SelectSubset<T, TagsByIssuesUpdateArgs<ExtArgs>>): Prisma__TagsByIssuesClient<$Result.GetResult<Prisma.$TagsByIssuesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TagsByIssues.
     * @param {TagsByIssuesDeleteManyArgs} args - Arguments to filter TagsByIssues to delete.
     * @example
     * // Delete a few TagsByIssues
     * const { count } = await prisma.tagsByIssues.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagsByIssuesDeleteManyArgs>(args?: SelectSubset<T, TagsByIssuesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TagsByIssues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsByIssuesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TagsByIssues
     * const tagsByIssues = await prisma.tagsByIssues.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagsByIssuesUpdateManyArgs>(args: SelectSubset<T, TagsByIssuesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TagsByIssues.
     * @param {TagsByIssuesUpsertArgs} args - Arguments to update or create a TagsByIssues.
     * @example
     * // Update or create a TagsByIssues
     * const tagsByIssues = await prisma.tagsByIssues.upsert({
     *   create: {
     *     // ... data to create a TagsByIssues
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TagsByIssues we want to update
     *   }
     * })
     */
    upsert<T extends TagsByIssuesUpsertArgs>(args: SelectSubset<T, TagsByIssuesUpsertArgs<ExtArgs>>): Prisma__TagsByIssuesClient<$Result.GetResult<Prisma.$TagsByIssuesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TagsByIssues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsByIssuesCountArgs} args - Arguments to filter TagsByIssues to count.
     * @example
     * // Count the number of TagsByIssues
     * const count = await prisma.tagsByIssues.count({
     *   where: {
     *     // ... the filter for the TagsByIssues we want to count
     *   }
     * })
    **/
    count<T extends TagsByIssuesCountArgs>(
      args?: Subset<T, TagsByIssuesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagsByIssuesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TagsByIssues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsByIssuesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagsByIssuesAggregateArgs>(args: Subset<T, TagsByIssuesAggregateArgs>): Prisma.PrismaPromise<GetTagsByIssuesAggregateType<T>>

    /**
     * Group by TagsByIssues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsByIssuesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagsByIssuesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagsByIssuesGroupByArgs['orderBy'] }
        : { orderBy?: TagsByIssuesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagsByIssuesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagsByIssuesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TagsByIssues model
   */
  readonly fields: TagsByIssuesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TagsByIssues.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagsByIssuesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    issue<T extends HelpIssueDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HelpIssueDefaultArgs<ExtArgs>>): Prisma__HelpIssueClient<$Result.GetResult<Prisma.$HelpIssuePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tag<T extends TagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagDefaultArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TagsByIssues model
   */ 
  interface TagsByIssuesFieldRefs {
    readonly issue_id: FieldRef<"TagsByIssues", 'Int'>
    readonly tag_id: FieldRef<"TagsByIssues", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TagsByIssues findUnique
   */
  export type TagsByIssuesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByIssues
     */
    select?: TagsByIssuesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByIssuesInclude<ExtArgs> | null
    /**
     * Filter, which TagsByIssues to fetch.
     */
    where: TagsByIssuesWhereUniqueInput
  }

  /**
   * TagsByIssues findUniqueOrThrow
   */
  export type TagsByIssuesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByIssues
     */
    select?: TagsByIssuesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByIssuesInclude<ExtArgs> | null
    /**
     * Filter, which TagsByIssues to fetch.
     */
    where: TagsByIssuesWhereUniqueInput
  }

  /**
   * TagsByIssues findFirst
   */
  export type TagsByIssuesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByIssues
     */
    select?: TagsByIssuesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByIssuesInclude<ExtArgs> | null
    /**
     * Filter, which TagsByIssues to fetch.
     */
    where?: TagsByIssuesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagsByIssues to fetch.
     */
    orderBy?: TagsByIssuesOrderByWithRelationInput | TagsByIssuesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TagsByIssues.
     */
    cursor?: TagsByIssuesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagsByIssues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagsByIssues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TagsByIssues.
     */
    distinct?: TagsByIssuesScalarFieldEnum | TagsByIssuesScalarFieldEnum[]
  }

  /**
   * TagsByIssues findFirstOrThrow
   */
  export type TagsByIssuesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByIssues
     */
    select?: TagsByIssuesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByIssuesInclude<ExtArgs> | null
    /**
     * Filter, which TagsByIssues to fetch.
     */
    where?: TagsByIssuesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagsByIssues to fetch.
     */
    orderBy?: TagsByIssuesOrderByWithRelationInput | TagsByIssuesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TagsByIssues.
     */
    cursor?: TagsByIssuesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagsByIssues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagsByIssues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TagsByIssues.
     */
    distinct?: TagsByIssuesScalarFieldEnum | TagsByIssuesScalarFieldEnum[]
  }

  /**
   * TagsByIssues findMany
   */
  export type TagsByIssuesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByIssues
     */
    select?: TagsByIssuesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByIssuesInclude<ExtArgs> | null
    /**
     * Filter, which TagsByIssues to fetch.
     */
    where?: TagsByIssuesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagsByIssues to fetch.
     */
    orderBy?: TagsByIssuesOrderByWithRelationInput | TagsByIssuesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TagsByIssues.
     */
    cursor?: TagsByIssuesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagsByIssues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagsByIssues.
     */
    skip?: number
    distinct?: TagsByIssuesScalarFieldEnum | TagsByIssuesScalarFieldEnum[]
  }

  /**
   * TagsByIssues create
   */
  export type TagsByIssuesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByIssues
     */
    select?: TagsByIssuesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByIssuesInclude<ExtArgs> | null
    /**
     * The data needed to create a TagsByIssues.
     */
    data: XOR<TagsByIssuesCreateInput, TagsByIssuesUncheckedCreateInput>
  }

  /**
   * TagsByIssues createMany
   */
  export type TagsByIssuesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TagsByIssues.
     */
    data: TagsByIssuesCreateManyInput | TagsByIssuesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TagsByIssues update
   */
  export type TagsByIssuesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByIssues
     */
    select?: TagsByIssuesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByIssuesInclude<ExtArgs> | null
    /**
     * The data needed to update a TagsByIssues.
     */
    data: XOR<TagsByIssuesUpdateInput, TagsByIssuesUncheckedUpdateInput>
    /**
     * Choose, which TagsByIssues to update.
     */
    where: TagsByIssuesWhereUniqueInput
  }

  /**
   * TagsByIssues updateMany
   */
  export type TagsByIssuesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TagsByIssues.
     */
    data: XOR<TagsByIssuesUpdateManyMutationInput, TagsByIssuesUncheckedUpdateManyInput>
    /**
     * Filter which TagsByIssues to update
     */
    where?: TagsByIssuesWhereInput
  }

  /**
   * TagsByIssues upsert
   */
  export type TagsByIssuesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByIssues
     */
    select?: TagsByIssuesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByIssuesInclude<ExtArgs> | null
    /**
     * The filter to search for the TagsByIssues to update in case it exists.
     */
    where: TagsByIssuesWhereUniqueInput
    /**
     * In case the TagsByIssues found by the `where` argument doesn't exist, create a new TagsByIssues with this data.
     */
    create: XOR<TagsByIssuesCreateInput, TagsByIssuesUncheckedCreateInput>
    /**
     * In case the TagsByIssues was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagsByIssuesUpdateInput, TagsByIssuesUncheckedUpdateInput>
  }

  /**
   * TagsByIssues delete
   */
  export type TagsByIssuesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByIssues
     */
    select?: TagsByIssuesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByIssuesInclude<ExtArgs> | null
    /**
     * Filter which TagsByIssues to delete.
     */
    where: TagsByIssuesWhereUniqueInput
  }

  /**
   * TagsByIssues deleteMany
   */
  export type TagsByIssuesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TagsByIssues to delete
     */
    where?: TagsByIssuesWhereInput
  }

  /**
   * TagsByIssues without action
   */
  export type TagsByIssuesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByIssues
     */
    select?: TagsByIssuesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByIssuesInclude<ExtArgs> | null
  }


  /**
   * Model TagsByResources
   */

  export type AggregateTagsByResources = {
    _count: TagsByResourcesCountAggregateOutputType | null
    _avg: TagsByResourcesAvgAggregateOutputType | null
    _sum: TagsByResourcesSumAggregateOutputType | null
    _min: TagsByResourcesMinAggregateOutputType | null
    _max: TagsByResourcesMaxAggregateOutputType | null
  }

  export type TagsByResourcesAvgAggregateOutputType = {
    resource_id: number | null
    tag_id: number | null
  }

  export type TagsByResourcesSumAggregateOutputType = {
    resource_id: number | null
    tag_id: number | null
  }

  export type TagsByResourcesMinAggregateOutputType = {
    resource_id: number | null
    tag_id: number | null
  }

  export type TagsByResourcesMaxAggregateOutputType = {
    resource_id: number | null
    tag_id: number | null
  }

  export type TagsByResourcesCountAggregateOutputType = {
    resource_id: number
    tag_id: number
    _all: number
  }


  export type TagsByResourcesAvgAggregateInputType = {
    resource_id?: true
    tag_id?: true
  }

  export type TagsByResourcesSumAggregateInputType = {
    resource_id?: true
    tag_id?: true
  }

  export type TagsByResourcesMinAggregateInputType = {
    resource_id?: true
    tag_id?: true
  }

  export type TagsByResourcesMaxAggregateInputType = {
    resource_id?: true
    tag_id?: true
  }

  export type TagsByResourcesCountAggregateInputType = {
    resource_id?: true
    tag_id?: true
    _all?: true
  }

  export type TagsByResourcesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TagsByResources to aggregate.
     */
    where?: TagsByResourcesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagsByResources to fetch.
     */
    orderBy?: TagsByResourcesOrderByWithRelationInput | TagsByResourcesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagsByResourcesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagsByResources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagsByResources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TagsByResources
    **/
    _count?: true | TagsByResourcesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TagsByResourcesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TagsByResourcesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagsByResourcesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagsByResourcesMaxAggregateInputType
  }

  export type GetTagsByResourcesAggregateType<T extends TagsByResourcesAggregateArgs> = {
        [P in keyof T & keyof AggregateTagsByResources]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTagsByResources[P]>
      : GetScalarType<T[P], AggregateTagsByResources[P]>
  }




  export type TagsByResourcesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagsByResourcesWhereInput
    orderBy?: TagsByResourcesOrderByWithAggregationInput | TagsByResourcesOrderByWithAggregationInput[]
    by: TagsByResourcesScalarFieldEnum[] | TagsByResourcesScalarFieldEnum
    having?: TagsByResourcesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagsByResourcesCountAggregateInputType | true
    _avg?: TagsByResourcesAvgAggregateInputType
    _sum?: TagsByResourcesSumAggregateInputType
    _min?: TagsByResourcesMinAggregateInputType
    _max?: TagsByResourcesMaxAggregateInputType
  }

  export type TagsByResourcesGroupByOutputType = {
    resource_id: number
    tag_id: number
    _count: TagsByResourcesCountAggregateOutputType | null
    _avg: TagsByResourcesAvgAggregateOutputType | null
    _sum: TagsByResourcesSumAggregateOutputType | null
    _min: TagsByResourcesMinAggregateOutputType | null
    _max: TagsByResourcesMaxAggregateOutputType | null
  }

  type GetTagsByResourcesGroupByPayload<T extends TagsByResourcesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagsByResourcesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagsByResourcesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagsByResourcesGroupByOutputType[P]>
            : GetScalarType<T[P], TagsByResourcesGroupByOutputType[P]>
        }
      >
    >


  export type TagsByResourcesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    resource_id?: boolean
    tag_id?: boolean
    resource?: boolean | ResourceDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tagsByResources"]>


  export type TagsByResourcesSelectScalar = {
    resource_id?: boolean
    tag_id?: boolean
  }

  export type TagsByResourcesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resource?: boolean | ResourceDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }

  export type $TagsByResourcesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TagsByResources"
    objects: {
      resource: Prisma.$ResourcePayload<ExtArgs>
      tag: Prisma.$TagPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      resource_id: number
      tag_id: number
    }, ExtArgs["result"]["tagsByResources"]>
    composites: {}
  }

  type TagsByResourcesGetPayload<S extends boolean | null | undefined | TagsByResourcesDefaultArgs> = $Result.GetResult<Prisma.$TagsByResourcesPayload, S>

  type TagsByResourcesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TagsByResourcesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TagsByResourcesCountAggregateInputType | true
    }

  export interface TagsByResourcesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TagsByResources'], meta: { name: 'TagsByResources' } }
    /**
     * Find zero or one TagsByResources that matches the filter.
     * @param {TagsByResourcesFindUniqueArgs} args - Arguments to find a TagsByResources
     * @example
     * // Get one TagsByResources
     * const tagsByResources = await prisma.tagsByResources.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagsByResourcesFindUniqueArgs>(args: SelectSubset<T, TagsByResourcesFindUniqueArgs<ExtArgs>>): Prisma__TagsByResourcesClient<$Result.GetResult<Prisma.$TagsByResourcesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TagsByResources that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TagsByResourcesFindUniqueOrThrowArgs} args - Arguments to find a TagsByResources
     * @example
     * // Get one TagsByResources
     * const tagsByResources = await prisma.tagsByResources.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagsByResourcesFindUniqueOrThrowArgs>(args: SelectSubset<T, TagsByResourcesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagsByResourcesClient<$Result.GetResult<Prisma.$TagsByResourcesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TagsByResources that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsByResourcesFindFirstArgs} args - Arguments to find a TagsByResources
     * @example
     * // Get one TagsByResources
     * const tagsByResources = await prisma.tagsByResources.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagsByResourcesFindFirstArgs>(args?: SelectSubset<T, TagsByResourcesFindFirstArgs<ExtArgs>>): Prisma__TagsByResourcesClient<$Result.GetResult<Prisma.$TagsByResourcesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TagsByResources that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsByResourcesFindFirstOrThrowArgs} args - Arguments to find a TagsByResources
     * @example
     * // Get one TagsByResources
     * const tagsByResources = await prisma.tagsByResources.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagsByResourcesFindFirstOrThrowArgs>(args?: SelectSubset<T, TagsByResourcesFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagsByResourcesClient<$Result.GetResult<Prisma.$TagsByResourcesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TagsByResources that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsByResourcesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TagsByResources
     * const tagsByResources = await prisma.tagsByResources.findMany()
     * 
     * // Get first 10 TagsByResources
     * const tagsByResources = await prisma.tagsByResources.findMany({ take: 10 })
     * 
     * // Only select the `resource_id`
     * const tagsByResourcesWithResource_idOnly = await prisma.tagsByResources.findMany({ select: { resource_id: true } })
     * 
     */
    findMany<T extends TagsByResourcesFindManyArgs>(args?: SelectSubset<T, TagsByResourcesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagsByResourcesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TagsByResources.
     * @param {TagsByResourcesCreateArgs} args - Arguments to create a TagsByResources.
     * @example
     * // Create one TagsByResources
     * const TagsByResources = await prisma.tagsByResources.create({
     *   data: {
     *     // ... data to create a TagsByResources
     *   }
     * })
     * 
     */
    create<T extends TagsByResourcesCreateArgs>(args: SelectSubset<T, TagsByResourcesCreateArgs<ExtArgs>>): Prisma__TagsByResourcesClient<$Result.GetResult<Prisma.$TagsByResourcesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TagsByResources.
     * @param {TagsByResourcesCreateManyArgs} args - Arguments to create many TagsByResources.
     * @example
     * // Create many TagsByResources
     * const tagsByResources = await prisma.tagsByResources.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagsByResourcesCreateManyArgs>(args?: SelectSubset<T, TagsByResourcesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TagsByResources.
     * @param {TagsByResourcesDeleteArgs} args - Arguments to delete one TagsByResources.
     * @example
     * // Delete one TagsByResources
     * const TagsByResources = await prisma.tagsByResources.delete({
     *   where: {
     *     // ... filter to delete one TagsByResources
     *   }
     * })
     * 
     */
    delete<T extends TagsByResourcesDeleteArgs>(args: SelectSubset<T, TagsByResourcesDeleteArgs<ExtArgs>>): Prisma__TagsByResourcesClient<$Result.GetResult<Prisma.$TagsByResourcesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TagsByResources.
     * @param {TagsByResourcesUpdateArgs} args - Arguments to update one TagsByResources.
     * @example
     * // Update one TagsByResources
     * const tagsByResources = await prisma.tagsByResources.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagsByResourcesUpdateArgs>(args: SelectSubset<T, TagsByResourcesUpdateArgs<ExtArgs>>): Prisma__TagsByResourcesClient<$Result.GetResult<Prisma.$TagsByResourcesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TagsByResources.
     * @param {TagsByResourcesDeleteManyArgs} args - Arguments to filter TagsByResources to delete.
     * @example
     * // Delete a few TagsByResources
     * const { count } = await prisma.tagsByResources.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagsByResourcesDeleteManyArgs>(args?: SelectSubset<T, TagsByResourcesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TagsByResources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsByResourcesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TagsByResources
     * const tagsByResources = await prisma.tagsByResources.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagsByResourcesUpdateManyArgs>(args: SelectSubset<T, TagsByResourcesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TagsByResources.
     * @param {TagsByResourcesUpsertArgs} args - Arguments to update or create a TagsByResources.
     * @example
     * // Update or create a TagsByResources
     * const tagsByResources = await prisma.tagsByResources.upsert({
     *   create: {
     *     // ... data to create a TagsByResources
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TagsByResources we want to update
     *   }
     * })
     */
    upsert<T extends TagsByResourcesUpsertArgs>(args: SelectSubset<T, TagsByResourcesUpsertArgs<ExtArgs>>): Prisma__TagsByResourcesClient<$Result.GetResult<Prisma.$TagsByResourcesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TagsByResources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsByResourcesCountArgs} args - Arguments to filter TagsByResources to count.
     * @example
     * // Count the number of TagsByResources
     * const count = await prisma.tagsByResources.count({
     *   where: {
     *     // ... the filter for the TagsByResources we want to count
     *   }
     * })
    **/
    count<T extends TagsByResourcesCountArgs>(
      args?: Subset<T, TagsByResourcesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagsByResourcesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TagsByResources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsByResourcesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagsByResourcesAggregateArgs>(args: Subset<T, TagsByResourcesAggregateArgs>): Prisma.PrismaPromise<GetTagsByResourcesAggregateType<T>>

    /**
     * Group by TagsByResources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsByResourcesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagsByResourcesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagsByResourcesGroupByArgs['orderBy'] }
        : { orderBy?: TagsByResourcesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagsByResourcesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagsByResourcesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TagsByResources model
   */
  readonly fields: TagsByResourcesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TagsByResources.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagsByResourcesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resource<T extends ResourceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ResourceDefaultArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tag<T extends TagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagDefaultArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TagsByResources model
   */ 
  interface TagsByResourcesFieldRefs {
    readonly resource_id: FieldRef<"TagsByResources", 'Int'>
    readonly tag_id: FieldRef<"TagsByResources", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TagsByResources findUnique
   */
  export type TagsByResourcesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByResources
     */
    select?: TagsByResourcesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByResourcesInclude<ExtArgs> | null
    /**
     * Filter, which TagsByResources to fetch.
     */
    where: TagsByResourcesWhereUniqueInput
  }

  /**
   * TagsByResources findUniqueOrThrow
   */
  export type TagsByResourcesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByResources
     */
    select?: TagsByResourcesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByResourcesInclude<ExtArgs> | null
    /**
     * Filter, which TagsByResources to fetch.
     */
    where: TagsByResourcesWhereUniqueInput
  }

  /**
   * TagsByResources findFirst
   */
  export type TagsByResourcesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByResources
     */
    select?: TagsByResourcesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByResourcesInclude<ExtArgs> | null
    /**
     * Filter, which TagsByResources to fetch.
     */
    where?: TagsByResourcesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagsByResources to fetch.
     */
    orderBy?: TagsByResourcesOrderByWithRelationInput | TagsByResourcesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TagsByResources.
     */
    cursor?: TagsByResourcesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagsByResources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagsByResources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TagsByResources.
     */
    distinct?: TagsByResourcesScalarFieldEnum | TagsByResourcesScalarFieldEnum[]
  }

  /**
   * TagsByResources findFirstOrThrow
   */
  export type TagsByResourcesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByResources
     */
    select?: TagsByResourcesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByResourcesInclude<ExtArgs> | null
    /**
     * Filter, which TagsByResources to fetch.
     */
    where?: TagsByResourcesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagsByResources to fetch.
     */
    orderBy?: TagsByResourcesOrderByWithRelationInput | TagsByResourcesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TagsByResources.
     */
    cursor?: TagsByResourcesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagsByResources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagsByResources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TagsByResources.
     */
    distinct?: TagsByResourcesScalarFieldEnum | TagsByResourcesScalarFieldEnum[]
  }

  /**
   * TagsByResources findMany
   */
  export type TagsByResourcesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByResources
     */
    select?: TagsByResourcesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByResourcesInclude<ExtArgs> | null
    /**
     * Filter, which TagsByResources to fetch.
     */
    where?: TagsByResourcesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagsByResources to fetch.
     */
    orderBy?: TagsByResourcesOrderByWithRelationInput | TagsByResourcesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TagsByResources.
     */
    cursor?: TagsByResourcesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagsByResources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagsByResources.
     */
    skip?: number
    distinct?: TagsByResourcesScalarFieldEnum | TagsByResourcesScalarFieldEnum[]
  }

  /**
   * TagsByResources create
   */
  export type TagsByResourcesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByResources
     */
    select?: TagsByResourcesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByResourcesInclude<ExtArgs> | null
    /**
     * The data needed to create a TagsByResources.
     */
    data: XOR<TagsByResourcesCreateInput, TagsByResourcesUncheckedCreateInput>
  }

  /**
   * TagsByResources createMany
   */
  export type TagsByResourcesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TagsByResources.
     */
    data: TagsByResourcesCreateManyInput | TagsByResourcesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TagsByResources update
   */
  export type TagsByResourcesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByResources
     */
    select?: TagsByResourcesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByResourcesInclude<ExtArgs> | null
    /**
     * The data needed to update a TagsByResources.
     */
    data: XOR<TagsByResourcesUpdateInput, TagsByResourcesUncheckedUpdateInput>
    /**
     * Choose, which TagsByResources to update.
     */
    where: TagsByResourcesWhereUniqueInput
  }

  /**
   * TagsByResources updateMany
   */
  export type TagsByResourcesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TagsByResources.
     */
    data: XOR<TagsByResourcesUpdateManyMutationInput, TagsByResourcesUncheckedUpdateManyInput>
    /**
     * Filter which TagsByResources to update
     */
    where?: TagsByResourcesWhereInput
  }

  /**
   * TagsByResources upsert
   */
  export type TagsByResourcesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByResources
     */
    select?: TagsByResourcesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByResourcesInclude<ExtArgs> | null
    /**
     * The filter to search for the TagsByResources to update in case it exists.
     */
    where: TagsByResourcesWhereUniqueInput
    /**
     * In case the TagsByResources found by the `where` argument doesn't exist, create a new TagsByResources with this data.
     */
    create: XOR<TagsByResourcesCreateInput, TagsByResourcesUncheckedCreateInput>
    /**
     * In case the TagsByResources was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagsByResourcesUpdateInput, TagsByResourcesUncheckedUpdateInput>
  }

  /**
   * TagsByResources delete
   */
  export type TagsByResourcesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByResources
     */
    select?: TagsByResourcesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByResourcesInclude<ExtArgs> | null
    /**
     * Filter which TagsByResources to delete.
     */
    where: TagsByResourcesWhereUniqueInput
  }

  /**
   * TagsByResources deleteMany
   */
  export type TagsByResourcesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TagsByResources to delete
     */
    where?: TagsByResourcesWhereInput
  }

  /**
   * TagsByResources without action
   */
  export type TagsByResourcesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsByResources
     */
    select?: TagsByResourcesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsByResourcesInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    profile_picture: 'profile_picture',
    role: 'role',
    level: 'level',
    likes: 'likes'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ChallengeScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    title: 'title',
    description: 'description',
    content: 'content',
    published: 'published',
    difficulty: 'difficulty'
  };

  export type ChallengeScalarFieldEnum = (typeof ChallengeScalarFieldEnum)[keyof typeof ChallengeScalarFieldEnum]


  export const ResourceScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    title: 'title',
    description: 'description',
    content: 'content',
    published: 'published',
    type: 'type',
    url: 'url'
  };

  export type ResourceScalarFieldEnum = (typeof ResourceScalarFieldEnum)[keyof typeof ResourceScalarFieldEnum]


  export const HelpIssueScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    author_id: 'author_id',
    votes: 'votes',
    views: 'views',
    subject: 'subject',
    content: 'content',
    status: 'status'
  };

  export type HelpIssueScalarFieldEnum = (typeof HelpIssueScalarFieldEnum)[keyof typeof HelpIssueScalarFieldEnum]


  export const SolutionScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    author_id: 'author_id',
    challenge_id: 'challenge_id',
    votes: 'votes',
    views: 'views',
    subject: 'subject',
    description: 'description',
    code: 'code',
    verified: 'verified'
  };

  export type SolutionScalarFieldEnum = (typeof SolutionScalarFieldEnum)[keyof typeof SolutionScalarFieldEnum]


  export const TagScalarFieldEnum: {
    id: 'id',
    tag: 'tag'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const TagsByChallengesScalarFieldEnum: {
    challenge_id: 'challenge_id',
    tag_id: 'tag_id'
  };

  export type TagsByChallengesScalarFieldEnum = (typeof TagsByChallengesScalarFieldEnum)[keyof typeof TagsByChallengesScalarFieldEnum]


  export const TagsByIssuesScalarFieldEnum: {
    issue_id: 'issue_id',
    tag_id: 'tag_id'
  };

  export type TagsByIssuesScalarFieldEnum = (typeof TagsByIssuesScalarFieldEnum)[keyof typeof TagsByIssuesScalarFieldEnum]


  export const TagsByResourcesScalarFieldEnum: {
    resource_id: 'resource_id',
    tag_id: 'tag_id'
  };

  export type TagsByResourcesScalarFieldEnum = (typeof TagsByResourcesScalarFieldEnum)[keyof typeof TagsByResourcesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Knowledge'
   */
  export type EnumKnowledgeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Knowledge'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Difficulty'
   */
  export type EnumDifficultyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Difficulty'>
    


  /**
   * Reference to a field of type 'ResourceType'
   */
  export type EnumResourceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ResourceType'>
    


  /**
   * Reference to a field of type 'IssueStatus'
   */
  export type EnumIssueStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IssueStatus'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    profile_picture?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    level?: EnumKnowledgeFilter<"User"> | $Enums.Knowledge
    likes?: IntFilter<"User"> | number
    issues?: HelpIssueListRelationFilter
    solutions?: SolutionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    profile_picture?: SortOrder
    role?: SortOrder
    level?: SortOrder
    likes?: SortOrder
    issues?: HelpIssueOrderByRelationAggregateInput
    solutions?: SolutionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    profile_picture?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    level?: EnumKnowledgeFilter<"User"> | $Enums.Knowledge
    likes?: IntFilter<"User"> | number
    issues?: HelpIssueListRelationFilter
    solutions?: SolutionListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    profile_picture?: SortOrder
    role?: SortOrder
    level?: SortOrder
    likes?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    profile_picture?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    level?: EnumKnowledgeWithAggregatesFilter<"User"> | $Enums.Knowledge
    likes?: IntWithAggregatesFilter<"User"> | number
  }

  export type ChallengeWhereInput = {
    AND?: ChallengeWhereInput | ChallengeWhereInput[]
    OR?: ChallengeWhereInput[]
    NOT?: ChallengeWhereInput | ChallengeWhereInput[]
    id?: IntFilter<"Challenge"> | number
    created_at?: DateTimeFilter<"Challenge"> | Date | string
    updated_at?: DateTimeFilter<"Challenge"> | Date | string
    title?: StringFilter<"Challenge"> | string
    description?: StringFilter<"Challenge"> | string
    content?: StringFilter<"Challenge"> | string
    published?: BoolFilter<"Challenge"> | boolean
    difficulty?: EnumDifficultyFilter<"Challenge"> | $Enums.Difficulty
    tags?: TagsByChallengesListRelationFilter
    solutions?: SolutionListRelationFilter
  }

  export type ChallengeOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    published?: SortOrder
    difficulty?: SortOrder
    tags?: TagsByChallengesOrderByRelationAggregateInput
    solutions?: SolutionOrderByRelationAggregateInput
  }

  export type ChallengeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ChallengeWhereInput | ChallengeWhereInput[]
    OR?: ChallengeWhereInput[]
    NOT?: ChallengeWhereInput | ChallengeWhereInput[]
    created_at?: DateTimeFilter<"Challenge"> | Date | string
    updated_at?: DateTimeFilter<"Challenge"> | Date | string
    title?: StringFilter<"Challenge"> | string
    description?: StringFilter<"Challenge"> | string
    content?: StringFilter<"Challenge"> | string
    published?: BoolFilter<"Challenge"> | boolean
    difficulty?: EnumDifficultyFilter<"Challenge"> | $Enums.Difficulty
    tags?: TagsByChallengesListRelationFilter
    solutions?: SolutionListRelationFilter
  }, "id">

  export type ChallengeOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    published?: SortOrder
    difficulty?: SortOrder
    _count?: ChallengeCountOrderByAggregateInput
    _avg?: ChallengeAvgOrderByAggregateInput
    _max?: ChallengeMaxOrderByAggregateInput
    _min?: ChallengeMinOrderByAggregateInput
    _sum?: ChallengeSumOrderByAggregateInput
  }

  export type ChallengeScalarWhereWithAggregatesInput = {
    AND?: ChallengeScalarWhereWithAggregatesInput | ChallengeScalarWhereWithAggregatesInput[]
    OR?: ChallengeScalarWhereWithAggregatesInput[]
    NOT?: ChallengeScalarWhereWithAggregatesInput | ChallengeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Challenge"> | number
    created_at?: DateTimeWithAggregatesFilter<"Challenge"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Challenge"> | Date | string
    title?: StringWithAggregatesFilter<"Challenge"> | string
    description?: StringWithAggregatesFilter<"Challenge"> | string
    content?: StringWithAggregatesFilter<"Challenge"> | string
    published?: BoolWithAggregatesFilter<"Challenge"> | boolean
    difficulty?: EnumDifficultyWithAggregatesFilter<"Challenge"> | $Enums.Difficulty
  }

  export type ResourceWhereInput = {
    AND?: ResourceWhereInput | ResourceWhereInput[]
    OR?: ResourceWhereInput[]
    NOT?: ResourceWhereInput | ResourceWhereInput[]
    id?: IntFilter<"Resource"> | number
    created_at?: DateTimeFilter<"Resource"> | Date | string
    updated_at?: DateTimeFilter<"Resource"> | Date | string
    title?: StringFilter<"Resource"> | string
    description?: StringFilter<"Resource"> | string
    content?: StringFilter<"Resource"> | string
    published?: BoolFilter<"Resource"> | boolean
    type?: EnumResourceTypeFilter<"Resource"> | $Enums.ResourceType
    url?: StringFilter<"Resource"> | string
    tags?: TagsByResourcesListRelationFilter
  }

  export type ResourceOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    published?: SortOrder
    type?: SortOrder
    url?: SortOrder
    tags?: TagsByResourcesOrderByRelationAggregateInput
  }

  export type ResourceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ResourceWhereInput | ResourceWhereInput[]
    OR?: ResourceWhereInput[]
    NOT?: ResourceWhereInput | ResourceWhereInput[]
    created_at?: DateTimeFilter<"Resource"> | Date | string
    updated_at?: DateTimeFilter<"Resource"> | Date | string
    title?: StringFilter<"Resource"> | string
    description?: StringFilter<"Resource"> | string
    content?: StringFilter<"Resource"> | string
    published?: BoolFilter<"Resource"> | boolean
    type?: EnumResourceTypeFilter<"Resource"> | $Enums.ResourceType
    url?: StringFilter<"Resource"> | string
    tags?: TagsByResourcesListRelationFilter
  }, "id">

  export type ResourceOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    published?: SortOrder
    type?: SortOrder
    url?: SortOrder
    _count?: ResourceCountOrderByAggregateInput
    _avg?: ResourceAvgOrderByAggregateInput
    _max?: ResourceMaxOrderByAggregateInput
    _min?: ResourceMinOrderByAggregateInput
    _sum?: ResourceSumOrderByAggregateInput
  }

  export type ResourceScalarWhereWithAggregatesInput = {
    AND?: ResourceScalarWhereWithAggregatesInput | ResourceScalarWhereWithAggregatesInput[]
    OR?: ResourceScalarWhereWithAggregatesInput[]
    NOT?: ResourceScalarWhereWithAggregatesInput | ResourceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Resource"> | number
    created_at?: DateTimeWithAggregatesFilter<"Resource"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Resource"> | Date | string
    title?: StringWithAggregatesFilter<"Resource"> | string
    description?: StringWithAggregatesFilter<"Resource"> | string
    content?: StringWithAggregatesFilter<"Resource"> | string
    published?: BoolWithAggregatesFilter<"Resource"> | boolean
    type?: EnumResourceTypeWithAggregatesFilter<"Resource"> | $Enums.ResourceType
    url?: StringWithAggregatesFilter<"Resource"> | string
  }

  export type HelpIssueWhereInput = {
    AND?: HelpIssueWhereInput | HelpIssueWhereInput[]
    OR?: HelpIssueWhereInput[]
    NOT?: HelpIssueWhereInput | HelpIssueWhereInput[]
    id?: IntFilter<"HelpIssue"> | number
    created_at?: DateTimeFilter<"HelpIssue"> | Date | string
    updated_at?: DateTimeFilter<"HelpIssue"> | Date | string
    author_id?: IntFilter<"HelpIssue"> | number
    votes?: IntFilter<"HelpIssue"> | number
    views?: IntFilter<"HelpIssue"> | number
    subject?: StringFilter<"HelpIssue"> | string
    content?: StringFilter<"HelpIssue"> | string
    status?: EnumIssueStatusFilter<"HelpIssue"> | $Enums.IssueStatus
    author?: XOR<UserRelationFilter, UserWhereInput>
    tags?: TagsByIssuesListRelationFilter
  }

  export type HelpIssueOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    author_id?: SortOrder
    votes?: SortOrder
    views?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    status?: SortOrder
    author?: UserOrderByWithRelationInput
    tags?: TagsByIssuesOrderByRelationAggregateInput
  }

  export type HelpIssueWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: HelpIssueWhereInput | HelpIssueWhereInput[]
    OR?: HelpIssueWhereInput[]
    NOT?: HelpIssueWhereInput | HelpIssueWhereInput[]
    created_at?: DateTimeFilter<"HelpIssue"> | Date | string
    updated_at?: DateTimeFilter<"HelpIssue"> | Date | string
    author_id?: IntFilter<"HelpIssue"> | number
    votes?: IntFilter<"HelpIssue"> | number
    views?: IntFilter<"HelpIssue"> | number
    subject?: StringFilter<"HelpIssue"> | string
    content?: StringFilter<"HelpIssue"> | string
    status?: EnumIssueStatusFilter<"HelpIssue"> | $Enums.IssueStatus
    author?: XOR<UserRelationFilter, UserWhereInput>
    tags?: TagsByIssuesListRelationFilter
  }, "id">

  export type HelpIssueOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    author_id?: SortOrder
    votes?: SortOrder
    views?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    status?: SortOrder
    _count?: HelpIssueCountOrderByAggregateInput
    _avg?: HelpIssueAvgOrderByAggregateInput
    _max?: HelpIssueMaxOrderByAggregateInput
    _min?: HelpIssueMinOrderByAggregateInput
    _sum?: HelpIssueSumOrderByAggregateInput
  }

  export type HelpIssueScalarWhereWithAggregatesInput = {
    AND?: HelpIssueScalarWhereWithAggregatesInput | HelpIssueScalarWhereWithAggregatesInput[]
    OR?: HelpIssueScalarWhereWithAggregatesInput[]
    NOT?: HelpIssueScalarWhereWithAggregatesInput | HelpIssueScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HelpIssue"> | number
    created_at?: DateTimeWithAggregatesFilter<"HelpIssue"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"HelpIssue"> | Date | string
    author_id?: IntWithAggregatesFilter<"HelpIssue"> | number
    votes?: IntWithAggregatesFilter<"HelpIssue"> | number
    views?: IntWithAggregatesFilter<"HelpIssue"> | number
    subject?: StringWithAggregatesFilter<"HelpIssue"> | string
    content?: StringWithAggregatesFilter<"HelpIssue"> | string
    status?: EnumIssueStatusWithAggregatesFilter<"HelpIssue"> | $Enums.IssueStatus
  }

  export type SolutionWhereInput = {
    AND?: SolutionWhereInput | SolutionWhereInput[]
    OR?: SolutionWhereInput[]
    NOT?: SolutionWhereInput | SolutionWhereInput[]
    id?: IntFilter<"Solution"> | number
    created_at?: DateTimeFilter<"Solution"> | Date | string
    updated_at?: DateTimeFilter<"Solution"> | Date | string
    author_id?: IntFilter<"Solution"> | number
    challenge_id?: IntFilter<"Solution"> | number
    votes?: IntFilter<"Solution"> | number
    views?: IntFilter<"Solution"> | number
    subject?: StringFilter<"Solution"> | string
    description?: StringFilter<"Solution"> | string
    code?: StringFilter<"Solution"> | string
    verified?: BoolFilter<"Solution"> | boolean
    author?: XOR<UserRelationFilter, UserWhereInput>
    challenge?: XOR<ChallengeRelationFilter, ChallengeWhereInput>
  }

  export type SolutionOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    author_id?: SortOrder
    challenge_id?: SortOrder
    votes?: SortOrder
    views?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    code?: SortOrder
    verified?: SortOrder
    author?: UserOrderByWithRelationInput
    challenge?: ChallengeOrderByWithRelationInput
  }

  export type SolutionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SolutionWhereInput | SolutionWhereInput[]
    OR?: SolutionWhereInput[]
    NOT?: SolutionWhereInput | SolutionWhereInput[]
    created_at?: DateTimeFilter<"Solution"> | Date | string
    updated_at?: DateTimeFilter<"Solution"> | Date | string
    author_id?: IntFilter<"Solution"> | number
    challenge_id?: IntFilter<"Solution"> | number
    votes?: IntFilter<"Solution"> | number
    views?: IntFilter<"Solution"> | number
    subject?: StringFilter<"Solution"> | string
    description?: StringFilter<"Solution"> | string
    code?: StringFilter<"Solution"> | string
    verified?: BoolFilter<"Solution"> | boolean
    author?: XOR<UserRelationFilter, UserWhereInput>
    challenge?: XOR<ChallengeRelationFilter, ChallengeWhereInput>
  }, "id">

  export type SolutionOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    author_id?: SortOrder
    challenge_id?: SortOrder
    votes?: SortOrder
    views?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    code?: SortOrder
    verified?: SortOrder
    _count?: SolutionCountOrderByAggregateInput
    _avg?: SolutionAvgOrderByAggregateInput
    _max?: SolutionMaxOrderByAggregateInput
    _min?: SolutionMinOrderByAggregateInput
    _sum?: SolutionSumOrderByAggregateInput
  }

  export type SolutionScalarWhereWithAggregatesInput = {
    AND?: SolutionScalarWhereWithAggregatesInput | SolutionScalarWhereWithAggregatesInput[]
    OR?: SolutionScalarWhereWithAggregatesInput[]
    NOT?: SolutionScalarWhereWithAggregatesInput | SolutionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Solution"> | number
    created_at?: DateTimeWithAggregatesFilter<"Solution"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Solution"> | Date | string
    author_id?: IntWithAggregatesFilter<"Solution"> | number
    challenge_id?: IntWithAggregatesFilter<"Solution"> | number
    votes?: IntWithAggregatesFilter<"Solution"> | number
    views?: IntWithAggregatesFilter<"Solution"> | number
    subject?: StringWithAggregatesFilter<"Solution"> | string
    description?: StringWithAggregatesFilter<"Solution"> | string
    code?: StringWithAggregatesFilter<"Solution"> | string
    verified?: BoolWithAggregatesFilter<"Solution"> | boolean
  }

  export type TagWhereInput = {
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    id?: IntFilter<"Tag"> | number
    tag?: StringFilter<"Tag"> | string
    challenges?: TagsByChallengesListRelationFilter
    issues?: TagsByIssuesListRelationFilter
    resources?: TagsByResourcesListRelationFilter
  }

  export type TagOrderByWithRelationInput = {
    id?: SortOrder
    tag?: SortOrder
    challenges?: TagsByChallengesOrderByRelationAggregateInput
    issues?: TagsByIssuesOrderByRelationAggregateInput
    resources?: TagsByResourcesOrderByRelationAggregateInput
  }

  export type TagWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    tag?: StringFilter<"Tag"> | string
    challenges?: TagsByChallengesListRelationFilter
    issues?: TagsByIssuesListRelationFilter
    resources?: TagsByResourcesListRelationFilter
  }, "id">

  export type TagOrderByWithAggregationInput = {
    id?: SortOrder
    tag?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _avg?: TagAvgOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
    _sum?: TagSumOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    OR?: TagScalarWhereWithAggregatesInput[]
    NOT?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Tag"> | number
    tag?: StringWithAggregatesFilter<"Tag"> | string
  }

  export type TagsByChallengesWhereInput = {
    AND?: TagsByChallengesWhereInput | TagsByChallengesWhereInput[]
    OR?: TagsByChallengesWhereInput[]
    NOT?: TagsByChallengesWhereInput | TagsByChallengesWhereInput[]
    challenge_id?: IntFilter<"TagsByChallenges"> | number
    tag_id?: IntFilter<"TagsByChallenges"> | number
    challenge?: XOR<ChallengeRelationFilter, ChallengeWhereInput>
    tag?: XOR<TagRelationFilter, TagWhereInput>
  }

  export type TagsByChallengesOrderByWithRelationInput = {
    challenge_id?: SortOrder
    tag_id?: SortOrder
    challenge?: ChallengeOrderByWithRelationInput
    tag?: TagOrderByWithRelationInput
  }

  export type TagsByChallengesWhereUniqueInput = Prisma.AtLeast<{
    challenge_id_tag_id?: TagsByChallengesChallenge_idTag_idCompoundUniqueInput
    AND?: TagsByChallengesWhereInput | TagsByChallengesWhereInput[]
    OR?: TagsByChallengesWhereInput[]
    NOT?: TagsByChallengesWhereInput | TagsByChallengesWhereInput[]
    challenge_id?: IntFilter<"TagsByChallenges"> | number
    tag_id?: IntFilter<"TagsByChallenges"> | number
    challenge?: XOR<ChallengeRelationFilter, ChallengeWhereInput>
    tag?: XOR<TagRelationFilter, TagWhereInput>
  }, "challenge_id_tag_id">

  export type TagsByChallengesOrderByWithAggregationInput = {
    challenge_id?: SortOrder
    tag_id?: SortOrder
    _count?: TagsByChallengesCountOrderByAggregateInput
    _avg?: TagsByChallengesAvgOrderByAggregateInput
    _max?: TagsByChallengesMaxOrderByAggregateInput
    _min?: TagsByChallengesMinOrderByAggregateInput
    _sum?: TagsByChallengesSumOrderByAggregateInput
  }

  export type TagsByChallengesScalarWhereWithAggregatesInput = {
    AND?: TagsByChallengesScalarWhereWithAggregatesInput | TagsByChallengesScalarWhereWithAggregatesInput[]
    OR?: TagsByChallengesScalarWhereWithAggregatesInput[]
    NOT?: TagsByChallengesScalarWhereWithAggregatesInput | TagsByChallengesScalarWhereWithAggregatesInput[]
    challenge_id?: IntWithAggregatesFilter<"TagsByChallenges"> | number
    tag_id?: IntWithAggregatesFilter<"TagsByChallenges"> | number
  }

  export type TagsByIssuesWhereInput = {
    AND?: TagsByIssuesWhereInput | TagsByIssuesWhereInput[]
    OR?: TagsByIssuesWhereInput[]
    NOT?: TagsByIssuesWhereInput | TagsByIssuesWhereInput[]
    issue_id?: IntFilter<"TagsByIssues"> | number
    tag_id?: IntFilter<"TagsByIssues"> | number
    issue?: XOR<HelpIssueRelationFilter, HelpIssueWhereInput>
    tag?: XOR<TagRelationFilter, TagWhereInput>
  }

  export type TagsByIssuesOrderByWithRelationInput = {
    issue_id?: SortOrder
    tag_id?: SortOrder
    issue?: HelpIssueOrderByWithRelationInput
    tag?: TagOrderByWithRelationInput
  }

  export type TagsByIssuesWhereUniqueInput = Prisma.AtLeast<{
    issue_id_tag_id?: TagsByIssuesIssue_idTag_idCompoundUniqueInput
    AND?: TagsByIssuesWhereInput | TagsByIssuesWhereInput[]
    OR?: TagsByIssuesWhereInput[]
    NOT?: TagsByIssuesWhereInput | TagsByIssuesWhereInput[]
    issue_id?: IntFilter<"TagsByIssues"> | number
    tag_id?: IntFilter<"TagsByIssues"> | number
    issue?: XOR<HelpIssueRelationFilter, HelpIssueWhereInput>
    tag?: XOR<TagRelationFilter, TagWhereInput>
  }, "issue_id_tag_id">

  export type TagsByIssuesOrderByWithAggregationInput = {
    issue_id?: SortOrder
    tag_id?: SortOrder
    _count?: TagsByIssuesCountOrderByAggregateInput
    _avg?: TagsByIssuesAvgOrderByAggregateInput
    _max?: TagsByIssuesMaxOrderByAggregateInput
    _min?: TagsByIssuesMinOrderByAggregateInput
    _sum?: TagsByIssuesSumOrderByAggregateInput
  }

  export type TagsByIssuesScalarWhereWithAggregatesInput = {
    AND?: TagsByIssuesScalarWhereWithAggregatesInput | TagsByIssuesScalarWhereWithAggregatesInput[]
    OR?: TagsByIssuesScalarWhereWithAggregatesInput[]
    NOT?: TagsByIssuesScalarWhereWithAggregatesInput | TagsByIssuesScalarWhereWithAggregatesInput[]
    issue_id?: IntWithAggregatesFilter<"TagsByIssues"> | number
    tag_id?: IntWithAggregatesFilter<"TagsByIssues"> | number
  }

  export type TagsByResourcesWhereInput = {
    AND?: TagsByResourcesWhereInput | TagsByResourcesWhereInput[]
    OR?: TagsByResourcesWhereInput[]
    NOT?: TagsByResourcesWhereInput | TagsByResourcesWhereInput[]
    resource_id?: IntFilter<"TagsByResources"> | number
    tag_id?: IntFilter<"TagsByResources"> | number
    resource?: XOR<ResourceRelationFilter, ResourceWhereInput>
    tag?: XOR<TagRelationFilter, TagWhereInput>
  }

  export type TagsByResourcesOrderByWithRelationInput = {
    resource_id?: SortOrder
    tag_id?: SortOrder
    resource?: ResourceOrderByWithRelationInput
    tag?: TagOrderByWithRelationInput
  }

  export type TagsByResourcesWhereUniqueInput = Prisma.AtLeast<{
    resource_id_tag_id?: TagsByResourcesResource_idTag_idCompoundUniqueInput
    AND?: TagsByResourcesWhereInput | TagsByResourcesWhereInput[]
    OR?: TagsByResourcesWhereInput[]
    NOT?: TagsByResourcesWhereInput | TagsByResourcesWhereInput[]
    resource_id?: IntFilter<"TagsByResources"> | number
    tag_id?: IntFilter<"TagsByResources"> | number
    resource?: XOR<ResourceRelationFilter, ResourceWhereInput>
    tag?: XOR<TagRelationFilter, TagWhereInput>
  }, "resource_id_tag_id">

  export type TagsByResourcesOrderByWithAggregationInput = {
    resource_id?: SortOrder
    tag_id?: SortOrder
    _count?: TagsByResourcesCountOrderByAggregateInput
    _avg?: TagsByResourcesAvgOrderByAggregateInput
    _max?: TagsByResourcesMaxOrderByAggregateInput
    _min?: TagsByResourcesMinOrderByAggregateInput
    _sum?: TagsByResourcesSumOrderByAggregateInput
  }

  export type TagsByResourcesScalarWhereWithAggregatesInput = {
    AND?: TagsByResourcesScalarWhereWithAggregatesInput | TagsByResourcesScalarWhereWithAggregatesInput[]
    OR?: TagsByResourcesScalarWhereWithAggregatesInput[]
    NOT?: TagsByResourcesScalarWhereWithAggregatesInput | TagsByResourcesScalarWhereWithAggregatesInput[]
    resource_id?: IntWithAggregatesFilter<"TagsByResources"> | number
    tag_id?: IntWithAggregatesFilter<"TagsByResources"> | number
  }

  export type UserCreateInput = {
    email: string
    password: string
    name: string
    profile_picture: string
    role?: $Enums.Role
    level?: $Enums.Knowledge
    likes?: number
    issues?: HelpIssueCreateNestedManyWithoutAuthorInput
    solutions?: SolutionCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    name: string
    profile_picture: string
    role?: $Enums.Role
    level?: $Enums.Knowledge
    likes?: number
    issues?: HelpIssueUncheckedCreateNestedManyWithoutAuthorInput
    solutions?: SolutionUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    profile_picture?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    level?: EnumKnowledgeFieldUpdateOperationsInput | $Enums.Knowledge
    likes?: IntFieldUpdateOperationsInput | number
    issues?: HelpIssueUpdateManyWithoutAuthorNestedInput
    solutions?: SolutionUpdateManyWithoutAuthorNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    profile_picture?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    level?: EnumKnowledgeFieldUpdateOperationsInput | $Enums.Knowledge
    likes?: IntFieldUpdateOperationsInput | number
    issues?: HelpIssueUncheckedUpdateManyWithoutAuthorNestedInput
    solutions?: SolutionUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    name: string
    profile_picture: string
    role?: $Enums.Role
    level?: $Enums.Knowledge
    likes?: number
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    profile_picture?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    level?: EnumKnowledgeFieldUpdateOperationsInput | $Enums.Knowledge
    likes?: IntFieldUpdateOperationsInput | number
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    profile_picture?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    level?: EnumKnowledgeFieldUpdateOperationsInput | $Enums.Knowledge
    likes?: IntFieldUpdateOperationsInput | number
  }

  export type ChallengeCreateInput = {
    created_at?: Date | string
    updated_at?: Date | string
    title: string
    description: string
    content: string
    published?: boolean
    difficulty?: $Enums.Difficulty
    tags?: TagsByChallengesCreateNestedManyWithoutChallengeInput
    solutions?: SolutionCreateNestedManyWithoutChallengeInput
  }

  export type ChallengeUncheckedCreateInput = {
    id?: number
    created_at?: Date | string
    updated_at?: Date | string
    title: string
    description: string
    content: string
    published?: boolean
    difficulty?: $Enums.Difficulty
    tags?: TagsByChallengesUncheckedCreateNestedManyWithoutChallengeInput
    solutions?: SolutionUncheckedCreateNestedManyWithoutChallengeInput
  }

  export type ChallengeUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    tags?: TagsByChallengesUpdateManyWithoutChallengeNestedInput
    solutions?: SolutionUpdateManyWithoutChallengeNestedInput
  }

  export type ChallengeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    tags?: TagsByChallengesUncheckedUpdateManyWithoutChallengeNestedInput
    solutions?: SolutionUncheckedUpdateManyWithoutChallengeNestedInput
  }

  export type ChallengeCreateManyInput = {
    id?: number
    created_at?: Date | string
    updated_at?: Date | string
    title: string
    description: string
    content: string
    published?: boolean
    difficulty?: $Enums.Difficulty
  }

  export type ChallengeUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
  }

  export type ChallengeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
  }

  export type ResourceCreateInput = {
    created_at?: Date | string
    updated_at?: Date | string
    title: string
    description: string
    content: string
    published?: boolean
    type?: $Enums.ResourceType
    url: string
    tags?: TagsByResourcesCreateNestedManyWithoutResourceInput
  }

  export type ResourceUncheckedCreateInput = {
    id?: number
    created_at?: Date | string
    updated_at?: Date | string
    title: string
    description: string
    content: string
    published?: boolean
    type?: $Enums.ResourceType
    url: string
    tags?: TagsByResourcesUncheckedCreateNestedManyWithoutResourceInput
  }

  export type ResourceUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumResourceTypeFieldUpdateOperationsInput | $Enums.ResourceType
    url?: StringFieldUpdateOperationsInput | string
    tags?: TagsByResourcesUpdateManyWithoutResourceNestedInput
  }

  export type ResourceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumResourceTypeFieldUpdateOperationsInput | $Enums.ResourceType
    url?: StringFieldUpdateOperationsInput | string
    tags?: TagsByResourcesUncheckedUpdateManyWithoutResourceNestedInput
  }

  export type ResourceCreateManyInput = {
    id?: number
    created_at?: Date | string
    updated_at?: Date | string
    title: string
    description: string
    content: string
    published?: boolean
    type?: $Enums.ResourceType
    url: string
  }

  export type ResourceUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumResourceTypeFieldUpdateOperationsInput | $Enums.ResourceType
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ResourceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumResourceTypeFieldUpdateOperationsInput | $Enums.ResourceType
    url?: StringFieldUpdateOperationsInput | string
  }

  export type HelpIssueCreateInput = {
    created_at?: Date | string
    updated_at?: Date | string
    votes: number
    views: number
    subject: string
    content: string
    status: $Enums.IssueStatus
    author: UserCreateNestedOneWithoutIssuesInput
    tags?: TagsByIssuesCreateNestedManyWithoutIssueInput
  }

  export type HelpIssueUncheckedCreateInput = {
    id?: number
    created_at?: Date | string
    updated_at?: Date | string
    author_id: number
    votes: number
    views: number
    subject: string
    content: string
    status: $Enums.IssueStatus
    tags?: TagsByIssuesUncheckedCreateNestedManyWithoutIssueInput
  }

  export type HelpIssueUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumIssueStatusFieldUpdateOperationsInput | $Enums.IssueStatus
    author?: UserUpdateOneRequiredWithoutIssuesNestedInput
    tags?: TagsByIssuesUpdateManyWithoutIssueNestedInput
  }

  export type HelpIssueUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author_id?: IntFieldUpdateOperationsInput | number
    votes?: IntFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumIssueStatusFieldUpdateOperationsInput | $Enums.IssueStatus
    tags?: TagsByIssuesUncheckedUpdateManyWithoutIssueNestedInput
  }

  export type HelpIssueCreateManyInput = {
    id?: number
    created_at?: Date | string
    updated_at?: Date | string
    author_id: number
    votes: number
    views: number
    subject: string
    content: string
    status: $Enums.IssueStatus
  }

  export type HelpIssueUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumIssueStatusFieldUpdateOperationsInput | $Enums.IssueStatus
  }

  export type HelpIssueUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author_id?: IntFieldUpdateOperationsInput | number
    votes?: IntFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumIssueStatusFieldUpdateOperationsInput | $Enums.IssueStatus
  }

  export type SolutionCreateInput = {
    created_at?: Date | string
    updated_at?: Date | string
    votes: number
    views: number
    subject: string
    description: string
    code: string
    verified?: boolean
    author: UserCreateNestedOneWithoutSolutionsInput
    challenge: ChallengeCreateNestedOneWithoutSolutionsInput
  }

  export type SolutionUncheckedCreateInput = {
    id?: number
    created_at?: Date | string
    updated_at?: Date | string
    author_id: number
    challenge_id: number
    votes: number
    views: number
    subject: string
    description: string
    code: string
    verified?: boolean
  }

  export type SolutionUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneRequiredWithoutSolutionsNestedInput
    challenge?: ChallengeUpdateOneRequiredWithoutSolutionsNestedInput
  }

  export type SolutionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author_id?: IntFieldUpdateOperationsInput | number
    challenge_id?: IntFieldUpdateOperationsInput | number
    votes?: IntFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SolutionCreateManyInput = {
    id?: number
    created_at?: Date | string
    updated_at?: Date | string
    author_id: number
    challenge_id: number
    votes: number
    views: number
    subject: string
    description: string
    code: string
    verified?: boolean
  }

  export type SolutionUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SolutionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author_id?: IntFieldUpdateOperationsInput | number
    challenge_id?: IntFieldUpdateOperationsInput | number
    votes?: IntFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TagCreateInput = {
    tag: string
    challenges?: TagsByChallengesCreateNestedManyWithoutTagInput
    issues?: TagsByIssuesCreateNestedManyWithoutTagInput
    resources?: TagsByResourcesCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateInput = {
    id?: number
    tag: string
    challenges?: TagsByChallengesUncheckedCreateNestedManyWithoutTagInput
    issues?: TagsByIssuesUncheckedCreateNestedManyWithoutTagInput
    resources?: TagsByResourcesUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagUpdateInput = {
    tag?: StringFieldUpdateOperationsInput | string
    challenges?: TagsByChallengesUpdateManyWithoutTagNestedInput
    issues?: TagsByIssuesUpdateManyWithoutTagNestedInput
    resources?: TagsByResourcesUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag?: StringFieldUpdateOperationsInput | string
    challenges?: TagsByChallengesUncheckedUpdateManyWithoutTagNestedInput
    issues?: TagsByIssuesUncheckedUpdateManyWithoutTagNestedInput
    resources?: TagsByResourcesUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagCreateManyInput = {
    id?: number
    tag: string
  }

  export type TagUpdateManyMutationInput = {
    tag?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag?: StringFieldUpdateOperationsInput | string
  }

  export type TagsByChallengesCreateInput = {
    challenge: ChallengeCreateNestedOneWithoutTagsInput
    tag: TagCreateNestedOneWithoutChallengesInput
  }

  export type TagsByChallengesUncheckedCreateInput = {
    challenge_id: number
    tag_id: number
  }

  export type TagsByChallengesUpdateInput = {
    challenge?: ChallengeUpdateOneRequiredWithoutTagsNestedInput
    tag?: TagUpdateOneRequiredWithoutChallengesNestedInput
  }

  export type TagsByChallengesUncheckedUpdateInput = {
    challenge_id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type TagsByChallengesCreateManyInput = {
    challenge_id: number
    tag_id: number
  }

  export type TagsByChallengesUpdateManyMutationInput = {

  }

  export type TagsByChallengesUncheckedUpdateManyInput = {
    challenge_id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type TagsByIssuesCreateInput = {
    issue: HelpIssueCreateNestedOneWithoutTagsInput
    tag: TagCreateNestedOneWithoutIssuesInput
  }

  export type TagsByIssuesUncheckedCreateInput = {
    issue_id: number
    tag_id: number
  }

  export type TagsByIssuesUpdateInput = {
    issue?: HelpIssueUpdateOneRequiredWithoutTagsNestedInput
    tag?: TagUpdateOneRequiredWithoutIssuesNestedInput
  }

  export type TagsByIssuesUncheckedUpdateInput = {
    issue_id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type TagsByIssuesCreateManyInput = {
    issue_id: number
    tag_id: number
  }

  export type TagsByIssuesUpdateManyMutationInput = {

  }

  export type TagsByIssuesUncheckedUpdateManyInput = {
    issue_id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type TagsByResourcesCreateInput = {
    resource: ResourceCreateNestedOneWithoutTagsInput
    tag: TagCreateNestedOneWithoutResourcesInput
  }

  export type TagsByResourcesUncheckedCreateInput = {
    resource_id: number
    tag_id: number
  }

  export type TagsByResourcesUpdateInput = {
    resource?: ResourceUpdateOneRequiredWithoutTagsNestedInput
    tag?: TagUpdateOneRequiredWithoutResourcesNestedInput
  }

  export type TagsByResourcesUncheckedUpdateInput = {
    resource_id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type TagsByResourcesCreateManyInput = {
    resource_id: number
    tag_id: number
  }

  export type TagsByResourcesUpdateManyMutationInput = {

  }

  export type TagsByResourcesUncheckedUpdateManyInput = {
    resource_id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type EnumKnowledgeFilter<$PrismaModel = never> = {
    equals?: $Enums.Knowledge | EnumKnowledgeFieldRefInput<$PrismaModel>
    in?: $Enums.Knowledge[]
    notIn?: $Enums.Knowledge[]
    not?: NestedEnumKnowledgeFilter<$PrismaModel> | $Enums.Knowledge
  }

  export type HelpIssueListRelationFilter = {
    every?: HelpIssueWhereInput
    some?: HelpIssueWhereInput
    none?: HelpIssueWhereInput
  }

  export type SolutionListRelationFilter = {
    every?: SolutionWhereInput
    some?: SolutionWhereInput
    none?: SolutionWhereInput
  }

  export type HelpIssueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SolutionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    profile_picture?: SortOrder
    role?: SortOrder
    level?: SortOrder
    likes?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    likes?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    profile_picture?: SortOrder
    role?: SortOrder
    level?: SortOrder
    likes?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    profile_picture?: SortOrder
    role?: SortOrder
    level?: SortOrder
    likes?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    likes?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type EnumKnowledgeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Knowledge | EnumKnowledgeFieldRefInput<$PrismaModel>
    in?: $Enums.Knowledge[]
    notIn?: $Enums.Knowledge[]
    not?: NestedEnumKnowledgeWithAggregatesFilter<$PrismaModel> | $Enums.Knowledge
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumKnowledgeFilter<$PrismaModel>
    _max?: NestedEnumKnowledgeFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumDifficultyFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[]
    notIn?: $Enums.Difficulty[]
    not?: NestedEnumDifficultyFilter<$PrismaModel> | $Enums.Difficulty
  }

  export type TagsByChallengesListRelationFilter = {
    every?: TagsByChallengesWhereInput
    some?: TagsByChallengesWhereInput
    none?: TagsByChallengesWhereInput
  }

  export type TagsByChallengesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChallengeCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    published?: SortOrder
    difficulty?: SortOrder
  }

  export type ChallengeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ChallengeMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    published?: SortOrder
    difficulty?: SortOrder
  }

  export type ChallengeMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    published?: SortOrder
    difficulty?: SortOrder
  }

  export type ChallengeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumDifficultyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[]
    notIn?: $Enums.Difficulty[]
    not?: NestedEnumDifficultyWithAggregatesFilter<$PrismaModel> | $Enums.Difficulty
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDifficultyFilter<$PrismaModel>
    _max?: NestedEnumDifficultyFilter<$PrismaModel>
  }

  export type EnumResourceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ResourceType | EnumResourceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ResourceType[]
    notIn?: $Enums.ResourceType[]
    not?: NestedEnumResourceTypeFilter<$PrismaModel> | $Enums.ResourceType
  }

  export type TagsByResourcesListRelationFilter = {
    every?: TagsByResourcesWhereInput
    some?: TagsByResourcesWhereInput
    none?: TagsByResourcesWhereInput
  }

  export type TagsByResourcesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResourceCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    published?: SortOrder
    type?: SortOrder
    url?: SortOrder
  }

  export type ResourceAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ResourceMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    published?: SortOrder
    type?: SortOrder
    url?: SortOrder
  }

  export type ResourceMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    published?: SortOrder
    type?: SortOrder
    url?: SortOrder
  }

  export type ResourceSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumResourceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ResourceType | EnumResourceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ResourceType[]
    notIn?: $Enums.ResourceType[]
    not?: NestedEnumResourceTypeWithAggregatesFilter<$PrismaModel> | $Enums.ResourceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumResourceTypeFilter<$PrismaModel>
    _max?: NestedEnumResourceTypeFilter<$PrismaModel>
  }

  export type EnumIssueStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.IssueStatus | EnumIssueStatusFieldRefInput<$PrismaModel>
    in?: $Enums.IssueStatus[]
    notIn?: $Enums.IssueStatus[]
    not?: NestedEnumIssueStatusFilter<$PrismaModel> | $Enums.IssueStatus
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TagsByIssuesListRelationFilter = {
    every?: TagsByIssuesWhereInput
    some?: TagsByIssuesWhereInput
    none?: TagsByIssuesWhereInput
  }

  export type TagsByIssuesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HelpIssueCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    author_id?: SortOrder
    votes?: SortOrder
    views?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    status?: SortOrder
  }

  export type HelpIssueAvgOrderByAggregateInput = {
    id?: SortOrder
    author_id?: SortOrder
    votes?: SortOrder
    views?: SortOrder
  }

  export type HelpIssueMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    author_id?: SortOrder
    votes?: SortOrder
    views?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    status?: SortOrder
  }

  export type HelpIssueMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    author_id?: SortOrder
    votes?: SortOrder
    views?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    status?: SortOrder
  }

  export type HelpIssueSumOrderByAggregateInput = {
    id?: SortOrder
    author_id?: SortOrder
    votes?: SortOrder
    views?: SortOrder
  }

  export type EnumIssueStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IssueStatus | EnumIssueStatusFieldRefInput<$PrismaModel>
    in?: $Enums.IssueStatus[]
    notIn?: $Enums.IssueStatus[]
    not?: NestedEnumIssueStatusWithAggregatesFilter<$PrismaModel> | $Enums.IssueStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIssueStatusFilter<$PrismaModel>
    _max?: NestedEnumIssueStatusFilter<$PrismaModel>
  }

  export type ChallengeRelationFilter = {
    is?: ChallengeWhereInput
    isNot?: ChallengeWhereInput
  }

  export type SolutionCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    author_id?: SortOrder
    challenge_id?: SortOrder
    votes?: SortOrder
    views?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    code?: SortOrder
    verified?: SortOrder
  }

  export type SolutionAvgOrderByAggregateInput = {
    id?: SortOrder
    author_id?: SortOrder
    challenge_id?: SortOrder
    votes?: SortOrder
    views?: SortOrder
  }

  export type SolutionMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    author_id?: SortOrder
    challenge_id?: SortOrder
    votes?: SortOrder
    views?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    code?: SortOrder
    verified?: SortOrder
  }

  export type SolutionMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    author_id?: SortOrder
    challenge_id?: SortOrder
    votes?: SortOrder
    views?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    code?: SortOrder
    verified?: SortOrder
  }

  export type SolutionSumOrderByAggregateInput = {
    id?: SortOrder
    author_id?: SortOrder
    challenge_id?: SortOrder
    votes?: SortOrder
    views?: SortOrder
  }

  export type TagCountOrderByAggregateInput = {
    id?: SortOrder
    tag?: SortOrder
  }

  export type TagAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    id?: SortOrder
    tag?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    id?: SortOrder
    tag?: SortOrder
  }

  export type TagSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TagRelationFilter = {
    is?: TagWhereInput
    isNot?: TagWhereInput
  }

  export type TagsByChallengesChallenge_idTag_idCompoundUniqueInput = {
    challenge_id: number
    tag_id: number
  }

  export type TagsByChallengesCountOrderByAggregateInput = {
    challenge_id?: SortOrder
    tag_id?: SortOrder
  }

  export type TagsByChallengesAvgOrderByAggregateInput = {
    challenge_id?: SortOrder
    tag_id?: SortOrder
  }

  export type TagsByChallengesMaxOrderByAggregateInput = {
    challenge_id?: SortOrder
    tag_id?: SortOrder
  }

  export type TagsByChallengesMinOrderByAggregateInput = {
    challenge_id?: SortOrder
    tag_id?: SortOrder
  }

  export type TagsByChallengesSumOrderByAggregateInput = {
    challenge_id?: SortOrder
    tag_id?: SortOrder
  }

  export type HelpIssueRelationFilter = {
    is?: HelpIssueWhereInput
    isNot?: HelpIssueWhereInput
  }

  export type TagsByIssuesIssue_idTag_idCompoundUniqueInput = {
    issue_id: number
    tag_id: number
  }

  export type TagsByIssuesCountOrderByAggregateInput = {
    issue_id?: SortOrder
    tag_id?: SortOrder
  }

  export type TagsByIssuesAvgOrderByAggregateInput = {
    issue_id?: SortOrder
    tag_id?: SortOrder
  }

  export type TagsByIssuesMaxOrderByAggregateInput = {
    issue_id?: SortOrder
    tag_id?: SortOrder
  }

  export type TagsByIssuesMinOrderByAggregateInput = {
    issue_id?: SortOrder
    tag_id?: SortOrder
  }

  export type TagsByIssuesSumOrderByAggregateInput = {
    issue_id?: SortOrder
    tag_id?: SortOrder
  }

  export type ResourceRelationFilter = {
    is?: ResourceWhereInput
    isNot?: ResourceWhereInput
  }

  export type TagsByResourcesResource_idTag_idCompoundUniqueInput = {
    resource_id: number
    tag_id: number
  }

  export type TagsByResourcesCountOrderByAggregateInput = {
    resource_id?: SortOrder
    tag_id?: SortOrder
  }

  export type TagsByResourcesAvgOrderByAggregateInput = {
    resource_id?: SortOrder
    tag_id?: SortOrder
  }

  export type TagsByResourcesMaxOrderByAggregateInput = {
    resource_id?: SortOrder
    tag_id?: SortOrder
  }

  export type TagsByResourcesMinOrderByAggregateInput = {
    resource_id?: SortOrder
    tag_id?: SortOrder
  }

  export type TagsByResourcesSumOrderByAggregateInput = {
    resource_id?: SortOrder
    tag_id?: SortOrder
  }

  export type HelpIssueCreateNestedManyWithoutAuthorInput = {
    create?: XOR<HelpIssueCreateWithoutAuthorInput, HelpIssueUncheckedCreateWithoutAuthorInput> | HelpIssueCreateWithoutAuthorInput[] | HelpIssueUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: HelpIssueCreateOrConnectWithoutAuthorInput | HelpIssueCreateOrConnectWithoutAuthorInput[]
    createMany?: HelpIssueCreateManyAuthorInputEnvelope
    connect?: HelpIssueWhereUniqueInput | HelpIssueWhereUniqueInput[]
  }

  export type SolutionCreateNestedManyWithoutAuthorInput = {
    create?: XOR<SolutionCreateWithoutAuthorInput, SolutionUncheckedCreateWithoutAuthorInput> | SolutionCreateWithoutAuthorInput[] | SolutionUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: SolutionCreateOrConnectWithoutAuthorInput | SolutionCreateOrConnectWithoutAuthorInput[]
    createMany?: SolutionCreateManyAuthorInputEnvelope
    connect?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
  }

  export type HelpIssueUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<HelpIssueCreateWithoutAuthorInput, HelpIssueUncheckedCreateWithoutAuthorInput> | HelpIssueCreateWithoutAuthorInput[] | HelpIssueUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: HelpIssueCreateOrConnectWithoutAuthorInput | HelpIssueCreateOrConnectWithoutAuthorInput[]
    createMany?: HelpIssueCreateManyAuthorInputEnvelope
    connect?: HelpIssueWhereUniqueInput | HelpIssueWhereUniqueInput[]
  }

  export type SolutionUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<SolutionCreateWithoutAuthorInput, SolutionUncheckedCreateWithoutAuthorInput> | SolutionCreateWithoutAuthorInput[] | SolutionUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: SolutionCreateOrConnectWithoutAuthorInput | SolutionCreateOrConnectWithoutAuthorInput[]
    createMany?: SolutionCreateManyAuthorInputEnvelope
    connect?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type EnumKnowledgeFieldUpdateOperationsInput = {
    set?: $Enums.Knowledge
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type HelpIssueUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<HelpIssueCreateWithoutAuthorInput, HelpIssueUncheckedCreateWithoutAuthorInput> | HelpIssueCreateWithoutAuthorInput[] | HelpIssueUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: HelpIssueCreateOrConnectWithoutAuthorInput | HelpIssueCreateOrConnectWithoutAuthorInput[]
    upsert?: HelpIssueUpsertWithWhereUniqueWithoutAuthorInput | HelpIssueUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: HelpIssueCreateManyAuthorInputEnvelope
    set?: HelpIssueWhereUniqueInput | HelpIssueWhereUniqueInput[]
    disconnect?: HelpIssueWhereUniqueInput | HelpIssueWhereUniqueInput[]
    delete?: HelpIssueWhereUniqueInput | HelpIssueWhereUniqueInput[]
    connect?: HelpIssueWhereUniqueInput | HelpIssueWhereUniqueInput[]
    update?: HelpIssueUpdateWithWhereUniqueWithoutAuthorInput | HelpIssueUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: HelpIssueUpdateManyWithWhereWithoutAuthorInput | HelpIssueUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: HelpIssueScalarWhereInput | HelpIssueScalarWhereInput[]
  }

  export type SolutionUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<SolutionCreateWithoutAuthorInput, SolutionUncheckedCreateWithoutAuthorInput> | SolutionCreateWithoutAuthorInput[] | SolutionUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: SolutionCreateOrConnectWithoutAuthorInput | SolutionCreateOrConnectWithoutAuthorInput[]
    upsert?: SolutionUpsertWithWhereUniqueWithoutAuthorInput | SolutionUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: SolutionCreateManyAuthorInputEnvelope
    set?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    disconnect?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    delete?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    connect?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    update?: SolutionUpdateWithWhereUniqueWithoutAuthorInput | SolutionUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: SolutionUpdateManyWithWhereWithoutAuthorInput | SolutionUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: SolutionScalarWhereInput | SolutionScalarWhereInput[]
  }

  export type HelpIssueUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<HelpIssueCreateWithoutAuthorInput, HelpIssueUncheckedCreateWithoutAuthorInput> | HelpIssueCreateWithoutAuthorInput[] | HelpIssueUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: HelpIssueCreateOrConnectWithoutAuthorInput | HelpIssueCreateOrConnectWithoutAuthorInput[]
    upsert?: HelpIssueUpsertWithWhereUniqueWithoutAuthorInput | HelpIssueUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: HelpIssueCreateManyAuthorInputEnvelope
    set?: HelpIssueWhereUniqueInput | HelpIssueWhereUniqueInput[]
    disconnect?: HelpIssueWhereUniqueInput | HelpIssueWhereUniqueInput[]
    delete?: HelpIssueWhereUniqueInput | HelpIssueWhereUniqueInput[]
    connect?: HelpIssueWhereUniqueInput | HelpIssueWhereUniqueInput[]
    update?: HelpIssueUpdateWithWhereUniqueWithoutAuthorInput | HelpIssueUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: HelpIssueUpdateManyWithWhereWithoutAuthorInput | HelpIssueUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: HelpIssueScalarWhereInput | HelpIssueScalarWhereInput[]
  }

  export type SolutionUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<SolutionCreateWithoutAuthorInput, SolutionUncheckedCreateWithoutAuthorInput> | SolutionCreateWithoutAuthorInput[] | SolutionUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: SolutionCreateOrConnectWithoutAuthorInput | SolutionCreateOrConnectWithoutAuthorInput[]
    upsert?: SolutionUpsertWithWhereUniqueWithoutAuthorInput | SolutionUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: SolutionCreateManyAuthorInputEnvelope
    set?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    disconnect?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    delete?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    connect?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    update?: SolutionUpdateWithWhereUniqueWithoutAuthorInput | SolutionUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: SolutionUpdateManyWithWhereWithoutAuthorInput | SolutionUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: SolutionScalarWhereInput | SolutionScalarWhereInput[]
  }

  export type TagsByChallengesCreateNestedManyWithoutChallengeInput = {
    create?: XOR<TagsByChallengesCreateWithoutChallengeInput, TagsByChallengesUncheckedCreateWithoutChallengeInput> | TagsByChallengesCreateWithoutChallengeInput[] | TagsByChallengesUncheckedCreateWithoutChallengeInput[]
    connectOrCreate?: TagsByChallengesCreateOrConnectWithoutChallengeInput | TagsByChallengesCreateOrConnectWithoutChallengeInput[]
    createMany?: TagsByChallengesCreateManyChallengeInputEnvelope
    connect?: TagsByChallengesWhereUniqueInput | TagsByChallengesWhereUniqueInput[]
  }

  export type SolutionCreateNestedManyWithoutChallengeInput = {
    create?: XOR<SolutionCreateWithoutChallengeInput, SolutionUncheckedCreateWithoutChallengeInput> | SolutionCreateWithoutChallengeInput[] | SolutionUncheckedCreateWithoutChallengeInput[]
    connectOrCreate?: SolutionCreateOrConnectWithoutChallengeInput | SolutionCreateOrConnectWithoutChallengeInput[]
    createMany?: SolutionCreateManyChallengeInputEnvelope
    connect?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
  }

  export type TagsByChallengesUncheckedCreateNestedManyWithoutChallengeInput = {
    create?: XOR<TagsByChallengesCreateWithoutChallengeInput, TagsByChallengesUncheckedCreateWithoutChallengeInput> | TagsByChallengesCreateWithoutChallengeInput[] | TagsByChallengesUncheckedCreateWithoutChallengeInput[]
    connectOrCreate?: TagsByChallengesCreateOrConnectWithoutChallengeInput | TagsByChallengesCreateOrConnectWithoutChallengeInput[]
    createMany?: TagsByChallengesCreateManyChallengeInputEnvelope
    connect?: TagsByChallengesWhereUniqueInput | TagsByChallengesWhereUniqueInput[]
  }

  export type SolutionUncheckedCreateNestedManyWithoutChallengeInput = {
    create?: XOR<SolutionCreateWithoutChallengeInput, SolutionUncheckedCreateWithoutChallengeInput> | SolutionCreateWithoutChallengeInput[] | SolutionUncheckedCreateWithoutChallengeInput[]
    connectOrCreate?: SolutionCreateOrConnectWithoutChallengeInput | SolutionCreateOrConnectWithoutChallengeInput[]
    createMany?: SolutionCreateManyChallengeInputEnvelope
    connect?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumDifficultyFieldUpdateOperationsInput = {
    set?: $Enums.Difficulty
  }

  export type TagsByChallengesUpdateManyWithoutChallengeNestedInput = {
    create?: XOR<TagsByChallengesCreateWithoutChallengeInput, TagsByChallengesUncheckedCreateWithoutChallengeInput> | TagsByChallengesCreateWithoutChallengeInput[] | TagsByChallengesUncheckedCreateWithoutChallengeInput[]
    connectOrCreate?: TagsByChallengesCreateOrConnectWithoutChallengeInput | TagsByChallengesCreateOrConnectWithoutChallengeInput[]
    upsert?: TagsByChallengesUpsertWithWhereUniqueWithoutChallengeInput | TagsByChallengesUpsertWithWhereUniqueWithoutChallengeInput[]
    createMany?: TagsByChallengesCreateManyChallengeInputEnvelope
    set?: TagsByChallengesWhereUniqueInput | TagsByChallengesWhereUniqueInput[]
    disconnect?: TagsByChallengesWhereUniqueInput | TagsByChallengesWhereUniqueInput[]
    delete?: TagsByChallengesWhereUniqueInput | TagsByChallengesWhereUniqueInput[]
    connect?: TagsByChallengesWhereUniqueInput | TagsByChallengesWhereUniqueInput[]
    update?: TagsByChallengesUpdateWithWhereUniqueWithoutChallengeInput | TagsByChallengesUpdateWithWhereUniqueWithoutChallengeInput[]
    updateMany?: TagsByChallengesUpdateManyWithWhereWithoutChallengeInput | TagsByChallengesUpdateManyWithWhereWithoutChallengeInput[]
    deleteMany?: TagsByChallengesScalarWhereInput | TagsByChallengesScalarWhereInput[]
  }

  export type SolutionUpdateManyWithoutChallengeNestedInput = {
    create?: XOR<SolutionCreateWithoutChallengeInput, SolutionUncheckedCreateWithoutChallengeInput> | SolutionCreateWithoutChallengeInput[] | SolutionUncheckedCreateWithoutChallengeInput[]
    connectOrCreate?: SolutionCreateOrConnectWithoutChallengeInput | SolutionCreateOrConnectWithoutChallengeInput[]
    upsert?: SolutionUpsertWithWhereUniqueWithoutChallengeInput | SolutionUpsertWithWhereUniqueWithoutChallengeInput[]
    createMany?: SolutionCreateManyChallengeInputEnvelope
    set?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    disconnect?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    delete?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    connect?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    update?: SolutionUpdateWithWhereUniqueWithoutChallengeInput | SolutionUpdateWithWhereUniqueWithoutChallengeInput[]
    updateMany?: SolutionUpdateManyWithWhereWithoutChallengeInput | SolutionUpdateManyWithWhereWithoutChallengeInput[]
    deleteMany?: SolutionScalarWhereInput | SolutionScalarWhereInput[]
  }

  export type TagsByChallengesUncheckedUpdateManyWithoutChallengeNestedInput = {
    create?: XOR<TagsByChallengesCreateWithoutChallengeInput, TagsByChallengesUncheckedCreateWithoutChallengeInput> | TagsByChallengesCreateWithoutChallengeInput[] | TagsByChallengesUncheckedCreateWithoutChallengeInput[]
    connectOrCreate?: TagsByChallengesCreateOrConnectWithoutChallengeInput | TagsByChallengesCreateOrConnectWithoutChallengeInput[]
    upsert?: TagsByChallengesUpsertWithWhereUniqueWithoutChallengeInput | TagsByChallengesUpsertWithWhereUniqueWithoutChallengeInput[]
    createMany?: TagsByChallengesCreateManyChallengeInputEnvelope
    set?: TagsByChallengesWhereUniqueInput | TagsByChallengesWhereUniqueInput[]
    disconnect?: TagsByChallengesWhereUniqueInput | TagsByChallengesWhereUniqueInput[]
    delete?: TagsByChallengesWhereUniqueInput | TagsByChallengesWhereUniqueInput[]
    connect?: TagsByChallengesWhereUniqueInput | TagsByChallengesWhereUniqueInput[]
    update?: TagsByChallengesUpdateWithWhereUniqueWithoutChallengeInput | TagsByChallengesUpdateWithWhereUniqueWithoutChallengeInput[]
    updateMany?: TagsByChallengesUpdateManyWithWhereWithoutChallengeInput | TagsByChallengesUpdateManyWithWhereWithoutChallengeInput[]
    deleteMany?: TagsByChallengesScalarWhereInput | TagsByChallengesScalarWhereInput[]
  }

  export type SolutionUncheckedUpdateManyWithoutChallengeNestedInput = {
    create?: XOR<SolutionCreateWithoutChallengeInput, SolutionUncheckedCreateWithoutChallengeInput> | SolutionCreateWithoutChallengeInput[] | SolutionUncheckedCreateWithoutChallengeInput[]
    connectOrCreate?: SolutionCreateOrConnectWithoutChallengeInput | SolutionCreateOrConnectWithoutChallengeInput[]
    upsert?: SolutionUpsertWithWhereUniqueWithoutChallengeInput | SolutionUpsertWithWhereUniqueWithoutChallengeInput[]
    createMany?: SolutionCreateManyChallengeInputEnvelope
    set?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    disconnect?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    delete?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    connect?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    update?: SolutionUpdateWithWhereUniqueWithoutChallengeInput | SolutionUpdateWithWhereUniqueWithoutChallengeInput[]
    updateMany?: SolutionUpdateManyWithWhereWithoutChallengeInput | SolutionUpdateManyWithWhereWithoutChallengeInput[]
    deleteMany?: SolutionScalarWhereInput | SolutionScalarWhereInput[]
  }

  export type TagsByResourcesCreateNestedManyWithoutResourceInput = {
    create?: XOR<TagsByResourcesCreateWithoutResourceInput, TagsByResourcesUncheckedCreateWithoutResourceInput> | TagsByResourcesCreateWithoutResourceInput[] | TagsByResourcesUncheckedCreateWithoutResourceInput[]
    connectOrCreate?: TagsByResourcesCreateOrConnectWithoutResourceInput | TagsByResourcesCreateOrConnectWithoutResourceInput[]
    createMany?: TagsByResourcesCreateManyResourceInputEnvelope
    connect?: TagsByResourcesWhereUniqueInput | TagsByResourcesWhereUniqueInput[]
  }

  export type TagsByResourcesUncheckedCreateNestedManyWithoutResourceInput = {
    create?: XOR<TagsByResourcesCreateWithoutResourceInput, TagsByResourcesUncheckedCreateWithoutResourceInput> | TagsByResourcesCreateWithoutResourceInput[] | TagsByResourcesUncheckedCreateWithoutResourceInput[]
    connectOrCreate?: TagsByResourcesCreateOrConnectWithoutResourceInput | TagsByResourcesCreateOrConnectWithoutResourceInput[]
    createMany?: TagsByResourcesCreateManyResourceInputEnvelope
    connect?: TagsByResourcesWhereUniqueInput | TagsByResourcesWhereUniqueInput[]
  }

  export type EnumResourceTypeFieldUpdateOperationsInput = {
    set?: $Enums.ResourceType
  }

  export type TagsByResourcesUpdateManyWithoutResourceNestedInput = {
    create?: XOR<TagsByResourcesCreateWithoutResourceInput, TagsByResourcesUncheckedCreateWithoutResourceInput> | TagsByResourcesCreateWithoutResourceInput[] | TagsByResourcesUncheckedCreateWithoutResourceInput[]
    connectOrCreate?: TagsByResourcesCreateOrConnectWithoutResourceInput | TagsByResourcesCreateOrConnectWithoutResourceInput[]
    upsert?: TagsByResourcesUpsertWithWhereUniqueWithoutResourceInput | TagsByResourcesUpsertWithWhereUniqueWithoutResourceInput[]
    createMany?: TagsByResourcesCreateManyResourceInputEnvelope
    set?: TagsByResourcesWhereUniqueInput | TagsByResourcesWhereUniqueInput[]
    disconnect?: TagsByResourcesWhereUniqueInput | TagsByResourcesWhereUniqueInput[]
    delete?: TagsByResourcesWhereUniqueInput | TagsByResourcesWhereUniqueInput[]
    connect?: TagsByResourcesWhereUniqueInput | TagsByResourcesWhereUniqueInput[]
    update?: TagsByResourcesUpdateWithWhereUniqueWithoutResourceInput | TagsByResourcesUpdateWithWhereUniqueWithoutResourceInput[]
    updateMany?: TagsByResourcesUpdateManyWithWhereWithoutResourceInput | TagsByResourcesUpdateManyWithWhereWithoutResourceInput[]
    deleteMany?: TagsByResourcesScalarWhereInput | TagsByResourcesScalarWhereInput[]
  }

  export type TagsByResourcesUncheckedUpdateManyWithoutResourceNestedInput = {
    create?: XOR<TagsByResourcesCreateWithoutResourceInput, TagsByResourcesUncheckedCreateWithoutResourceInput> | TagsByResourcesCreateWithoutResourceInput[] | TagsByResourcesUncheckedCreateWithoutResourceInput[]
    connectOrCreate?: TagsByResourcesCreateOrConnectWithoutResourceInput | TagsByResourcesCreateOrConnectWithoutResourceInput[]
    upsert?: TagsByResourcesUpsertWithWhereUniqueWithoutResourceInput | TagsByResourcesUpsertWithWhereUniqueWithoutResourceInput[]
    createMany?: TagsByResourcesCreateManyResourceInputEnvelope
    set?: TagsByResourcesWhereUniqueInput | TagsByResourcesWhereUniqueInput[]
    disconnect?: TagsByResourcesWhereUniqueInput | TagsByResourcesWhereUniqueInput[]
    delete?: TagsByResourcesWhereUniqueInput | TagsByResourcesWhereUniqueInput[]
    connect?: TagsByResourcesWhereUniqueInput | TagsByResourcesWhereUniqueInput[]
    update?: TagsByResourcesUpdateWithWhereUniqueWithoutResourceInput | TagsByResourcesUpdateWithWhereUniqueWithoutResourceInput[]
    updateMany?: TagsByResourcesUpdateManyWithWhereWithoutResourceInput | TagsByResourcesUpdateManyWithWhereWithoutResourceInput[]
    deleteMany?: TagsByResourcesScalarWhereInput | TagsByResourcesScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutIssuesInput = {
    create?: XOR<UserCreateWithoutIssuesInput, UserUncheckedCreateWithoutIssuesInput>
    connectOrCreate?: UserCreateOrConnectWithoutIssuesInput
    connect?: UserWhereUniqueInput
  }

  export type TagsByIssuesCreateNestedManyWithoutIssueInput = {
    create?: XOR<TagsByIssuesCreateWithoutIssueInput, TagsByIssuesUncheckedCreateWithoutIssueInput> | TagsByIssuesCreateWithoutIssueInput[] | TagsByIssuesUncheckedCreateWithoutIssueInput[]
    connectOrCreate?: TagsByIssuesCreateOrConnectWithoutIssueInput | TagsByIssuesCreateOrConnectWithoutIssueInput[]
    createMany?: TagsByIssuesCreateManyIssueInputEnvelope
    connect?: TagsByIssuesWhereUniqueInput | TagsByIssuesWhereUniqueInput[]
  }

  export type TagsByIssuesUncheckedCreateNestedManyWithoutIssueInput = {
    create?: XOR<TagsByIssuesCreateWithoutIssueInput, TagsByIssuesUncheckedCreateWithoutIssueInput> | TagsByIssuesCreateWithoutIssueInput[] | TagsByIssuesUncheckedCreateWithoutIssueInput[]
    connectOrCreate?: TagsByIssuesCreateOrConnectWithoutIssueInput | TagsByIssuesCreateOrConnectWithoutIssueInput[]
    createMany?: TagsByIssuesCreateManyIssueInputEnvelope
    connect?: TagsByIssuesWhereUniqueInput | TagsByIssuesWhereUniqueInput[]
  }

  export type EnumIssueStatusFieldUpdateOperationsInput = {
    set?: $Enums.IssueStatus
  }

  export type UserUpdateOneRequiredWithoutIssuesNestedInput = {
    create?: XOR<UserCreateWithoutIssuesInput, UserUncheckedCreateWithoutIssuesInput>
    connectOrCreate?: UserCreateOrConnectWithoutIssuesInput
    upsert?: UserUpsertWithoutIssuesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutIssuesInput, UserUpdateWithoutIssuesInput>, UserUncheckedUpdateWithoutIssuesInput>
  }

  export type TagsByIssuesUpdateManyWithoutIssueNestedInput = {
    create?: XOR<TagsByIssuesCreateWithoutIssueInput, TagsByIssuesUncheckedCreateWithoutIssueInput> | TagsByIssuesCreateWithoutIssueInput[] | TagsByIssuesUncheckedCreateWithoutIssueInput[]
    connectOrCreate?: TagsByIssuesCreateOrConnectWithoutIssueInput | TagsByIssuesCreateOrConnectWithoutIssueInput[]
    upsert?: TagsByIssuesUpsertWithWhereUniqueWithoutIssueInput | TagsByIssuesUpsertWithWhereUniqueWithoutIssueInput[]
    createMany?: TagsByIssuesCreateManyIssueInputEnvelope
    set?: TagsByIssuesWhereUniqueInput | TagsByIssuesWhereUniqueInput[]
    disconnect?: TagsByIssuesWhereUniqueInput | TagsByIssuesWhereUniqueInput[]
    delete?: TagsByIssuesWhereUniqueInput | TagsByIssuesWhereUniqueInput[]
    connect?: TagsByIssuesWhereUniqueInput | TagsByIssuesWhereUniqueInput[]
    update?: TagsByIssuesUpdateWithWhereUniqueWithoutIssueInput | TagsByIssuesUpdateWithWhereUniqueWithoutIssueInput[]
    updateMany?: TagsByIssuesUpdateManyWithWhereWithoutIssueInput | TagsByIssuesUpdateManyWithWhereWithoutIssueInput[]
    deleteMany?: TagsByIssuesScalarWhereInput | TagsByIssuesScalarWhereInput[]
  }

  export type TagsByIssuesUncheckedUpdateManyWithoutIssueNestedInput = {
    create?: XOR<TagsByIssuesCreateWithoutIssueInput, TagsByIssuesUncheckedCreateWithoutIssueInput> | TagsByIssuesCreateWithoutIssueInput[] | TagsByIssuesUncheckedCreateWithoutIssueInput[]
    connectOrCreate?: TagsByIssuesCreateOrConnectWithoutIssueInput | TagsByIssuesCreateOrConnectWithoutIssueInput[]
    upsert?: TagsByIssuesUpsertWithWhereUniqueWithoutIssueInput | TagsByIssuesUpsertWithWhereUniqueWithoutIssueInput[]
    createMany?: TagsByIssuesCreateManyIssueInputEnvelope
    set?: TagsByIssuesWhereUniqueInput | TagsByIssuesWhereUniqueInput[]
    disconnect?: TagsByIssuesWhereUniqueInput | TagsByIssuesWhereUniqueInput[]
    delete?: TagsByIssuesWhereUniqueInput | TagsByIssuesWhereUniqueInput[]
    connect?: TagsByIssuesWhereUniqueInput | TagsByIssuesWhereUniqueInput[]
    update?: TagsByIssuesUpdateWithWhereUniqueWithoutIssueInput | TagsByIssuesUpdateWithWhereUniqueWithoutIssueInput[]
    updateMany?: TagsByIssuesUpdateManyWithWhereWithoutIssueInput | TagsByIssuesUpdateManyWithWhereWithoutIssueInput[]
    deleteMany?: TagsByIssuesScalarWhereInput | TagsByIssuesScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSolutionsInput = {
    create?: XOR<UserCreateWithoutSolutionsInput, UserUncheckedCreateWithoutSolutionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSolutionsInput
    connect?: UserWhereUniqueInput
  }

  export type ChallengeCreateNestedOneWithoutSolutionsInput = {
    create?: XOR<ChallengeCreateWithoutSolutionsInput, ChallengeUncheckedCreateWithoutSolutionsInput>
    connectOrCreate?: ChallengeCreateOrConnectWithoutSolutionsInput
    connect?: ChallengeWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSolutionsNestedInput = {
    create?: XOR<UserCreateWithoutSolutionsInput, UserUncheckedCreateWithoutSolutionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSolutionsInput
    upsert?: UserUpsertWithoutSolutionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSolutionsInput, UserUpdateWithoutSolutionsInput>, UserUncheckedUpdateWithoutSolutionsInput>
  }

  export type ChallengeUpdateOneRequiredWithoutSolutionsNestedInput = {
    create?: XOR<ChallengeCreateWithoutSolutionsInput, ChallengeUncheckedCreateWithoutSolutionsInput>
    connectOrCreate?: ChallengeCreateOrConnectWithoutSolutionsInput
    upsert?: ChallengeUpsertWithoutSolutionsInput
    connect?: ChallengeWhereUniqueInput
    update?: XOR<XOR<ChallengeUpdateToOneWithWhereWithoutSolutionsInput, ChallengeUpdateWithoutSolutionsInput>, ChallengeUncheckedUpdateWithoutSolutionsInput>
  }

  export type TagsByChallengesCreateNestedManyWithoutTagInput = {
    create?: XOR<TagsByChallengesCreateWithoutTagInput, TagsByChallengesUncheckedCreateWithoutTagInput> | TagsByChallengesCreateWithoutTagInput[] | TagsByChallengesUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagsByChallengesCreateOrConnectWithoutTagInput | TagsByChallengesCreateOrConnectWithoutTagInput[]
    createMany?: TagsByChallengesCreateManyTagInputEnvelope
    connect?: TagsByChallengesWhereUniqueInput | TagsByChallengesWhereUniqueInput[]
  }

  export type TagsByIssuesCreateNestedManyWithoutTagInput = {
    create?: XOR<TagsByIssuesCreateWithoutTagInput, TagsByIssuesUncheckedCreateWithoutTagInput> | TagsByIssuesCreateWithoutTagInput[] | TagsByIssuesUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagsByIssuesCreateOrConnectWithoutTagInput | TagsByIssuesCreateOrConnectWithoutTagInput[]
    createMany?: TagsByIssuesCreateManyTagInputEnvelope
    connect?: TagsByIssuesWhereUniqueInput | TagsByIssuesWhereUniqueInput[]
  }

  export type TagsByResourcesCreateNestedManyWithoutTagInput = {
    create?: XOR<TagsByResourcesCreateWithoutTagInput, TagsByResourcesUncheckedCreateWithoutTagInput> | TagsByResourcesCreateWithoutTagInput[] | TagsByResourcesUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagsByResourcesCreateOrConnectWithoutTagInput | TagsByResourcesCreateOrConnectWithoutTagInput[]
    createMany?: TagsByResourcesCreateManyTagInputEnvelope
    connect?: TagsByResourcesWhereUniqueInput | TagsByResourcesWhereUniqueInput[]
  }

  export type TagsByChallengesUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<TagsByChallengesCreateWithoutTagInput, TagsByChallengesUncheckedCreateWithoutTagInput> | TagsByChallengesCreateWithoutTagInput[] | TagsByChallengesUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagsByChallengesCreateOrConnectWithoutTagInput | TagsByChallengesCreateOrConnectWithoutTagInput[]
    createMany?: TagsByChallengesCreateManyTagInputEnvelope
    connect?: TagsByChallengesWhereUniqueInput | TagsByChallengesWhereUniqueInput[]
  }

  export type TagsByIssuesUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<TagsByIssuesCreateWithoutTagInput, TagsByIssuesUncheckedCreateWithoutTagInput> | TagsByIssuesCreateWithoutTagInput[] | TagsByIssuesUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagsByIssuesCreateOrConnectWithoutTagInput | TagsByIssuesCreateOrConnectWithoutTagInput[]
    createMany?: TagsByIssuesCreateManyTagInputEnvelope
    connect?: TagsByIssuesWhereUniqueInput | TagsByIssuesWhereUniqueInput[]
  }

  export type TagsByResourcesUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<TagsByResourcesCreateWithoutTagInput, TagsByResourcesUncheckedCreateWithoutTagInput> | TagsByResourcesCreateWithoutTagInput[] | TagsByResourcesUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagsByResourcesCreateOrConnectWithoutTagInput | TagsByResourcesCreateOrConnectWithoutTagInput[]
    createMany?: TagsByResourcesCreateManyTagInputEnvelope
    connect?: TagsByResourcesWhereUniqueInput | TagsByResourcesWhereUniqueInput[]
  }

  export type TagsByChallengesUpdateManyWithoutTagNestedInput = {
    create?: XOR<TagsByChallengesCreateWithoutTagInput, TagsByChallengesUncheckedCreateWithoutTagInput> | TagsByChallengesCreateWithoutTagInput[] | TagsByChallengesUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagsByChallengesCreateOrConnectWithoutTagInput | TagsByChallengesCreateOrConnectWithoutTagInput[]
    upsert?: TagsByChallengesUpsertWithWhereUniqueWithoutTagInput | TagsByChallengesUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: TagsByChallengesCreateManyTagInputEnvelope
    set?: TagsByChallengesWhereUniqueInput | TagsByChallengesWhereUniqueInput[]
    disconnect?: TagsByChallengesWhereUniqueInput | TagsByChallengesWhereUniqueInput[]
    delete?: TagsByChallengesWhereUniqueInput | TagsByChallengesWhereUniqueInput[]
    connect?: TagsByChallengesWhereUniqueInput | TagsByChallengesWhereUniqueInput[]
    update?: TagsByChallengesUpdateWithWhereUniqueWithoutTagInput | TagsByChallengesUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: TagsByChallengesUpdateManyWithWhereWithoutTagInput | TagsByChallengesUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: TagsByChallengesScalarWhereInput | TagsByChallengesScalarWhereInput[]
  }

  export type TagsByIssuesUpdateManyWithoutTagNestedInput = {
    create?: XOR<TagsByIssuesCreateWithoutTagInput, TagsByIssuesUncheckedCreateWithoutTagInput> | TagsByIssuesCreateWithoutTagInput[] | TagsByIssuesUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagsByIssuesCreateOrConnectWithoutTagInput | TagsByIssuesCreateOrConnectWithoutTagInput[]
    upsert?: TagsByIssuesUpsertWithWhereUniqueWithoutTagInput | TagsByIssuesUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: TagsByIssuesCreateManyTagInputEnvelope
    set?: TagsByIssuesWhereUniqueInput | TagsByIssuesWhereUniqueInput[]
    disconnect?: TagsByIssuesWhereUniqueInput | TagsByIssuesWhereUniqueInput[]
    delete?: TagsByIssuesWhereUniqueInput | TagsByIssuesWhereUniqueInput[]
    connect?: TagsByIssuesWhereUniqueInput | TagsByIssuesWhereUniqueInput[]
    update?: TagsByIssuesUpdateWithWhereUniqueWithoutTagInput | TagsByIssuesUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: TagsByIssuesUpdateManyWithWhereWithoutTagInput | TagsByIssuesUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: TagsByIssuesScalarWhereInput | TagsByIssuesScalarWhereInput[]
  }

  export type TagsByResourcesUpdateManyWithoutTagNestedInput = {
    create?: XOR<TagsByResourcesCreateWithoutTagInput, TagsByResourcesUncheckedCreateWithoutTagInput> | TagsByResourcesCreateWithoutTagInput[] | TagsByResourcesUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagsByResourcesCreateOrConnectWithoutTagInput | TagsByResourcesCreateOrConnectWithoutTagInput[]
    upsert?: TagsByResourcesUpsertWithWhereUniqueWithoutTagInput | TagsByResourcesUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: TagsByResourcesCreateManyTagInputEnvelope
    set?: TagsByResourcesWhereUniqueInput | TagsByResourcesWhereUniqueInput[]
    disconnect?: TagsByResourcesWhereUniqueInput | TagsByResourcesWhereUniqueInput[]
    delete?: TagsByResourcesWhereUniqueInput | TagsByResourcesWhereUniqueInput[]
    connect?: TagsByResourcesWhereUniqueInput | TagsByResourcesWhereUniqueInput[]
    update?: TagsByResourcesUpdateWithWhereUniqueWithoutTagInput | TagsByResourcesUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: TagsByResourcesUpdateManyWithWhereWithoutTagInput | TagsByResourcesUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: TagsByResourcesScalarWhereInput | TagsByResourcesScalarWhereInput[]
  }

  export type TagsByChallengesUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<TagsByChallengesCreateWithoutTagInput, TagsByChallengesUncheckedCreateWithoutTagInput> | TagsByChallengesCreateWithoutTagInput[] | TagsByChallengesUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagsByChallengesCreateOrConnectWithoutTagInput | TagsByChallengesCreateOrConnectWithoutTagInput[]
    upsert?: TagsByChallengesUpsertWithWhereUniqueWithoutTagInput | TagsByChallengesUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: TagsByChallengesCreateManyTagInputEnvelope
    set?: TagsByChallengesWhereUniqueInput | TagsByChallengesWhereUniqueInput[]
    disconnect?: TagsByChallengesWhereUniqueInput | TagsByChallengesWhereUniqueInput[]
    delete?: TagsByChallengesWhereUniqueInput | TagsByChallengesWhereUniqueInput[]
    connect?: TagsByChallengesWhereUniqueInput | TagsByChallengesWhereUniqueInput[]
    update?: TagsByChallengesUpdateWithWhereUniqueWithoutTagInput | TagsByChallengesUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: TagsByChallengesUpdateManyWithWhereWithoutTagInput | TagsByChallengesUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: TagsByChallengesScalarWhereInput | TagsByChallengesScalarWhereInput[]
  }

  export type TagsByIssuesUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<TagsByIssuesCreateWithoutTagInput, TagsByIssuesUncheckedCreateWithoutTagInput> | TagsByIssuesCreateWithoutTagInput[] | TagsByIssuesUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagsByIssuesCreateOrConnectWithoutTagInput | TagsByIssuesCreateOrConnectWithoutTagInput[]
    upsert?: TagsByIssuesUpsertWithWhereUniqueWithoutTagInput | TagsByIssuesUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: TagsByIssuesCreateManyTagInputEnvelope
    set?: TagsByIssuesWhereUniqueInput | TagsByIssuesWhereUniqueInput[]
    disconnect?: TagsByIssuesWhereUniqueInput | TagsByIssuesWhereUniqueInput[]
    delete?: TagsByIssuesWhereUniqueInput | TagsByIssuesWhereUniqueInput[]
    connect?: TagsByIssuesWhereUniqueInput | TagsByIssuesWhereUniqueInput[]
    update?: TagsByIssuesUpdateWithWhereUniqueWithoutTagInput | TagsByIssuesUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: TagsByIssuesUpdateManyWithWhereWithoutTagInput | TagsByIssuesUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: TagsByIssuesScalarWhereInput | TagsByIssuesScalarWhereInput[]
  }

  export type TagsByResourcesUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<TagsByResourcesCreateWithoutTagInput, TagsByResourcesUncheckedCreateWithoutTagInput> | TagsByResourcesCreateWithoutTagInput[] | TagsByResourcesUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagsByResourcesCreateOrConnectWithoutTagInput | TagsByResourcesCreateOrConnectWithoutTagInput[]
    upsert?: TagsByResourcesUpsertWithWhereUniqueWithoutTagInput | TagsByResourcesUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: TagsByResourcesCreateManyTagInputEnvelope
    set?: TagsByResourcesWhereUniqueInput | TagsByResourcesWhereUniqueInput[]
    disconnect?: TagsByResourcesWhereUniqueInput | TagsByResourcesWhereUniqueInput[]
    delete?: TagsByResourcesWhereUniqueInput | TagsByResourcesWhereUniqueInput[]
    connect?: TagsByResourcesWhereUniqueInput | TagsByResourcesWhereUniqueInput[]
    update?: TagsByResourcesUpdateWithWhereUniqueWithoutTagInput | TagsByResourcesUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: TagsByResourcesUpdateManyWithWhereWithoutTagInput | TagsByResourcesUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: TagsByResourcesScalarWhereInput | TagsByResourcesScalarWhereInput[]
  }

  export type ChallengeCreateNestedOneWithoutTagsInput = {
    create?: XOR<ChallengeCreateWithoutTagsInput, ChallengeUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ChallengeCreateOrConnectWithoutTagsInput
    connect?: ChallengeWhereUniqueInput
  }

  export type TagCreateNestedOneWithoutChallengesInput = {
    create?: XOR<TagCreateWithoutChallengesInput, TagUncheckedCreateWithoutChallengesInput>
    connectOrCreate?: TagCreateOrConnectWithoutChallengesInput
    connect?: TagWhereUniqueInput
  }

  export type ChallengeUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<ChallengeCreateWithoutTagsInput, ChallengeUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ChallengeCreateOrConnectWithoutTagsInput
    upsert?: ChallengeUpsertWithoutTagsInput
    connect?: ChallengeWhereUniqueInput
    update?: XOR<XOR<ChallengeUpdateToOneWithWhereWithoutTagsInput, ChallengeUpdateWithoutTagsInput>, ChallengeUncheckedUpdateWithoutTagsInput>
  }

  export type TagUpdateOneRequiredWithoutChallengesNestedInput = {
    create?: XOR<TagCreateWithoutChallengesInput, TagUncheckedCreateWithoutChallengesInput>
    connectOrCreate?: TagCreateOrConnectWithoutChallengesInput
    upsert?: TagUpsertWithoutChallengesInput
    connect?: TagWhereUniqueInput
    update?: XOR<XOR<TagUpdateToOneWithWhereWithoutChallengesInput, TagUpdateWithoutChallengesInput>, TagUncheckedUpdateWithoutChallengesInput>
  }

  export type HelpIssueCreateNestedOneWithoutTagsInput = {
    create?: XOR<HelpIssueCreateWithoutTagsInput, HelpIssueUncheckedCreateWithoutTagsInput>
    connectOrCreate?: HelpIssueCreateOrConnectWithoutTagsInput
    connect?: HelpIssueWhereUniqueInput
  }

  export type TagCreateNestedOneWithoutIssuesInput = {
    create?: XOR<TagCreateWithoutIssuesInput, TagUncheckedCreateWithoutIssuesInput>
    connectOrCreate?: TagCreateOrConnectWithoutIssuesInput
    connect?: TagWhereUniqueInput
  }

  export type HelpIssueUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<HelpIssueCreateWithoutTagsInput, HelpIssueUncheckedCreateWithoutTagsInput>
    connectOrCreate?: HelpIssueCreateOrConnectWithoutTagsInput
    upsert?: HelpIssueUpsertWithoutTagsInput
    connect?: HelpIssueWhereUniqueInput
    update?: XOR<XOR<HelpIssueUpdateToOneWithWhereWithoutTagsInput, HelpIssueUpdateWithoutTagsInput>, HelpIssueUncheckedUpdateWithoutTagsInput>
  }

  export type TagUpdateOneRequiredWithoutIssuesNestedInput = {
    create?: XOR<TagCreateWithoutIssuesInput, TagUncheckedCreateWithoutIssuesInput>
    connectOrCreate?: TagCreateOrConnectWithoutIssuesInput
    upsert?: TagUpsertWithoutIssuesInput
    connect?: TagWhereUniqueInput
    update?: XOR<XOR<TagUpdateToOneWithWhereWithoutIssuesInput, TagUpdateWithoutIssuesInput>, TagUncheckedUpdateWithoutIssuesInput>
  }

  export type ResourceCreateNestedOneWithoutTagsInput = {
    create?: XOR<ResourceCreateWithoutTagsInput, ResourceUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ResourceCreateOrConnectWithoutTagsInput
    connect?: ResourceWhereUniqueInput
  }

  export type TagCreateNestedOneWithoutResourcesInput = {
    create?: XOR<TagCreateWithoutResourcesInput, TagUncheckedCreateWithoutResourcesInput>
    connectOrCreate?: TagCreateOrConnectWithoutResourcesInput
    connect?: TagWhereUniqueInput
  }

  export type ResourceUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<ResourceCreateWithoutTagsInput, ResourceUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ResourceCreateOrConnectWithoutTagsInput
    upsert?: ResourceUpsertWithoutTagsInput
    connect?: ResourceWhereUniqueInput
    update?: XOR<XOR<ResourceUpdateToOneWithWhereWithoutTagsInput, ResourceUpdateWithoutTagsInput>, ResourceUncheckedUpdateWithoutTagsInput>
  }

  export type TagUpdateOneRequiredWithoutResourcesNestedInput = {
    create?: XOR<TagCreateWithoutResourcesInput, TagUncheckedCreateWithoutResourcesInput>
    connectOrCreate?: TagCreateOrConnectWithoutResourcesInput
    upsert?: TagUpsertWithoutResourcesInput
    connect?: TagWhereUniqueInput
    update?: XOR<XOR<TagUpdateToOneWithWhereWithoutResourcesInput, TagUpdateWithoutResourcesInput>, TagUncheckedUpdateWithoutResourcesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumKnowledgeFilter<$PrismaModel = never> = {
    equals?: $Enums.Knowledge | EnumKnowledgeFieldRefInput<$PrismaModel>
    in?: $Enums.Knowledge[]
    notIn?: $Enums.Knowledge[]
    not?: NestedEnumKnowledgeFilter<$PrismaModel> | $Enums.Knowledge
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedEnumKnowledgeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Knowledge | EnumKnowledgeFieldRefInput<$PrismaModel>
    in?: $Enums.Knowledge[]
    notIn?: $Enums.Knowledge[]
    not?: NestedEnumKnowledgeWithAggregatesFilter<$PrismaModel> | $Enums.Knowledge
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumKnowledgeFilter<$PrismaModel>
    _max?: NestedEnumKnowledgeFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumDifficultyFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[]
    notIn?: $Enums.Difficulty[]
    not?: NestedEnumDifficultyFilter<$PrismaModel> | $Enums.Difficulty
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumDifficultyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[]
    notIn?: $Enums.Difficulty[]
    not?: NestedEnumDifficultyWithAggregatesFilter<$PrismaModel> | $Enums.Difficulty
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDifficultyFilter<$PrismaModel>
    _max?: NestedEnumDifficultyFilter<$PrismaModel>
  }

  export type NestedEnumResourceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ResourceType | EnumResourceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ResourceType[]
    notIn?: $Enums.ResourceType[]
    not?: NestedEnumResourceTypeFilter<$PrismaModel> | $Enums.ResourceType
  }

  export type NestedEnumResourceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ResourceType | EnumResourceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ResourceType[]
    notIn?: $Enums.ResourceType[]
    not?: NestedEnumResourceTypeWithAggregatesFilter<$PrismaModel> | $Enums.ResourceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumResourceTypeFilter<$PrismaModel>
    _max?: NestedEnumResourceTypeFilter<$PrismaModel>
  }

  export type NestedEnumIssueStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.IssueStatus | EnumIssueStatusFieldRefInput<$PrismaModel>
    in?: $Enums.IssueStatus[]
    notIn?: $Enums.IssueStatus[]
    not?: NestedEnumIssueStatusFilter<$PrismaModel> | $Enums.IssueStatus
  }

  export type NestedEnumIssueStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IssueStatus | EnumIssueStatusFieldRefInput<$PrismaModel>
    in?: $Enums.IssueStatus[]
    notIn?: $Enums.IssueStatus[]
    not?: NestedEnumIssueStatusWithAggregatesFilter<$PrismaModel> | $Enums.IssueStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIssueStatusFilter<$PrismaModel>
    _max?: NestedEnumIssueStatusFilter<$PrismaModel>
  }

  export type HelpIssueCreateWithoutAuthorInput = {
    created_at?: Date | string
    updated_at?: Date | string
    votes: number
    views: number
    subject: string
    content: string
    status: $Enums.IssueStatus
    tags?: TagsByIssuesCreateNestedManyWithoutIssueInput
  }

  export type HelpIssueUncheckedCreateWithoutAuthorInput = {
    id?: number
    created_at?: Date | string
    updated_at?: Date | string
    votes: number
    views: number
    subject: string
    content: string
    status: $Enums.IssueStatus
    tags?: TagsByIssuesUncheckedCreateNestedManyWithoutIssueInput
  }

  export type HelpIssueCreateOrConnectWithoutAuthorInput = {
    where: HelpIssueWhereUniqueInput
    create: XOR<HelpIssueCreateWithoutAuthorInput, HelpIssueUncheckedCreateWithoutAuthorInput>
  }

  export type HelpIssueCreateManyAuthorInputEnvelope = {
    data: HelpIssueCreateManyAuthorInput | HelpIssueCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type SolutionCreateWithoutAuthorInput = {
    created_at?: Date | string
    updated_at?: Date | string
    votes: number
    views: number
    subject: string
    description: string
    code: string
    verified?: boolean
    challenge: ChallengeCreateNestedOneWithoutSolutionsInput
  }

  export type SolutionUncheckedCreateWithoutAuthorInput = {
    id?: number
    created_at?: Date | string
    updated_at?: Date | string
    challenge_id: number
    votes: number
    views: number
    subject: string
    description: string
    code: string
    verified?: boolean
  }

  export type SolutionCreateOrConnectWithoutAuthorInput = {
    where: SolutionWhereUniqueInput
    create: XOR<SolutionCreateWithoutAuthorInput, SolutionUncheckedCreateWithoutAuthorInput>
  }

  export type SolutionCreateManyAuthorInputEnvelope = {
    data: SolutionCreateManyAuthorInput | SolutionCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type HelpIssueUpsertWithWhereUniqueWithoutAuthorInput = {
    where: HelpIssueWhereUniqueInput
    update: XOR<HelpIssueUpdateWithoutAuthorInput, HelpIssueUncheckedUpdateWithoutAuthorInput>
    create: XOR<HelpIssueCreateWithoutAuthorInput, HelpIssueUncheckedCreateWithoutAuthorInput>
  }

  export type HelpIssueUpdateWithWhereUniqueWithoutAuthorInput = {
    where: HelpIssueWhereUniqueInput
    data: XOR<HelpIssueUpdateWithoutAuthorInput, HelpIssueUncheckedUpdateWithoutAuthorInput>
  }

  export type HelpIssueUpdateManyWithWhereWithoutAuthorInput = {
    where: HelpIssueScalarWhereInput
    data: XOR<HelpIssueUpdateManyMutationInput, HelpIssueUncheckedUpdateManyWithoutAuthorInput>
  }

  export type HelpIssueScalarWhereInput = {
    AND?: HelpIssueScalarWhereInput | HelpIssueScalarWhereInput[]
    OR?: HelpIssueScalarWhereInput[]
    NOT?: HelpIssueScalarWhereInput | HelpIssueScalarWhereInput[]
    id?: IntFilter<"HelpIssue"> | number
    created_at?: DateTimeFilter<"HelpIssue"> | Date | string
    updated_at?: DateTimeFilter<"HelpIssue"> | Date | string
    author_id?: IntFilter<"HelpIssue"> | number
    votes?: IntFilter<"HelpIssue"> | number
    views?: IntFilter<"HelpIssue"> | number
    subject?: StringFilter<"HelpIssue"> | string
    content?: StringFilter<"HelpIssue"> | string
    status?: EnumIssueStatusFilter<"HelpIssue"> | $Enums.IssueStatus
  }

  export type SolutionUpsertWithWhereUniqueWithoutAuthorInput = {
    where: SolutionWhereUniqueInput
    update: XOR<SolutionUpdateWithoutAuthorInput, SolutionUncheckedUpdateWithoutAuthorInput>
    create: XOR<SolutionCreateWithoutAuthorInput, SolutionUncheckedCreateWithoutAuthorInput>
  }

  export type SolutionUpdateWithWhereUniqueWithoutAuthorInput = {
    where: SolutionWhereUniqueInput
    data: XOR<SolutionUpdateWithoutAuthorInput, SolutionUncheckedUpdateWithoutAuthorInput>
  }

  export type SolutionUpdateManyWithWhereWithoutAuthorInput = {
    where: SolutionScalarWhereInput
    data: XOR<SolutionUpdateManyMutationInput, SolutionUncheckedUpdateManyWithoutAuthorInput>
  }

  export type SolutionScalarWhereInput = {
    AND?: SolutionScalarWhereInput | SolutionScalarWhereInput[]
    OR?: SolutionScalarWhereInput[]
    NOT?: SolutionScalarWhereInput | SolutionScalarWhereInput[]
    id?: IntFilter<"Solution"> | number
    created_at?: DateTimeFilter<"Solution"> | Date | string
    updated_at?: DateTimeFilter<"Solution"> | Date | string
    author_id?: IntFilter<"Solution"> | number
    challenge_id?: IntFilter<"Solution"> | number
    votes?: IntFilter<"Solution"> | number
    views?: IntFilter<"Solution"> | number
    subject?: StringFilter<"Solution"> | string
    description?: StringFilter<"Solution"> | string
    code?: StringFilter<"Solution"> | string
    verified?: BoolFilter<"Solution"> | boolean
  }

  export type TagsByChallengesCreateWithoutChallengeInput = {
    tag: TagCreateNestedOneWithoutChallengesInput
  }

  export type TagsByChallengesUncheckedCreateWithoutChallengeInput = {
    tag_id: number
  }

  export type TagsByChallengesCreateOrConnectWithoutChallengeInput = {
    where: TagsByChallengesWhereUniqueInput
    create: XOR<TagsByChallengesCreateWithoutChallengeInput, TagsByChallengesUncheckedCreateWithoutChallengeInput>
  }

  export type TagsByChallengesCreateManyChallengeInputEnvelope = {
    data: TagsByChallengesCreateManyChallengeInput | TagsByChallengesCreateManyChallengeInput[]
    skipDuplicates?: boolean
  }

  export type SolutionCreateWithoutChallengeInput = {
    created_at?: Date | string
    updated_at?: Date | string
    votes: number
    views: number
    subject: string
    description: string
    code: string
    verified?: boolean
    author: UserCreateNestedOneWithoutSolutionsInput
  }

  export type SolutionUncheckedCreateWithoutChallengeInput = {
    id?: number
    created_at?: Date | string
    updated_at?: Date | string
    author_id: number
    votes: number
    views: number
    subject: string
    description: string
    code: string
    verified?: boolean
  }

  export type SolutionCreateOrConnectWithoutChallengeInput = {
    where: SolutionWhereUniqueInput
    create: XOR<SolutionCreateWithoutChallengeInput, SolutionUncheckedCreateWithoutChallengeInput>
  }

  export type SolutionCreateManyChallengeInputEnvelope = {
    data: SolutionCreateManyChallengeInput | SolutionCreateManyChallengeInput[]
    skipDuplicates?: boolean
  }

  export type TagsByChallengesUpsertWithWhereUniqueWithoutChallengeInput = {
    where: TagsByChallengesWhereUniqueInput
    update: XOR<TagsByChallengesUpdateWithoutChallengeInput, TagsByChallengesUncheckedUpdateWithoutChallengeInput>
    create: XOR<TagsByChallengesCreateWithoutChallengeInput, TagsByChallengesUncheckedCreateWithoutChallengeInput>
  }

  export type TagsByChallengesUpdateWithWhereUniqueWithoutChallengeInput = {
    where: TagsByChallengesWhereUniqueInput
    data: XOR<TagsByChallengesUpdateWithoutChallengeInput, TagsByChallengesUncheckedUpdateWithoutChallengeInput>
  }

  export type TagsByChallengesUpdateManyWithWhereWithoutChallengeInput = {
    where: TagsByChallengesScalarWhereInput
    data: XOR<TagsByChallengesUpdateManyMutationInput, TagsByChallengesUncheckedUpdateManyWithoutChallengeInput>
  }

  export type TagsByChallengesScalarWhereInput = {
    AND?: TagsByChallengesScalarWhereInput | TagsByChallengesScalarWhereInput[]
    OR?: TagsByChallengesScalarWhereInput[]
    NOT?: TagsByChallengesScalarWhereInput | TagsByChallengesScalarWhereInput[]
    challenge_id?: IntFilter<"TagsByChallenges"> | number
    tag_id?: IntFilter<"TagsByChallenges"> | number
  }

  export type SolutionUpsertWithWhereUniqueWithoutChallengeInput = {
    where: SolutionWhereUniqueInput
    update: XOR<SolutionUpdateWithoutChallengeInput, SolutionUncheckedUpdateWithoutChallengeInput>
    create: XOR<SolutionCreateWithoutChallengeInput, SolutionUncheckedCreateWithoutChallengeInput>
  }

  export type SolutionUpdateWithWhereUniqueWithoutChallengeInput = {
    where: SolutionWhereUniqueInput
    data: XOR<SolutionUpdateWithoutChallengeInput, SolutionUncheckedUpdateWithoutChallengeInput>
  }

  export type SolutionUpdateManyWithWhereWithoutChallengeInput = {
    where: SolutionScalarWhereInput
    data: XOR<SolutionUpdateManyMutationInput, SolutionUncheckedUpdateManyWithoutChallengeInput>
  }

  export type TagsByResourcesCreateWithoutResourceInput = {
    tag: TagCreateNestedOneWithoutResourcesInput
  }

  export type TagsByResourcesUncheckedCreateWithoutResourceInput = {
    tag_id: number
  }

  export type TagsByResourcesCreateOrConnectWithoutResourceInput = {
    where: TagsByResourcesWhereUniqueInput
    create: XOR<TagsByResourcesCreateWithoutResourceInput, TagsByResourcesUncheckedCreateWithoutResourceInput>
  }

  export type TagsByResourcesCreateManyResourceInputEnvelope = {
    data: TagsByResourcesCreateManyResourceInput | TagsByResourcesCreateManyResourceInput[]
    skipDuplicates?: boolean
  }

  export type TagsByResourcesUpsertWithWhereUniqueWithoutResourceInput = {
    where: TagsByResourcesWhereUniqueInput
    update: XOR<TagsByResourcesUpdateWithoutResourceInput, TagsByResourcesUncheckedUpdateWithoutResourceInput>
    create: XOR<TagsByResourcesCreateWithoutResourceInput, TagsByResourcesUncheckedCreateWithoutResourceInput>
  }

  export type TagsByResourcesUpdateWithWhereUniqueWithoutResourceInput = {
    where: TagsByResourcesWhereUniqueInput
    data: XOR<TagsByResourcesUpdateWithoutResourceInput, TagsByResourcesUncheckedUpdateWithoutResourceInput>
  }

  export type TagsByResourcesUpdateManyWithWhereWithoutResourceInput = {
    where: TagsByResourcesScalarWhereInput
    data: XOR<TagsByResourcesUpdateManyMutationInput, TagsByResourcesUncheckedUpdateManyWithoutResourceInput>
  }

  export type TagsByResourcesScalarWhereInput = {
    AND?: TagsByResourcesScalarWhereInput | TagsByResourcesScalarWhereInput[]
    OR?: TagsByResourcesScalarWhereInput[]
    NOT?: TagsByResourcesScalarWhereInput | TagsByResourcesScalarWhereInput[]
    resource_id?: IntFilter<"TagsByResources"> | number
    tag_id?: IntFilter<"TagsByResources"> | number
  }

  export type UserCreateWithoutIssuesInput = {
    email: string
    password: string
    name: string
    profile_picture: string
    role?: $Enums.Role
    level?: $Enums.Knowledge
    likes?: number
    solutions?: SolutionCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutIssuesInput = {
    id?: number
    email: string
    password: string
    name: string
    profile_picture: string
    role?: $Enums.Role
    level?: $Enums.Knowledge
    likes?: number
    solutions?: SolutionUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutIssuesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutIssuesInput, UserUncheckedCreateWithoutIssuesInput>
  }

  export type TagsByIssuesCreateWithoutIssueInput = {
    tag: TagCreateNestedOneWithoutIssuesInput
  }

  export type TagsByIssuesUncheckedCreateWithoutIssueInput = {
    tag_id: number
  }

  export type TagsByIssuesCreateOrConnectWithoutIssueInput = {
    where: TagsByIssuesWhereUniqueInput
    create: XOR<TagsByIssuesCreateWithoutIssueInput, TagsByIssuesUncheckedCreateWithoutIssueInput>
  }

  export type TagsByIssuesCreateManyIssueInputEnvelope = {
    data: TagsByIssuesCreateManyIssueInput | TagsByIssuesCreateManyIssueInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutIssuesInput = {
    update: XOR<UserUpdateWithoutIssuesInput, UserUncheckedUpdateWithoutIssuesInput>
    create: XOR<UserCreateWithoutIssuesInput, UserUncheckedCreateWithoutIssuesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutIssuesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutIssuesInput, UserUncheckedUpdateWithoutIssuesInput>
  }

  export type UserUpdateWithoutIssuesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    profile_picture?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    level?: EnumKnowledgeFieldUpdateOperationsInput | $Enums.Knowledge
    likes?: IntFieldUpdateOperationsInput | number
    solutions?: SolutionUpdateManyWithoutAuthorNestedInput
  }

  export type UserUncheckedUpdateWithoutIssuesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    profile_picture?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    level?: EnumKnowledgeFieldUpdateOperationsInput | $Enums.Knowledge
    likes?: IntFieldUpdateOperationsInput | number
    solutions?: SolutionUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type TagsByIssuesUpsertWithWhereUniqueWithoutIssueInput = {
    where: TagsByIssuesWhereUniqueInput
    update: XOR<TagsByIssuesUpdateWithoutIssueInput, TagsByIssuesUncheckedUpdateWithoutIssueInput>
    create: XOR<TagsByIssuesCreateWithoutIssueInput, TagsByIssuesUncheckedCreateWithoutIssueInput>
  }

  export type TagsByIssuesUpdateWithWhereUniqueWithoutIssueInput = {
    where: TagsByIssuesWhereUniqueInput
    data: XOR<TagsByIssuesUpdateWithoutIssueInput, TagsByIssuesUncheckedUpdateWithoutIssueInput>
  }

  export type TagsByIssuesUpdateManyWithWhereWithoutIssueInput = {
    where: TagsByIssuesScalarWhereInput
    data: XOR<TagsByIssuesUpdateManyMutationInput, TagsByIssuesUncheckedUpdateManyWithoutIssueInput>
  }

  export type TagsByIssuesScalarWhereInput = {
    AND?: TagsByIssuesScalarWhereInput | TagsByIssuesScalarWhereInput[]
    OR?: TagsByIssuesScalarWhereInput[]
    NOT?: TagsByIssuesScalarWhereInput | TagsByIssuesScalarWhereInput[]
    issue_id?: IntFilter<"TagsByIssues"> | number
    tag_id?: IntFilter<"TagsByIssues"> | number
  }

  export type UserCreateWithoutSolutionsInput = {
    email: string
    password: string
    name: string
    profile_picture: string
    role?: $Enums.Role
    level?: $Enums.Knowledge
    likes?: number
    issues?: HelpIssueCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutSolutionsInput = {
    id?: number
    email: string
    password: string
    name: string
    profile_picture: string
    role?: $Enums.Role
    level?: $Enums.Knowledge
    likes?: number
    issues?: HelpIssueUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutSolutionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSolutionsInput, UserUncheckedCreateWithoutSolutionsInput>
  }

  export type ChallengeCreateWithoutSolutionsInput = {
    created_at?: Date | string
    updated_at?: Date | string
    title: string
    description: string
    content: string
    published?: boolean
    difficulty?: $Enums.Difficulty
    tags?: TagsByChallengesCreateNestedManyWithoutChallengeInput
  }

  export type ChallengeUncheckedCreateWithoutSolutionsInput = {
    id?: number
    created_at?: Date | string
    updated_at?: Date | string
    title: string
    description: string
    content: string
    published?: boolean
    difficulty?: $Enums.Difficulty
    tags?: TagsByChallengesUncheckedCreateNestedManyWithoutChallengeInput
  }

  export type ChallengeCreateOrConnectWithoutSolutionsInput = {
    where: ChallengeWhereUniqueInput
    create: XOR<ChallengeCreateWithoutSolutionsInput, ChallengeUncheckedCreateWithoutSolutionsInput>
  }

  export type UserUpsertWithoutSolutionsInput = {
    update: XOR<UserUpdateWithoutSolutionsInput, UserUncheckedUpdateWithoutSolutionsInput>
    create: XOR<UserCreateWithoutSolutionsInput, UserUncheckedCreateWithoutSolutionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSolutionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSolutionsInput, UserUncheckedUpdateWithoutSolutionsInput>
  }

  export type UserUpdateWithoutSolutionsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    profile_picture?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    level?: EnumKnowledgeFieldUpdateOperationsInput | $Enums.Knowledge
    likes?: IntFieldUpdateOperationsInput | number
    issues?: HelpIssueUpdateManyWithoutAuthorNestedInput
  }

  export type UserUncheckedUpdateWithoutSolutionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    profile_picture?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    level?: EnumKnowledgeFieldUpdateOperationsInput | $Enums.Knowledge
    likes?: IntFieldUpdateOperationsInput | number
    issues?: HelpIssueUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type ChallengeUpsertWithoutSolutionsInput = {
    update: XOR<ChallengeUpdateWithoutSolutionsInput, ChallengeUncheckedUpdateWithoutSolutionsInput>
    create: XOR<ChallengeCreateWithoutSolutionsInput, ChallengeUncheckedCreateWithoutSolutionsInput>
    where?: ChallengeWhereInput
  }

  export type ChallengeUpdateToOneWithWhereWithoutSolutionsInput = {
    where?: ChallengeWhereInput
    data: XOR<ChallengeUpdateWithoutSolutionsInput, ChallengeUncheckedUpdateWithoutSolutionsInput>
  }

  export type ChallengeUpdateWithoutSolutionsInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    tags?: TagsByChallengesUpdateManyWithoutChallengeNestedInput
  }

  export type ChallengeUncheckedUpdateWithoutSolutionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    tags?: TagsByChallengesUncheckedUpdateManyWithoutChallengeNestedInput
  }

  export type TagsByChallengesCreateWithoutTagInput = {
    challenge: ChallengeCreateNestedOneWithoutTagsInput
  }

  export type TagsByChallengesUncheckedCreateWithoutTagInput = {
    challenge_id: number
  }

  export type TagsByChallengesCreateOrConnectWithoutTagInput = {
    where: TagsByChallengesWhereUniqueInput
    create: XOR<TagsByChallengesCreateWithoutTagInput, TagsByChallengesUncheckedCreateWithoutTagInput>
  }

  export type TagsByChallengesCreateManyTagInputEnvelope = {
    data: TagsByChallengesCreateManyTagInput | TagsByChallengesCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type TagsByIssuesCreateWithoutTagInput = {
    issue: HelpIssueCreateNestedOneWithoutTagsInput
  }

  export type TagsByIssuesUncheckedCreateWithoutTagInput = {
    issue_id: number
  }

  export type TagsByIssuesCreateOrConnectWithoutTagInput = {
    where: TagsByIssuesWhereUniqueInput
    create: XOR<TagsByIssuesCreateWithoutTagInput, TagsByIssuesUncheckedCreateWithoutTagInput>
  }

  export type TagsByIssuesCreateManyTagInputEnvelope = {
    data: TagsByIssuesCreateManyTagInput | TagsByIssuesCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type TagsByResourcesCreateWithoutTagInput = {
    resource: ResourceCreateNestedOneWithoutTagsInput
  }

  export type TagsByResourcesUncheckedCreateWithoutTagInput = {
    resource_id: number
  }

  export type TagsByResourcesCreateOrConnectWithoutTagInput = {
    where: TagsByResourcesWhereUniqueInput
    create: XOR<TagsByResourcesCreateWithoutTagInput, TagsByResourcesUncheckedCreateWithoutTagInput>
  }

  export type TagsByResourcesCreateManyTagInputEnvelope = {
    data: TagsByResourcesCreateManyTagInput | TagsByResourcesCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type TagsByChallengesUpsertWithWhereUniqueWithoutTagInput = {
    where: TagsByChallengesWhereUniqueInput
    update: XOR<TagsByChallengesUpdateWithoutTagInput, TagsByChallengesUncheckedUpdateWithoutTagInput>
    create: XOR<TagsByChallengesCreateWithoutTagInput, TagsByChallengesUncheckedCreateWithoutTagInput>
  }

  export type TagsByChallengesUpdateWithWhereUniqueWithoutTagInput = {
    where: TagsByChallengesWhereUniqueInput
    data: XOR<TagsByChallengesUpdateWithoutTagInput, TagsByChallengesUncheckedUpdateWithoutTagInput>
  }

  export type TagsByChallengesUpdateManyWithWhereWithoutTagInput = {
    where: TagsByChallengesScalarWhereInput
    data: XOR<TagsByChallengesUpdateManyMutationInput, TagsByChallengesUncheckedUpdateManyWithoutTagInput>
  }

  export type TagsByIssuesUpsertWithWhereUniqueWithoutTagInput = {
    where: TagsByIssuesWhereUniqueInput
    update: XOR<TagsByIssuesUpdateWithoutTagInput, TagsByIssuesUncheckedUpdateWithoutTagInput>
    create: XOR<TagsByIssuesCreateWithoutTagInput, TagsByIssuesUncheckedCreateWithoutTagInput>
  }

  export type TagsByIssuesUpdateWithWhereUniqueWithoutTagInput = {
    where: TagsByIssuesWhereUniqueInput
    data: XOR<TagsByIssuesUpdateWithoutTagInput, TagsByIssuesUncheckedUpdateWithoutTagInput>
  }

  export type TagsByIssuesUpdateManyWithWhereWithoutTagInput = {
    where: TagsByIssuesScalarWhereInput
    data: XOR<TagsByIssuesUpdateManyMutationInput, TagsByIssuesUncheckedUpdateManyWithoutTagInput>
  }

  export type TagsByResourcesUpsertWithWhereUniqueWithoutTagInput = {
    where: TagsByResourcesWhereUniqueInput
    update: XOR<TagsByResourcesUpdateWithoutTagInput, TagsByResourcesUncheckedUpdateWithoutTagInput>
    create: XOR<TagsByResourcesCreateWithoutTagInput, TagsByResourcesUncheckedCreateWithoutTagInput>
  }

  export type TagsByResourcesUpdateWithWhereUniqueWithoutTagInput = {
    where: TagsByResourcesWhereUniqueInput
    data: XOR<TagsByResourcesUpdateWithoutTagInput, TagsByResourcesUncheckedUpdateWithoutTagInput>
  }

  export type TagsByResourcesUpdateManyWithWhereWithoutTagInput = {
    where: TagsByResourcesScalarWhereInput
    data: XOR<TagsByResourcesUpdateManyMutationInput, TagsByResourcesUncheckedUpdateManyWithoutTagInput>
  }

  export type ChallengeCreateWithoutTagsInput = {
    created_at?: Date | string
    updated_at?: Date | string
    title: string
    description: string
    content: string
    published?: boolean
    difficulty?: $Enums.Difficulty
    solutions?: SolutionCreateNestedManyWithoutChallengeInput
  }

  export type ChallengeUncheckedCreateWithoutTagsInput = {
    id?: number
    created_at?: Date | string
    updated_at?: Date | string
    title: string
    description: string
    content: string
    published?: boolean
    difficulty?: $Enums.Difficulty
    solutions?: SolutionUncheckedCreateNestedManyWithoutChallengeInput
  }

  export type ChallengeCreateOrConnectWithoutTagsInput = {
    where: ChallengeWhereUniqueInput
    create: XOR<ChallengeCreateWithoutTagsInput, ChallengeUncheckedCreateWithoutTagsInput>
  }

  export type TagCreateWithoutChallengesInput = {
    tag: string
    issues?: TagsByIssuesCreateNestedManyWithoutTagInput
    resources?: TagsByResourcesCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateWithoutChallengesInput = {
    id?: number
    tag: string
    issues?: TagsByIssuesUncheckedCreateNestedManyWithoutTagInput
    resources?: TagsByResourcesUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagCreateOrConnectWithoutChallengesInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutChallengesInput, TagUncheckedCreateWithoutChallengesInput>
  }

  export type ChallengeUpsertWithoutTagsInput = {
    update: XOR<ChallengeUpdateWithoutTagsInput, ChallengeUncheckedUpdateWithoutTagsInput>
    create: XOR<ChallengeCreateWithoutTagsInput, ChallengeUncheckedCreateWithoutTagsInput>
    where?: ChallengeWhereInput
  }

  export type ChallengeUpdateToOneWithWhereWithoutTagsInput = {
    where?: ChallengeWhereInput
    data: XOR<ChallengeUpdateWithoutTagsInput, ChallengeUncheckedUpdateWithoutTagsInput>
  }

  export type ChallengeUpdateWithoutTagsInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    solutions?: SolutionUpdateManyWithoutChallengeNestedInput
  }

  export type ChallengeUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    solutions?: SolutionUncheckedUpdateManyWithoutChallengeNestedInput
  }

  export type TagUpsertWithoutChallengesInput = {
    update: XOR<TagUpdateWithoutChallengesInput, TagUncheckedUpdateWithoutChallengesInput>
    create: XOR<TagCreateWithoutChallengesInput, TagUncheckedCreateWithoutChallengesInput>
    where?: TagWhereInput
  }

  export type TagUpdateToOneWithWhereWithoutChallengesInput = {
    where?: TagWhereInput
    data: XOR<TagUpdateWithoutChallengesInput, TagUncheckedUpdateWithoutChallengesInput>
  }

  export type TagUpdateWithoutChallengesInput = {
    tag?: StringFieldUpdateOperationsInput | string
    issues?: TagsByIssuesUpdateManyWithoutTagNestedInput
    resources?: TagsByResourcesUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateWithoutChallengesInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag?: StringFieldUpdateOperationsInput | string
    issues?: TagsByIssuesUncheckedUpdateManyWithoutTagNestedInput
    resources?: TagsByResourcesUncheckedUpdateManyWithoutTagNestedInput
  }

  export type HelpIssueCreateWithoutTagsInput = {
    created_at?: Date | string
    updated_at?: Date | string
    votes: number
    views: number
    subject: string
    content: string
    status: $Enums.IssueStatus
    author: UserCreateNestedOneWithoutIssuesInput
  }

  export type HelpIssueUncheckedCreateWithoutTagsInput = {
    id?: number
    created_at?: Date | string
    updated_at?: Date | string
    author_id: number
    votes: number
    views: number
    subject: string
    content: string
    status: $Enums.IssueStatus
  }

  export type HelpIssueCreateOrConnectWithoutTagsInput = {
    where: HelpIssueWhereUniqueInput
    create: XOR<HelpIssueCreateWithoutTagsInput, HelpIssueUncheckedCreateWithoutTagsInput>
  }

  export type TagCreateWithoutIssuesInput = {
    tag: string
    challenges?: TagsByChallengesCreateNestedManyWithoutTagInput
    resources?: TagsByResourcesCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateWithoutIssuesInput = {
    id?: number
    tag: string
    challenges?: TagsByChallengesUncheckedCreateNestedManyWithoutTagInput
    resources?: TagsByResourcesUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagCreateOrConnectWithoutIssuesInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutIssuesInput, TagUncheckedCreateWithoutIssuesInput>
  }

  export type HelpIssueUpsertWithoutTagsInput = {
    update: XOR<HelpIssueUpdateWithoutTagsInput, HelpIssueUncheckedUpdateWithoutTagsInput>
    create: XOR<HelpIssueCreateWithoutTagsInput, HelpIssueUncheckedCreateWithoutTagsInput>
    where?: HelpIssueWhereInput
  }

  export type HelpIssueUpdateToOneWithWhereWithoutTagsInput = {
    where?: HelpIssueWhereInput
    data: XOR<HelpIssueUpdateWithoutTagsInput, HelpIssueUncheckedUpdateWithoutTagsInput>
  }

  export type HelpIssueUpdateWithoutTagsInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumIssueStatusFieldUpdateOperationsInput | $Enums.IssueStatus
    author?: UserUpdateOneRequiredWithoutIssuesNestedInput
  }

  export type HelpIssueUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author_id?: IntFieldUpdateOperationsInput | number
    votes?: IntFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumIssueStatusFieldUpdateOperationsInput | $Enums.IssueStatus
  }

  export type TagUpsertWithoutIssuesInput = {
    update: XOR<TagUpdateWithoutIssuesInput, TagUncheckedUpdateWithoutIssuesInput>
    create: XOR<TagCreateWithoutIssuesInput, TagUncheckedCreateWithoutIssuesInput>
    where?: TagWhereInput
  }

  export type TagUpdateToOneWithWhereWithoutIssuesInput = {
    where?: TagWhereInput
    data: XOR<TagUpdateWithoutIssuesInput, TagUncheckedUpdateWithoutIssuesInput>
  }

  export type TagUpdateWithoutIssuesInput = {
    tag?: StringFieldUpdateOperationsInput | string
    challenges?: TagsByChallengesUpdateManyWithoutTagNestedInput
    resources?: TagsByResourcesUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateWithoutIssuesInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag?: StringFieldUpdateOperationsInput | string
    challenges?: TagsByChallengesUncheckedUpdateManyWithoutTagNestedInput
    resources?: TagsByResourcesUncheckedUpdateManyWithoutTagNestedInput
  }

  export type ResourceCreateWithoutTagsInput = {
    created_at?: Date | string
    updated_at?: Date | string
    title: string
    description: string
    content: string
    published?: boolean
    type?: $Enums.ResourceType
    url: string
  }

  export type ResourceUncheckedCreateWithoutTagsInput = {
    id?: number
    created_at?: Date | string
    updated_at?: Date | string
    title: string
    description: string
    content: string
    published?: boolean
    type?: $Enums.ResourceType
    url: string
  }

  export type ResourceCreateOrConnectWithoutTagsInput = {
    where: ResourceWhereUniqueInput
    create: XOR<ResourceCreateWithoutTagsInput, ResourceUncheckedCreateWithoutTagsInput>
  }

  export type TagCreateWithoutResourcesInput = {
    tag: string
    challenges?: TagsByChallengesCreateNestedManyWithoutTagInput
    issues?: TagsByIssuesCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateWithoutResourcesInput = {
    id?: number
    tag: string
    challenges?: TagsByChallengesUncheckedCreateNestedManyWithoutTagInput
    issues?: TagsByIssuesUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagCreateOrConnectWithoutResourcesInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutResourcesInput, TagUncheckedCreateWithoutResourcesInput>
  }

  export type ResourceUpsertWithoutTagsInput = {
    update: XOR<ResourceUpdateWithoutTagsInput, ResourceUncheckedUpdateWithoutTagsInput>
    create: XOR<ResourceCreateWithoutTagsInput, ResourceUncheckedCreateWithoutTagsInput>
    where?: ResourceWhereInput
  }

  export type ResourceUpdateToOneWithWhereWithoutTagsInput = {
    where?: ResourceWhereInput
    data: XOR<ResourceUpdateWithoutTagsInput, ResourceUncheckedUpdateWithoutTagsInput>
  }

  export type ResourceUpdateWithoutTagsInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumResourceTypeFieldUpdateOperationsInput | $Enums.ResourceType
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ResourceUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumResourceTypeFieldUpdateOperationsInput | $Enums.ResourceType
    url?: StringFieldUpdateOperationsInput | string
  }

  export type TagUpsertWithoutResourcesInput = {
    update: XOR<TagUpdateWithoutResourcesInput, TagUncheckedUpdateWithoutResourcesInput>
    create: XOR<TagCreateWithoutResourcesInput, TagUncheckedCreateWithoutResourcesInput>
    where?: TagWhereInput
  }

  export type TagUpdateToOneWithWhereWithoutResourcesInput = {
    where?: TagWhereInput
    data: XOR<TagUpdateWithoutResourcesInput, TagUncheckedUpdateWithoutResourcesInput>
  }

  export type TagUpdateWithoutResourcesInput = {
    tag?: StringFieldUpdateOperationsInput | string
    challenges?: TagsByChallengesUpdateManyWithoutTagNestedInput
    issues?: TagsByIssuesUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateWithoutResourcesInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag?: StringFieldUpdateOperationsInput | string
    challenges?: TagsByChallengesUncheckedUpdateManyWithoutTagNestedInput
    issues?: TagsByIssuesUncheckedUpdateManyWithoutTagNestedInput
  }

  export type HelpIssueCreateManyAuthorInput = {
    id?: number
    created_at?: Date | string
    updated_at?: Date | string
    votes: number
    views: number
    subject: string
    content: string
    status: $Enums.IssueStatus
  }

  export type SolutionCreateManyAuthorInput = {
    id?: number
    created_at?: Date | string
    updated_at?: Date | string
    challenge_id: number
    votes: number
    views: number
    subject: string
    description: string
    code: string
    verified?: boolean
  }

  export type HelpIssueUpdateWithoutAuthorInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumIssueStatusFieldUpdateOperationsInput | $Enums.IssueStatus
    tags?: TagsByIssuesUpdateManyWithoutIssueNestedInput
  }

  export type HelpIssueUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumIssueStatusFieldUpdateOperationsInput | $Enums.IssueStatus
    tags?: TagsByIssuesUncheckedUpdateManyWithoutIssueNestedInput
  }

  export type HelpIssueUncheckedUpdateManyWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumIssueStatusFieldUpdateOperationsInput | $Enums.IssueStatus
  }

  export type SolutionUpdateWithoutAuthorInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    challenge?: ChallengeUpdateOneRequiredWithoutSolutionsNestedInput
  }

  export type SolutionUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    challenge_id?: IntFieldUpdateOperationsInput | number
    votes?: IntFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SolutionUncheckedUpdateManyWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    challenge_id?: IntFieldUpdateOperationsInput | number
    votes?: IntFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TagsByChallengesCreateManyChallengeInput = {
    tag_id: number
  }

  export type SolutionCreateManyChallengeInput = {
    id?: number
    created_at?: Date | string
    updated_at?: Date | string
    author_id: number
    votes: number
    views: number
    subject: string
    description: string
    code: string
    verified?: boolean
  }

  export type TagsByChallengesUpdateWithoutChallengeInput = {
    tag?: TagUpdateOneRequiredWithoutChallengesNestedInput
  }

  export type TagsByChallengesUncheckedUpdateWithoutChallengeInput = {
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type TagsByChallengesUncheckedUpdateManyWithoutChallengeInput = {
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type SolutionUpdateWithoutChallengeInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneRequiredWithoutSolutionsNestedInput
  }

  export type SolutionUncheckedUpdateWithoutChallengeInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author_id?: IntFieldUpdateOperationsInput | number
    votes?: IntFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SolutionUncheckedUpdateManyWithoutChallengeInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author_id?: IntFieldUpdateOperationsInput | number
    votes?: IntFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TagsByResourcesCreateManyResourceInput = {
    tag_id: number
  }

  export type TagsByResourcesUpdateWithoutResourceInput = {
    tag?: TagUpdateOneRequiredWithoutResourcesNestedInput
  }

  export type TagsByResourcesUncheckedUpdateWithoutResourceInput = {
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type TagsByResourcesUncheckedUpdateManyWithoutResourceInput = {
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type TagsByIssuesCreateManyIssueInput = {
    tag_id: number
  }

  export type TagsByIssuesUpdateWithoutIssueInput = {
    tag?: TagUpdateOneRequiredWithoutIssuesNestedInput
  }

  export type TagsByIssuesUncheckedUpdateWithoutIssueInput = {
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type TagsByIssuesUncheckedUpdateManyWithoutIssueInput = {
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type TagsByChallengesCreateManyTagInput = {
    challenge_id: number
  }

  export type TagsByIssuesCreateManyTagInput = {
    issue_id: number
  }

  export type TagsByResourcesCreateManyTagInput = {
    resource_id: number
  }

  export type TagsByChallengesUpdateWithoutTagInput = {
    challenge?: ChallengeUpdateOneRequiredWithoutTagsNestedInput
  }

  export type TagsByChallengesUncheckedUpdateWithoutTagInput = {
    challenge_id?: IntFieldUpdateOperationsInput | number
  }

  export type TagsByChallengesUncheckedUpdateManyWithoutTagInput = {
    challenge_id?: IntFieldUpdateOperationsInput | number
  }

  export type TagsByIssuesUpdateWithoutTagInput = {
    issue?: HelpIssueUpdateOneRequiredWithoutTagsNestedInput
  }

  export type TagsByIssuesUncheckedUpdateWithoutTagInput = {
    issue_id?: IntFieldUpdateOperationsInput | number
  }

  export type TagsByIssuesUncheckedUpdateManyWithoutTagInput = {
    issue_id?: IntFieldUpdateOperationsInput | number
  }

  export type TagsByResourcesUpdateWithoutTagInput = {
    resource?: ResourceUpdateOneRequiredWithoutTagsNestedInput
  }

  export type TagsByResourcesUncheckedUpdateWithoutTagInput = {
    resource_id?: IntFieldUpdateOperationsInput | number
  }

  export type TagsByResourcesUncheckedUpdateManyWithoutTagInput = {
    resource_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChallengeCountOutputTypeDefaultArgs instead
     */
    export type ChallengeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChallengeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ResourceCountOutputTypeDefaultArgs instead
     */
    export type ResourceCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ResourceCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HelpIssueCountOutputTypeDefaultArgs instead
     */
    export type HelpIssueCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HelpIssueCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagCountOutputTypeDefaultArgs instead
     */
    export type TagCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChallengeDefaultArgs instead
     */
    export type ChallengeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChallengeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ResourceDefaultArgs instead
     */
    export type ResourceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ResourceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HelpIssueDefaultArgs instead
     */
    export type HelpIssueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HelpIssueDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SolutionDefaultArgs instead
     */
    export type SolutionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SolutionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagDefaultArgs instead
     */
    export type TagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagsByChallengesDefaultArgs instead
     */
    export type TagsByChallengesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagsByChallengesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagsByIssuesDefaultArgs instead
     */
    export type TagsByIssuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagsByIssuesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagsByResourcesDefaultArgs instead
     */
    export type TagsByResourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagsByResourcesDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}