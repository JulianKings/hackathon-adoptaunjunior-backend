generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  moderator
  admin
}

enum Knowledge {
  student
  junior
  senior
  manager
}

enum ResourceType {
  video
  course
}

enum Difficulty {
  basic
  easy
  medium
  hard
  expert
}

enum IssueStatus {
  open
  in_progress
  solved
  closed
}

model User {
  id              Int         @id @default(autoincrement())
  email           String      @unique
  password        String
  name            String
  profile_picture String
  role            Role        @default(user)
  level           Knowledge   @default(student)
  likes           Int         @default(0)
  created_at      DateTime    @default(now())
  issues          HelpIssue[]
  solutions       Solution[]

  @@map("users")
}

model Challenge {
  id          Int         @id @default(autoincrement())
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  title       String      @db.VarChar(255)
  description String      @db.VarChar(500)
  content     String      @db.Text
  published   Boolean     @default(false)
  difficulty  Difficulty  @default(basic)
  rating      ChallengeRating[]
  picture     String
  tags        TagsByChallenges[]
  solutions   Solution[] 

  @@map("challenges")      
}

model ChallengeRating {
  id            Int         @id @default(autoincrement())
  created_at    DateTime    @default(now())
  challenge     Challenge   @relation(fields: [challenge_id], references: [id], onDelete: Cascade)
  challenge_id  Int
  value         Int

  @@map("challenge_rating")      
}

model Resource {
  id          Int           @id @default(autoincrement())
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  title       String        @db.VarChar(255)
  description String        @db.VarChar(500)
  content     String        @db.Text
  published   Boolean       @default(false)
  type        ResourceType  @default(course)
  url         String        @db.VarChar(500)
  image       String        @db.VarChar(500)
  tags        TagsByResources[] 

  @@map("resources")      
}

model HelpIssue {
  id          Int         @id @default(autoincrement())
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  author      User        @relation(fields: [author_id], references: [id], onDelete: Cascade)
  author_id   Int
  votes       Int
  views       Int
  subject     String      @db.VarChar(500)
  content     String      @db.Text
  tags        TagsByIssues[]
  status      IssueStatus

  @@map("issues")
}

model Solution {
  id            Int           @id @default(autoincrement())
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  author        User        @relation(fields: [author_id], references: [id], onDelete: Cascade)
  author_id     Int
  challenge     Challenge   @relation(fields: [challenge_id], references: [id], onDelete: Cascade)
  challenge_id  Int
  votes         Int
  views         Int
  subject       String      @db.VarChar(500)
  description   String      @db.Text
  code          String      @db.Text
  verified      Boolean     @default(false)  

  @@map("solutions")
}

model Tag {
  id          Int                   @id @default(autoincrement())
  tag         String
  challenges  TagsByChallenges[]
  issues      TagsByIssues[]
  resources   TagsByResources[]

  @@map("tags")
}

model TagsByChallenges {
  challenge       Challenge         @relation(fields: [challenge_id], references: [id], onDelete: Cascade)
  challenge_id    Int
  tag             Tag               @relation(fields: [tag_id], references: [id], onDelete: Cascade)
  tag_id          Int

  @@id([challenge_id, tag_id])
  @@map("challenge_tags")
}

model TagsByIssues {
  issue           HelpIssue         @relation(fields: [issue_id], references: [id], onDelete: Cascade)
  issue_id        Int
  tag             Tag               @relation(fields: [tag_id], references: [id], onDelete: Cascade)
  tag_id          Int

  @@id([issue_id, tag_id])
  @@map("issue_tags")
}

model TagsByResources {
  resource        Resource          @relation(fields: [resource_id], references: [id], onDelete: Cascade)
  resource_id     Int
  tag             Tag               @relation(fields: [tag_id], references: [id], onDelete: Cascade)
  tag_id          Int

  @@id([resource_id, tag_id])
  @@map("resource_tags")
}